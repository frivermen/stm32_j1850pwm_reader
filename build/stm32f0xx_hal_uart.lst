ARM GAS  /tmp/ccTcPcT8.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f0xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"
  18              		.section	.text.HAL_UART_Init,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_UART_Init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	HAL_UART_Init:
  26              	.LFB40:
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @file    stm32f0xx_hal_uart.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   [..]
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
ARM GAS  /tmp/ccTcPcT8.s 			page 2


  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_UART_Init() API.
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     ##### Callback registration #####
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     ==================================
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
ARM GAS  /tmp/ccTcPcT8.s 			page 3


  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and a pointer to the user callback function.
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     weak (surcharged) function.
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and the Callback ID.
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This function allows to reset following callbacks:
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     not defined, the callback registration feature is not available
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @endverbatim
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @attention
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccTcPcT8.s 			page 4


 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #include "stm32f0xx_hal.h"
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup STM32F0xx_HAL_Driver
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART UART
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief HAL UART module driver
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                                       USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8 )) /*!< UART or
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT))  /*!< UA
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccTcPcT8.s 			page 5


 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** ===============================================================================
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in asynchronous mode.
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Baud Rate
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Word Length
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Stop Bit
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Hardware flow control
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Receiver/transmitter modes
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Over Sampling Method
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) One-Bit Sampling Method
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) data logical level inversion
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX and TX pins swap
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX overrun detection disabling
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA disabling on RX error
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) MSB first on communication line
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) auto Baud rate detection
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     are available in reference manual).
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   following table.
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 6


 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   Table 1. UART frame format.
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
  27              		.loc 1 288 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart == NULL)
  43              		.loc 1 290 6
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 002B     		cmp	r3, #0
  46 000c 01D1     		bne	.L2
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
  47              		.loc 1 292 12
  48 000e 0123     		movs	r3, #1
  49 0010 44E0     		b	.L3
  50              	.L2:
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/ccTcPcT8.s 			page 7


 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
  51              		.loc 1 306 12
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 5B6F     		ldr	r3, [r3, #116]
  54              		.loc 1 306 6
  55 0016 002B     		cmp	r3, #0
  56 0018 07D1     		bne	.L4
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  57              		.loc 1 309 17
  58 001a 7B68     		ldr	r3, [r7, #4]
  59 001c 7022     		movs	r2, #112
  60 001e 0021     		movs	r1, #0
  61 0020 9954     		strb	r1, [r3, r2]
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware */
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->MspInitCallback(huart);
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  62              		.loc 1 323 5
  63 0022 7B68     		ldr	r3, [r7, #4]
  64 0024 1800     		movs	r0, r3
  65 0026 FFF7FEFF 		bl	HAL_UART_MspInit
  66              	.L4:
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  67              		.loc 1 327 17
  68 002a 7B68     		ldr	r3, [r7, #4]
  69 002c 2422     		movs	r2, #36
  70 002e 5A67     		str	r2, [r3, #116]
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  71              		.loc 1 329 3
ARM GAS  /tmp/ccTcPcT8.s 			page 8


  72 0030 7B68     		ldr	r3, [r7, #4]
  73 0032 1B68     		ldr	r3, [r3]
  74 0034 1A68     		ldr	r2, [r3]
  75 0036 7B68     		ldr	r3, [r7, #4]
  76 0038 1B68     		ldr	r3, [r3]
  77 003a 0121     		movs	r1, #1
  78 003c 8A43     		bics	r2, r1
  79 003e 1A60     		str	r2, [r3]
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  80              		.loc 1 332 7
  81 0040 7B68     		ldr	r3, [r7, #4]
  82 0042 1800     		movs	r0, r3
  83 0044 FFF7FEFF 		bl	UART_SetConfig
  84 0048 0300     		movs	r3, r0
  85              		.loc 1 332 6 discriminator 1
  86 004a 012B     		cmp	r3, #1
  87 004c 01D1     		bne	.L5
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
  88              		.loc 1 334 12
  89 004e 0123     		movs	r3, #1
  90 0050 24E0     		b	.L3
  91              	.L5:
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  92              		.loc 1 337 26
  93 0052 7B68     		ldr	r3, [r7, #4]
  94 0054 5B6A     		ldr	r3, [r3, #36]
  95              		.loc 1 337 6
  96 0056 002B     		cmp	r3, #0
  97 0058 03D0     		beq	.L6
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
  98              		.loc 1 339 5
  99 005a 7B68     		ldr	r3, [r7, #4]
 100 005c 1800     		movs	r0, r3
 101 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
 102              	.L6:
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 103              		.loc 1 348 3
 104 0062 7B68     		ldr	r3, [r7, #4]
 105 0064 1B68     		ldr	r3, [r3]
 106 0066 5A68     		ldr	r2, [r3, #4]
 107 0068 7B68     		ldr	r3, [r7, #4]
 108 006a 1B68     		ldr	r3, [r3]
 109 006c 0D49     		ldr	r1, .L7
ARM GAS  /tmp/ccTcPcT8.s 			page 9


 110 006e 0A40     		ands	r2, r1
 111 0070 5A60     		str	r2, [r3, #4]
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR2_LINEN */
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 112              		.loc 1 360 3
 113 0072 7B68     		ldr	r3, [r7, #4]
 114 0074 1B68     		ldr	r3, [r3]
 115 0076 9A68     		ldr	r2, [r3, #8]
 116 0078 7B68     		ldr	r3, [r7, #4]
 117 007a 1B68     		ldr	r3, [r3]
 118 007c 0821     		movs	r1, #8
 119 007e 8A43     		bics	r2, r1
 120 0080 9A60     		str	r2, [r3, #8]
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN*/
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_SCEN */
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 121              		.loc 1 364 3
 122 0082 7B68     		ldr	r3, [r7, #4]
 123 0084 1B68     		ldr	r3, [r3]
 124 0086 1A68     		ldr	r2, [r3]
 125 0088 7B68     		ldr	r3, [r7, #4]
 126 008a 1B68     		ldr	r3, [r3]
 127 008c 0121     		movs	r1, #1
 128 008e 0A43     		orrs	r2, r1
 129 0090 1A60     		str	r2, [r3]
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 130              		.loc 1 367 11
 131 0092 7B68     		ldr	r3, [r7, #4]
 132 0094 1800     		movs	r0, r3
 133 0096 FFF7FEFF 		bl	UART_CheckIdleState
 134 009a 0300     		movs	r3, r0
 135              	.L3:
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 136              		.loc 1 368 1
 137 009c 1800     		movs	r0, r3
 138 009e BD46     		mov	sp, r7
 139 00a0 02B0     		add	sp, sp, #8
 140              		@ sp needed
 141 00a2 80BD     		pop	{r7, pc}
 142              	.L8:
 143              		.align	2
 144              	.L7:
 145 00a4 FFF7FFFF 		.word	-2049
 146              		.cfi_endproc
ARM GAS  /tmp/ccTcPcT8.s 			page 10


 147              	.LFE40:
 149              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 150              		.align	1
 151              		.global	HAL_HalfDuplex_Init
 152              		.syntax unified
 153              		.code	16
 154              		.thumb_func
 156              	HAL_HalfDuplex_Init:
 157              	.LFB41:
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 158              		.loc 1 377 1
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 8
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 82B0     		sub	sp, sp, #8
 168              	.LCFI4:
 169              		.cfi_def_cfa_offset 16
 170 0004 00AF     		add	r7, sp, #0
 171              	.LCFI5:
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart == NULL)
 174              		.loc 1 379 6
 175 0008 7B68     		ldr	r3, [r7, #4]
 176 000a 002B     		cmp	r3, #0
 177 000c 01D1     		bne	.L10
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 178              		.loc 1 381 12
 179 000e 0123     		movs	r3, #1
 180 0010 44E0     		b	.L11
 181              	.L10:
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check UART instance */
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 182              		.loc 1 387 12
 183 0012 7B68     		ldr	r3, [r7, #4]
 184 0014 5B6F     		ldr	r3, [r3, #116]
 185              		.loc 1 387 6
 186 0016 002B     		cmp	r3, #0
ARM GAS  /tmp/ccTcPcT8.s 			page 11


 187 0018 07D1     		bne	.L12
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 188              		.loc 1 390 17
 189 001a 7B68     		ldr	r3, [r7, #4]
 190 001c 7022     		movs	r2, #112
 191 001e 0021     		movs	r1, #0
 192 0020 9954     		strb	r1, [r3, r2]
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware */
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->MspInitCallback(huart);
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 193              		.loc 1 404 5
 194 0022 7B68     		ldr	r3, [r7, #4]
 195 0024 1800     		movs	r0, r3
 196 0026 FFF7FEFF 		bl	HAL_UART_MspInit
 197              	.L12:
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 198              		.loc 1 408 17
 199 002a 7B68     		ldr	r3, [r7, #4]
 200 002c 2422     		movs	r2, #36
 201 002e 5A67     		str	r2, [r3, #116]
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 202              		.loc 1 410 3
 203 0030 7B68     		ldr	r3, [r7, #4]
 204 0032 1B68     		ldr	r3, [r3]
 205 0034 1A68     		ldr	r2, [r3]
 206 0036 7B68     		ldr	r3, [r7, #4]
 207 0038 1B68     		ldr	r3, [r3]
 208 003a 0121     		movs	r1, #1
 209 003c 8A43     		bics	r2, r1
 210 003e 1A60     		str	r2, [r3]
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 211              		.loc 1 413 7
 212 0040 7B68     		ldr	r3, [r7, #4]
 213 0042 1800     		movs	r0, r3
 214 0044 FFF7FEFF 		bl	UART_SetConfig
 215 0048 0300     		movs	r3, r0
 216              		.loc 1 413 6 discriminator 1
 217 004a 012B     		cmp	r3, #1
ARM GAS  /tmp/ccTcPcT8.s 			page 12


 218 004c 01D1     		bne	.L13
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 219              		.loc 1 415 12
 220 004e 0123     		movs	r3, #1
 221 0050 24E0     		b	.L11
 222              	.L13:
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 223              		.loc 1 418 26
 224 0052 7B68     		ldr	r3, [r7, #4]
 225 0054 5B6A     		ldr	r3, [r3, #36]
 226              		.loc 1 418 6
 227 0056 002B     		cmp	r3, #0
 228 0058 03D0     		beq	.L14
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 229              		.loc 1 420 5
 230 005a 7B68     		ldr	r3, [r7, #4]
 231 005c 1800     		movs	r0, r3
 232 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
 233              	.L14:
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 234              		.loc 1 429 3
 235 0062 7B68     		ldr	r3, [r7, #4]
 236 0064 1B68     		ldr	r3, [r3]
 237 0066 5A68     		ldr	r2, [r3, #4]
 238 0068 7B68     		ldr	r3, [r7, #4]
 239 006a 1B68     		ldr	r3, [r3]
 240 006c 0D49     		ldr	r1, .L15
 241 006e 0A40     		ands	r2, r1
 242 0070 5A60     		str	r2, [r3, #4]
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR2_LINEN */
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_SCEN);
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_SCEN */
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 243              		.loc 1 444 3
ARM GAS  /tmp/ccTcPcT8.s 			page 13


 244 0072 7B68     		ldr	r3, [r7, #4]
 245 0074 1B68     		ldr	r3, [r3]
 246 0076 9A68     		ldr	r2, [r3, #8]
 247 0078 7B68     		ldr	r3, [r7, #4]
 248 007a 1B68     		ldr	r3, [r3]
 249 007c 0821     		movs	r1, #8
 250 007e 0A43     		orrs	r2, r1
 251 0080 9A60     		str	r2, [r3, #8]
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 252              		.loc 1 446 3
 253 0082 7B68     		ldr	r3, [r7, #4]
 254 0084 1B68     		ldr	r3, [r3]
 255 0086 1A68     		ldr	r2, [r3]
 256 0088 7B68     		ldr	r3, [r7, #4]
 257 008a 1B68     		ldr	r3, [r3]
 258 008c 0121     		movs	r1, #1
 259 008e 0A43     		orrs	r2, r1
 260 0090 1A60     		str	r2, [r3]
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 261              		.loc 1 449 11
 262 0092 7B68     		ldr	r3, [r7, #4]
 263 0094 1800     		movs	r0, r3
 264 0096 FFF7FEFF 		bl	UART_CheckIdleState
 265 009a 0300     		movs	r3, r0
 266              	.L11:
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 267              		.loc 1 450 1
 268 009c 1800     		movs	r0, r3
 269 009e BD46     		mov	sp, r7
 270 00a0 02B0     		add	sp, sp, #8
 271              		@ sp needed
 272 00a2 80BD     		pop	{r7, pc}
 273              	.L16:
 274              		.align	2
 275              	.L15:
 276 00a4 FFF7FFFF 		.word	-2049
 277              		.cfi_endproc
 278              	.LFE41:
 280              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 281              		.align	1
 282              		.global	HAL_MultiProcessor_Init
 283              		.syntax unified
 284              		.code	16
 285              		.thumb_func
 287              	HAL_MultiProcessor_Init:
 288              	.LFB42:
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if   defined(USART_CR2_LINEN)
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart             UART handle.
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
ARM GAS  /tmp/ccTcPcT8.s 			page 14


 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        This parameter can be one of the following values:
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart == NULL)
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the LIN UART instance */
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the Break detection length parameter */
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware */
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->MspInitCallback(huart);
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
ARM GAS  /tmp/ccTcPcT8.s 			page 15


 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN(if Smartcard is supported) and IREN(if IrDA is supported) bits in the USART_CR3 register.*
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN*/
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_SCEN */
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR2_LINEN */
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart        UART handle.
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        This parameter can be one of the following values:
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccTcPcT8.s 			page 16


 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 289              		.loc 1 575 1
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 84B0     		sub	sp, sp, #16
 299              	.LCFI7:
 300              		.cfi_def_cfa_offset 24
 301 0004 00AF     		add	r7, sp, #0
 302              	.LCFI8:
 303              		.cfi_def_cfa_register 7
 304 0006 F860     		str	r0, [r7, #12]
 305 0008 7A60     		str	r2, [r7, #4]
 306 000a 0B23     		movs	r3, #11
 307 000c FB18     		adds	r3, r7, r3
 308 000e 0A1C     		adds	r2, r1, #0
 309 0010 1A70     		strb	r2, [r3]
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart == NULL)
 310              		.loc 1 577 6
 311 0012 FB68     		ldr	r3, [r7, #12]
 312 0014 002B     		cmp	r3, #0
 313 0016 01D1     		bne	.L18
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 314              		.loc 1 579 12
 315 0018 0123     		movs	r3, #1
 316 001a 61E0     		b	.L19
 317              	.L18:
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the wake up method parameter */
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 318              		.loc 1 585 12
 319 001c FB68     		ldr	r3, [r7, #12]
 320 001e 5B6F     		ldr	r3, [r3, #116]
 321              		.loc 1 585 6
 322 0020 002B     		cmp	r3, #0
 323 0022 07D1     		bne	.L20
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 324              		.loc 1 588 17
 325 0024 FB68     		ldr	r3, [r7, #12]
 326 0026 7022     		movs	r2, #112
 327 0028 0021     		movs	r1, #0
 328 002a 9954     		strb	r1, [r3, r2]
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 17


 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware */
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->MspInitCallback(huart);
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 329              		.loc 1 602 5
 330 002c FB68     		ldr	r3, [r7, #12]
 331 002e 1800     		movs	r0, r3
 332 0030 FFF7FEFF 		bl	HAL_UART_MspInit
 333              	.L20:
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 334              		.loc 1 606 17
 335 0034 FB68     		ldr	r3, [r7, #12]
 336 0036 2422     		movs	r2, #36
 337 0038 5A67     		str	r2, [r3, #116]
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 338              		.loc 1 608 3
 339 003a FB68     		ldr	r3, [r7, #12]
 340 003c 1B68     		ldr	r3, [r3]
 341 003e 1A68     		ldr	r2, [r3]
 342 0040 FB68     		ldr	r3, [r7, #12]
 343 0042 1B68     		ldr	r3, [r3]
 344 0044 0121     		movs	r1, #1
 345 0046 8A43     		bics	r2, r1
 346 0048 1A60     		str	r2, [r3]
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 347              		.loc 1 611 7
 348 004a FB68     		ldr	r3, [r7, #12]
 349 004c 1800     		movs	r0, r3
 350 004e FFF7FEFF 		bl	UART_SetConfig
 351 0052 0300     		movs	r3, r0
 352              		.loc 1 611 6 discriminator 1
 353 0054 012B     		cmp	r3, #1
 354 0056 01D1     		bne	.L21
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 355              		.loc 1 613 12
 356 0058 0123     		movs	r3, #1
 357 005a 41E0     		b	.L19
 358              	.L21:
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
ARM GAS  /tmp/ccTcPcT8.s 			page 18


 359              		.loc 1 616 26
 360 005c FB68     		ldr	r3, [r7, #12]
 361 005e 5B6A     		ldr	r3, [r3, #36]
 362              		.loc 1 616 6
 363 0060 002B     		cmp	r3, #0
 364 0062 03D0     		beq	.L22
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 365              		.loc 1 618 5
 366 0064 FB68     		ldr	r3, [r7, #12]
 367 0066 1800     		movs	r0, r3
 368 0068 FFF7FEFF 		bl	UART_AdvFeatureConfig
 369              	.L22:
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 r
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 370              		.loc 1 627 3
 371 006c FB68     		ldr	r3, [r7, #12]
 372 006e 1B68     		ldr	r3, [r3]
 373 0070 5A68     		ldr	r2, [r3, #4]
 374 0072 FB68     		ldr	r3, [r7, #12]
 375 0074 1B68     		ldr	r3, [r3]
 376 0076 1C49     		ldr	r1, .L24
 377 0078 0A40     		ands	r2, r1
 378 007a 5A60     		str	r2, [r3, #4]
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR2_LINEN */
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 379              		.loc 1 639 3
 380 007c FB68     		ldr	r3, [r7, #12]
 381 007e 1B68     		ldr	r3, [r3]
 382 0080 9A68     		ldr	r2, [r3, #8]
 383 0082 FB68     		ldr	r3, [r7, #12]
 384 0084 1B68     		ldr	r3, [r3]
 385 0086 0821     		movs	r1, #8
 386 0088 8A43     		bics	r2, r1
 387 008a 9A60     		str	r2, [r3, #8]
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_IREN */
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR3_SCEN */
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 388              		.loc 1 643 6
ARM GAS  /tmp/ccTcPcT8.s 			page 19


 389 008c 7A68     		ldr	r2, [r7, #4]
 390 008e 8023     		movs	r3, #128
 391 0090 1B01     		lsls	r3, r3, #4
 392 0092 9A42     		cmp	r2, r3
 393 0094 0CD1     		bne	.L23
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 394              		.loc 1 646 5
 395 0096 FB68     		ldr	r3, [r7, #12]
 396 0098 1B68     		ldr	r3, [r3]
 397 009a 5B68     		ldr	r3, [r3, #4]
 398 009c 1B02     		lsls	r3, r3, #8
 399 009e 190A     		lsrs	r1, r3, #8
 400 00a0 0B23     		movs	r3, #11
 401 00a2 FB18     		adds	r3, r7, r3
 402 00a4 1B78     		ldrb	r3, [r3]
 403 00a6 1A06     		lsls	r2, r3, #24
 404 00a8 FB68     		ldr	r3, [r7, #12]
 405 00aa 1B68     		ldr	r3, [r3]
 406 00ac 0A43     		orrs	r2, r1
 407 00ae 5A60     		str	r2, [r3, #4]
 408              	.L23:
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 409              		.loc 1 650 3
 410 00b0 FB68     		ldr	r3, [r7, #12]
 411 00b2 1B68     		ldr	r3, [r3]
 412 00b4 1B68     		ldr	r3, [r3]
 413 00b6 0C4A     		ldr	r2, .L24
 414 00b8 1340     		ands	r3, r2
 415 00ba 1900     		movs	r1, r3
 416 00bc FB68     		ldr	r3, [r7, #12]
 417 00be 1B68     		ldr	r3, [r3]
 418 00c0 7A68     		ldr	r2, [r7, #4]
 419 00c2 0A43     		orrs	r2, r1
 420 00c4 1A60     		str	r2, [r3]
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 421              		.loc 1 652 3
 422 00c6 FB68     		ldr	r3, [r7, #12]
 423 00c8 1B68     		ldr	r3, [r3]
 424 00ca 1A68     		ldr	r2, [r3]
 425 00cc FB68     		ldr	r3, [r7, #12]
 426 00ce 1B68     		ldr	r3, [r3]
 427 00d0 0121     		movs	r1, #1
 428 00d2 0A43     		orrs	r2, r1
 429 00d4 1A60     		str	r2, [r3]
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 430              		.loc 1 655 11
 431 00d6 FB68     		ldr	r3, [r7, #12]
 432 00d8 1800     		movs	r0, r3
 433 00da FFF7FEFF 		bl	UART_CheckIdleState
ARM GAS  /tmp/ccTcPcT8.s 			page 20


 434 00de 0300     		movs	r3, r0
 435              	.L19:
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 436              		.loc 1 656 1
 437 00e0 1800     		movs	r0, r3
 438 00e2 BD46     		mov	sp, r7
 439 00e4 04B0     		add	sp, sp, #16
 440              		@ sp needed
 441 00e6 80BD     		pop	{r7, pc}
 442              	.L25:
 443              		.align	2
 444              	.L24:
 445 00e8 FFF7FFFF 		.word	-2049
 446              		.cfi_endproc
 447              	.LFE42:
 449              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 450              		.align	1
 451              		.global	HAL_UART_DeInit
 452              		.syntax unified
 453              		.code	16
 454              		.thumb_func
 456              	HAL_UART_DeInit:
 457              	.LFB43:
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 458              		.loc 1 665 1
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 1, uses_anonymous_args = 0
 462 0000 80B5     		push	{r7, lr}
 463              	.LCFI9:
 464              		.cfi_def_cfa_offset 8
 465              		.cfi_offset 7, -8
 466              		.cfi_offset 14, -4
 467 0002 82B0     		sub	sp, sp, #8
 468              	.LCFI10:
 469              		.cfi_def_cfa_offset 16
 470 0004 00AF     		add	r7, sp, #0
 471              	.LCFI11:
 472              		.cfi_def_cfa_register 7
 473 0006 7860     		str	r0, [r7, #4]
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart == NULL)
 474              		.loc 1 667 6
 475 0008 7B68     		ldr	r3, [r7, #4]
 476 000a 002B     		cmp	r3, #0
 477 000c 01D1     		bne	.L27
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 478              		.loc 1 669 12
ARM GAS  /tmp/ccTcPcT8.s 			page 21


 479 000e 0123     		movs	r3, #1
 480 0010 28E0     		b	.L28
 481              	.L27:
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 482              		.loc 1 675 17
 483 0012 7B68     		ldr	r3, [r7, #4]
 484 0014 2422     		movs	r2, #36
 485 0016 5A67     		str	r2, [r3, #116]
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 486              		.loc 1 677 3
 487 0018 7B68     		ldr	r3, [r7, #4]
 488 001a 1B68     		ldr	r3, [r3]
 489 001c 1A68     		ldr	r2, [r3]
 490 001e 7B68     		ldr	r3, [r7, #4]
 491 0020 1B68     		ldr	r3, [r3]
 492 0022 0121     		movs	r1, #1
 493 0024 8A43     		bics	r2, r1
 494 0026 1A60     		str	r2, [r3]
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 495              		.loc 1 679 8
 496 0028 7B68     		ldr	r3, [r7, #4]
 497 002a 1B68     		ldr	r3, [r3]
 498              		.loc 1 679 24
 499 002c 0022     		movs	r2, #0
 500 002e 1A60     		str	r2, [r3]
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 501              		.loc 1 680 8
 502 0030 7B68     		ldr	r3, [r7, #4]
 503 0032 1B68     		ldr	r3, [r3]
 504              		.loc 1 680 24
 505 0034 0022     		movs	r2, #0
 506 0036 5A60     		str	r2, [r3, #4]
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 507              		.loc 1 681 8
 508 0038 7B68     		ldr	r3, [r7, #4]
 509 003a 1B68     		ldr	r3, [r3]
 510              		.loc 1 681 24
 511 003c 0022     		movs	r2, #0
 512 003e 9A60     		str	r2, [r3, #8]
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DeInit the low level hardware */
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DeInit the low level hardware */
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
ARM GAS  /tmp/ccTcPcT8.s 			page 22


 513              		.loc 1 692 3
 514 0040 7B68     		ldr	r3, [r7, #4]
 515 0042 1800     		movs	r0, r3
 516 0044 FFF7FEFF 		bl	HAL_UART_MspDeInit
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 517              		.loc 1 695 20
 518 0048 7B68     		ldr	r3, [r7, #4]
 519 004a 0022     		movs	r2, #0
 520 004c DA67     		str	r2, [r3, #124]
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 521              		.loc 1 696 17
 522 004e 7B68     		ldr	r3, [r7, #4]
 523 0050 0022     		movs	r2, #0
 524 0052 5A67     		str	r2, [r3, #116]
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 525              		.loc 1 697 18
 526 0054 7B68     		ldr	r3, [r7, #4]
 527 0056 0022     		movs	r2, #0
 528 0058 9A67     		str	r2, [r3, #120]
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 529              		.loc 1 699 3
 530 005a 7B68     		ldr	r3, [r7, #4]
 531 005c 7022     		movs	r2, #112
 532 005e 0021     		movs	r1, #0
 533 0060 9954     		strb	r1, [r3, r2]
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 534              		.loc 1 701 10
 535 0062 0023     		movs	r3, #0
 536              	.L28:
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 537              		.loc 1 702 1
 538 0064 1800     		movs	r0, r3
 539 0066 BD46     		mov	sp, r7
 540 0068 02B0     		add	sp, sp, #8
 541              		@ sp needed
 542 006a 80BD     		pop	{r7, pc}
 543              		.cfi_endproc
 544              	.LFE43:
 546              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 547              		.align	1
 548              		.weak	HAL_UART_MspInit
 549              		.syntax unified
 550              		.code	16
 551              		.thumb_func
 553              	HAL_UART_MspInit:
 554              	.LFB44:
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccTcPcT8.s 			page 23


 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 555              		.loc 1 710 1
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 8
 558              		@ frame_needed = 1, uses_anonymous_args = 0
 559 0000 80B5     		push	{r7, lr}
 560              	.LCFI12:
 561              		.cfi_def_cfa_offset 8
 562              		.cfi_offset 7, -8
 563              		.cfi_offset 14, -4
 564 0002 82B0     		sub	sp, sp, #8
 565              	.LCFI13:
 566              		.cfi_def_cfa_offset 16
 567 0004 00AF     		add	r7, sp, #0
 568              	.LCFI14:
 569              		.cfi_def_cfa_register 7
 570 0006 7860     		str	r0, [r7, #4]
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 571              		.loc 1 717 1
 572 0008 C046     		nop
 573 000a BD46     		mov	sp, r7
 574 000c 02B0     		add	sp, sp, #8
 575              		@ sp needed
 576 000e 80BD     		pop	{r7, pc}
 577              		.cfi_endproc
 578              	.LFE44:
 580              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 581              		.align	1
 582              		.weak	HAL_UART_MspDeInit
 583              		.syntax unified
 584              		.code	16
 585              		.thumb_func
 587              	HAL_UART_MspDeInit:
 588              	.LFB45:
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 589              		.loc 1 725 1
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 8
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              	.LCFI15:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
ARM GAS  /tmp/ccTcPcT8.s 			page 24


 598 0002 82B0     		sub	sp, sp, #8
 599              	.LCFI16:
 600              		.cfi_def_cfa_offset 16
 601 0004 00AF     		add	r7, sp, #0
 602              	.LCFI17:
 603              		.cfi_def_cfa_register 7
 604 0006 7860     		str	r0, [r7, #4]
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 605              		.loc 1 732 1
 606 0008 C046     		nop
 607 000a BD46     		mov	sp, r7
 608 000c 02B0     		add	sp, sp, #8
 609              		@ sp needed
 610 000e 80BD     		pop	{r7, pc}
 611              		.cfi_endproc
 612              	.LFE45:
 614              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 615              		.align	1
 616              		.global	HAL_UART_Transmit
 617              		.syntax unified
 618              		.code	16
 619              		.thumb_func
 621              	HAL_UART_Transmit:
 622              	.LFB46:
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Register a User UART Callback
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart uart handle
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This parameter can be one of the following values:
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
ARM GAS  /tmp/ccTcPcT8.s 			page 25


 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (pCallback == NULL)
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (CallbackID)
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
ARM GAS  /tmp/ccTcPcT8.s 			page 26


 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default :
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         status =  HAL_ERROR;
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (CallbackID)
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default :
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         status =  HAL_ERROR;
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     status =  HAL_ERROR;
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return status;
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart uart handle
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This parameter can be one of the following values:
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
ARM GAS  /tmp/ccTcPcT8.s 			page 27


 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (CallbackID)
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined(USART_CR1_UESM)
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak Wakeu
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR1_UESM */
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 28


 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default :
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         status =  HAL_ERROR;
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (CallbackID)
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default :
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         status =  HAL_ERROR;
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     status =  HAL_ERROR;
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return status;
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### IO operation functions #####
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and Half duplex data transfers.
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 29


 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) There are two mode of transfer:
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            after finishing transfer.
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The end of the data processing will be indicated through the
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            using DMA mode.
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Blocking mode API's are :
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive()
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Abort()
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         Errors are handled as follows :
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
ARM GAS  /tmp/ccTcPcT8.s 			page 30


1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 provided through pData.
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart   UART handle.
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be sent.
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout Timeout duration.
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 623              		.loc 1 1071 1
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 32
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627 0000 80B5     		push	{r7, lr}
 628              	.LCFI18:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 8AB0     		sub	sp, sp, #40
 633              	.LCFI19:
 634              		.cfi_def_cfa_offset 48
 635 0004 02AF     		add	r7, sp, #8
 636              	.LCFI20:
 637              		.cfi_def_cfa 7, 40
 638 0006 F860     		str	r0, [r7, #12]
 639 0008 B960     		str	r1, [r7, #8]
 640 000a 3B60     		str	r3, [r7]
 641 000c BB1D     		adds	r3, r7, #6
 642 000e 1A80     		strh	r2, [r3]
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint8_t  *pdata8bits;
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t *pdata16bits;
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart;
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 643              		.loc 1 1077 12
 644 0010 FB68     		ldr	r3, [r7, #12]
 645 0012 5B6F     		ldr	r3, [r3, #116]
 646              		.loc 1 1077 6
ARM GAS  /tmp/ccTcPcT8.s 			page 31


 647 0014 202B     		cmp	r3, #32
 648 0016 00D0     		beq	.LCB535
 649 0018 94E0     		b	.L32	@long jump
 650              	.LCB535:
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 651              		.loc 1 1079 8
 652 001a BB68     		ldr	r3, [r7, #8]
 653 001c 002B     		cmp	r3, #0
 654 001e 03D0     		beq	.L33
 655              		.loc 1 1079 25 discriminator 1
 656 0020 BB1D     		adds	r3, r7, #6
 657 0022 1B88     		ldrh	r3, [r3]
 658 0024 002B     		cmp	r3, #0
 659 0026 01D1     		bne	.L34
 660              	.L33:
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 661              		.loc 1 1081 15
 662 0028 0123     		movs	r3, #1
 663 002a 8CE0     		b	.L35
 664              	.L34:
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 665              		.loc 1 1087 21
 666 002c FB68     		ldr	r3, [r7, #12]
 667 002e 9A68     		ldr	r2, [r3, #8]
 668              		.loc 1 1087 8
 669 0030 8023     		movs	r3, #128
 670 0032 5B01     		lsls	r3, r3, #5
 671 0034 9A42     		cmp	r2, r3
 672 0036 09D1     		bne	.L36
 673              		.loc 1 1087 71 discriminator 1
 674 0038 FB68     		ldr	r3, [r7, #12]
 675 003a 1B69     		ldr	r3, [r3, #16]
 676              		.loc 1 1087 56 discriminator 1
 677 003c 002B     		cmp	r3, #0
 678 003e 05D1     		bne	.L36
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 679              		.loc 1 1089 13
 680 0040 BB68     		ldr	r3, [r7, #8]
 681              		.loc 1 1089 30
 682 0042 0122     		movs	r2, #1
 683 0044 1340     		ands	r3, r2
 684              		.loc 1 1089 10
 685 0046 01D0     		beq	.L36
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 686              		.loc 1 1091 17
 687 0048 0123     		movs	r3, #1
 688 004a 7CE0     		b	.L35
 689              	.L36:
ARM GAS  /tmp/ccTcPcT8.s 			page 32


1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 690              		.loc 1 1095 5
 691 004c FB68     		ldr	r3, [r7, #12]
 692 004e 7022     		movs	r2, #112
 693 0050 9B5C     		ldrb	r3, [r3, r2]
 694 0052 012B     		cmp	r3, #1
 695 0054 01D1     		bne	.L37
 696              		.loc 1 1095 5 is_stmt 0 discriminator 1
 697 0056 0223     		movs	r3, #2
 698              		.loc 1 1095 5
 699 0058 75E0     		b	.L35
 700              	.L37:
 701              		.loc 1 1095 5 discriminator 2
 702 005a FB68     		ldr	r3, [r7, #12]
 703 005c 7022     		movs	r2, #112
 704 005e 0121     		movs	r1, #1
 705 0060 9954     		strb	r1, [r3, r2]
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 706              		.loc 1 1097 22 is_stmt 1
 707 0062 FB68     		ldr	r3, [r7, #12]
 708 0064 0022     		movs	r2, #0
 709 0066 DA67     		str	r2, [r3, #124]
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 710              		.loc 1 1098 19
 711 0068 FB68     		ldr	r3, [r7, #12]
 712 006a 2122     		movs	r2, #33
 713 006c 5A67     		str	r2, [r3, #116]
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tickstart = HAL_GetTick();
 714              		.loc 1 1101 17
 715 006e FFF7FEFF 		bl	HAL_GetTick
 716 0072 0300     		movs	r3, r0
 717 0074 7B61     		str	r3, [r7, #20]
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize  = Size;
 718              		.loc 1 1103 24
 719 0076 FB68     		ldr	r3, [r7, #12]
 720 0078 BA1D     		adds	r2, r7, #6
 721 007a 5021     		movs	r1, #80
 722 007c 1288     		ldrh	r2, [r2]
 723 007e 5A52     		strh	r2, [r3, r1]
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 724              		.loc 1 1104 24
 725 0080 FB68     		ldr	r3, [r7, #12]
 726 0082 BA1D     		adds	r2, r7, #6
 727 0084 5221     		movs	r1, #82
 728 0086 1288     		ldrh	r2, [r2]
 729 0088 5A52     		strh	r2, [r3, r1]
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 730              		.loc 1 1107 21
ARM GAS  /tmp/ccTcPcT8.s 			page 33


 731 008a FB68     		ldr	r3, [r7, #12]
 732 008c 9A68     		ldr	r2, [r3, #8]
 733              		.loc 1 1107 8
 734 008e 8023     		movs	r3, #128
 735 0090 5B01     		lsls	r3, r3, #5
 736 0092 9A42     		cmp	r2, r3
 737 0094 08D1     		bne	.L38
 738              		.loc 1 1107 71 discriminator 1
 739 0096 FB68     		ldr	r3, [r7, #12]
 740 0098 1B69     		ldr	r3, [r3, #16]
 741              		.loc 1 1107 56 discriminator 1
 742 009a 002B     		cmp	r3, #0
 743 009c 04D1     		bne	.L38
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata8bits  = NULL;
 744              		.loc 1 1109 19
 745 009e 0023     		movs	r3, #0
 746 00a0 FB61     		str	r3, [r7, #28]
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 747              		.loc 1 1110 19
 748 00a2 BB68     		ldr	r3, [r7, #8]
 749 00a4 BB61     		str	r3, [r7, #24]
 750 00a6 03E0     		b	.L39
 751              	.L38:
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata8bits  = pData;
 752              		.loc 1 1114 19
 753 00a8 BB68     		ldr	r3, [r7, #8]
 754 00aa FB61     		str	r3, [r7, #28]
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata16bits = NULL;
 755              		.loc 1 1115 19
 756 00ac 0023     		movs	r3, #0
 757 00ae BB61     		str	r3, [r7, #24]
 758              	.L39:
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 759              		.loc 1 1118 11
 760 00b0 2CE0     		b	.L40
 761              	.L44:
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 762              		.loc 1 1120 11
 763 00b2 7A69     		ldr	r2, [r7, #20]
 764 00b4 F868     		ldr	r0, [r7, #12]
 765 00b6 3B68     		ldr	r3, [r7]
 766 00b8 0093     		str	r3, [sp]
 767 00ba 1300     		movs	r3, r2
 768 00bc 0022     		movs	r2, #0
 769 00be 8021     		movs	r1, #128
 770 00c0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 771 00c4 031E     		subs	r3, r0, #0
 772              		.loc 1 1120 10 discriminator 1
 773 00c6 01D0     		beq	.L41
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
ARM GAS  /tmp/ccTcPcT8.s 			page 34


1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 774              		.loc 1 1122 16
 775 00c8 0323     		movs	r3, #3
 776 00ca 3CE0     		b	.L35
 777              	.L41:
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (pdata8bits == NULL)
 778              		.loc 1 1124 10
 779 00cc FB69     		ldr	r3, [r7, #28]
 780 00ce 002B     		cmp	r3, #0
 781 00d0 0BD1     		bne	.L42
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 782              		.loc 1 1126 43
 783 00d2 BB69     		ldr	r3, [r7, #24]
 784 00d4 1A88     		ldrh	r2, [r3]
 785              		.loc 1 1126 14
 786 00d6 FB68     		ldr	r3, [r7, #12]
 787 00d8 1B68     		ldr	r3, [r3]
 788              		.loc 1 1126 32
 789 00da D205     		lsls	r2, r2, #23
 790 00dc D20D     		lsrs	r2, r2, #23
 791 00de 92B2     		uxth	r2, r2
 792              		.loc 1 1126 30
 793 00e0 1A85     		strh	r2, [r3, #40]
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pdata16bits++;
 794              		.loc 1 1127 20
 795 00e2 BB69     		ldr	r3, [r7, #24]
 796 00e4 0233     		adds	r3, r3, #2
 797 00e6 BB61     		str	r3, [r7, #24]
 798 00e8 07E0     		b	.L43
 799              	.L42:
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800              		.loc 1 1131 42
 801 00ea FB69     		ldr	r3, [r7, #28]
 802 00ec 1A78     		ldrb	r2, [r3]
 803              		.loc 1 1131 14
 804 00ee FB68     		ldr	r3, [r7, #12]
 805 00f0 1B68     		ldr	r3, [r3]
 806              		.loc 1 1131 30
 807 00f2 1A85     		strh	r2, [r3, #40]
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pdata8bits++;
 808              		.loc 1 1132 19
 809 00f4 FB69     		ldr	r3, [r7, #28]
 810 00f6 0133     		adds	r3, r3, #1
 811 00f8 FB61     		str	r3, [r7, #28]
 812              	.L43:
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 813              		.loc 1 1134 12
 814 00fa FB68     		ldr	r3, [r7, #12]
 815 00fc 5222     		movs	r2, #82
 816 00fe 9B5A     		ldrh	r3, [r3, r2]
 817 0100 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 35


 818              		.loc 1 1134 25
 819 0102 013B     		subs	r3, r3, #1
 820 0104 99B2     		uxth	r1, r3
 821 0106 FB68     		ldr	r3, [r7, #12]
 822 0108 5222     		movs	r2, #82
 823 010a 9952     		strh	r1, [r3, r2]
 824              	.L40:
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 825              		.loc 1 1118 17
 826 010c FB68     		ldr	r3, [r7, #12]
 827 010e 5222     		movs	r2, #82
 828 0110 9B5A     		ldrh	r3, [r3, r2]
 829 0112 9BB2     		uxth	r3, r3
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 830              		.loc 1 1118 31
 831 0114 002B     		cmp	r3, #0
 832 0116 CCD1     		bne	.L44
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 833              		.loc 1 1137 9
 834 0118 7A69     		ldr	r2, [r7, #20]
 835 011a F868     		ldr	r0, [r7, #12]
 836 011c 3B68     		ldr	r3, [r7]
 837 011e 0093     		str	r3, [sp]
 838 0120 1300     		movs	r3, r2
 839 0122 0022     		movs	r2, #0
 840 0124 4021     		movs	r1, #64
 841 0126 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 842 012a 031E     		subs	r3, r0, #0
 843              		.loc 1 1137 8 discriminator 1
 844 012c 01D0     		beq	.L45
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_TIMEOUT;
 845              		.loc 1 1139 14
 846 012e 0323     		movs	r3, #3
 847 0130 09E0     		b	.L35
 848              	.L45:
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 849              		.loc 1 1143 19
 850 0132 FB68     		ldr	r3, [r7, #12]
 851 0134 2022     		movs	r2, #32
 852 0136 5A67     		str	r2, [r3, #116]
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 853              		.loc 1 1145 5
 854 0138 FB68     		ldr	r3, [r7, #12]
 855 013a 7022     		movs	r2, #112
 856 013c 0021     		movs	r1, #0
 857 013e 9954     		strb	r1, [r3, r2]
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 858              		.loc 1 1147 12
 859 0140 0023     		movs	r3, #0
ARM GAS  /tmp/ccTcPcT8.s 			page 36


 860 0142 00E0     		b	.L35
 861              	.L32:
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 862              		.loc 1 1151 12
 863 0144 0223     		movs	r3, #2
 864              	.L35:
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 865              		.loc 1 1153 1
 866 0146 1800     		movs	r0, r3
 867 0148 BD46     		mov	sp, r7
 868 014a 08B0     		add	sp, sp, #32
 869              		@ sp needed
 870 014c 80BD     		pop	{r7, pc}
 871              		.cfi_endproc
 872              	.LFE46:
 874              		.section	.text.HAL_UART_Receive,"ax",%progbits
 875              		.align	1
 876              		.global	HAL_UART_Receive
 877              		.syntax unified
 878              		.code	16
 879              		.thumb_func
 881              	HAL_UART_Receive:
 882              	.LFB47:
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 available through pData.
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart   UART handle.
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be received.
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout Timeout duration.
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 883              		.loc 1 1171 1
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 32
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887 0000 80B5     		push	{r7, lr}
 888              	.LCFI21:
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 8AB0     		sub	sp, sp, #40
 893              	.LCFI22:
 894              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccTcPcT8.s 			page 37


 895 0004 02AF     		add	r7, sp, #8
 896              	.LCFI23:
 897              		.cfi_def_cfa 7, 40
 898 0006 F860     		str	r0, [r7, #12]
 899 0008 B960     		str	r1, [r7, #8]
 900 000a 3B60     		str	r3, [r7]
 901 000c BB1D     		adds	r3, r7, #6
 902 000e 1A80     		strh	r2, [r3]
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint8_t  *pdata8bits;
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t *pdata16bits;
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask;
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart;
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 903              		.loc 1 1178 12
 904 0010 FB68     		ldr	r3, [r7, #12]
 905 0012 9B6F     		ldr	r3, [r3, #120]
 906              		.loc 1 1178 6
 907 0014 202B     		cmp	r3, #32
 908 0016 00D0     		beq	.LCB756
 909 0018 C2E0     		b	.L47	@long jump
 910              	.LCB756:
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 911              		.loc 1 1180 8
 912 001a BB68     		ldr	r3, [r7, #8]
 913 001c 002B     		cmp	r3, #0
 914 001e 03D0     		beq	.L48
 915              		.loc 1 1180 25 discriminator 1
 916 0020 BB1D     		adds	r3, r7, #6
 917 0022 1B88     		ldrh	r3, [r3]
 918 0024 002B     		cmp	r3, #0
 919 0026 01D1     		bne	.L49
 920              	.L48:
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 921              		.loc 1 1182 15
 922 0028 0123     		movs	r3, #1
 923 002a BAE0     		b	.L50
 924              	.L49:
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 925              		.loc 1 1188 21
 926 002c FB68     		ldr	r3, [r7, #12]
 927 002e 9A68     		ldr	r2, [r3, #8]
 928              		.loc 1 1188 8
 929 0030 8023     		movs	r3, #128
 930 0032 5B01     		lsls	r3, r3, #5
 931 0034 9A42     		cmp	r2, r3
 932 0036 09D1     		bne	.L51
 933              		.loc 1 1188 71 discriminator 1
 934 0038 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 38


 935 003a 1B69     		ldr	r3, [r3, #16]
 936              		.loc 1 1188 56 discriminator 1
 937 003c 002B     		cmp	r3, #0
 938 003e 05D1     		bne	.L51
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 939              		.loc 1 1190 13
 940 0040 BB68     		ldr	r3, [r7, #8]
 941              		.loc 1 1190 30
 942 0042 0122     		movs	r2, #1
 943 0044 1340     		ands	r3, r2
 944              		.loc 1 1190 10
 945 0046 01D0     		beq	.L51
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 946              		.loc 1 1192 17
 947 0048 0123     		movs	r3, #1
 948 004a AAE0     		b	.L50
 949              	.L51:
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 950              		.loc 1 1196 5
 951 004c FB68     		ldr	r3, [r7, #12]
 952 004e 7022     		movs	r2, #112
 953 0050 9B5C     		ldrb	r3, [r3, r2]
 954 0052 012B     		cmp	r3, #1
 955 0054 01D1     		bne	.L52
 956              		.loc 1 1196 5 is_stmt 0 discriminator 1
 957 0056 0223     		movs	r3, #2
 958              		.loc 1 1196 5
 959 0058 A3E0     		b	.L50
 960              	.L52:
 961              		.loc 1 1196 5 discriminator 2
 962 005a FB68     		ldr	r3, [r7, #12]
 963 005c 7022     		movs	r2, #112
 964 005e 0121     		movs	r1, #1
 965 0060 9954     		strb	r1, [r3, r2]
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 966              		.loc 1 1198 22 is_stmt 1
 967 0062 FB68     		ldr	r3, [r7, #12]
 968 0064 0022     		movs	r2, #0
 969 0066 DA67     		str	r2, [r3, #124]
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 970              		.loc 1 1199 20
 971 0068 FB68     		ldr	r3, [r7, #12]
 972 006a 2222     		movs	r2, #34
 973 006c 9A67     		str	r2, [r3, #120]
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tickstart = HAL_GetTick();
 974              		.loc 1 1202 17
 975 006e FFF7FEFF 		bl	HAL_GetTick
 976 0072 0300     		movs	r3, r0
 977 0074 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccTcPcT8.s 			page 39


1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize  = Size;
 978              		.loc 1 1204 24
 979 0076 FB68     		ldr	r3, [r7, #12]
 980 0078 BA1D     		adds	r2, r7, #6
 981 007a 5821     		movs	r1, #88
 982 007c 1288     		ldrh	r2, [r2]
 983 007e 5A52     		strh	r2, [r3, r1]
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 984              		.loc 1 1205 24
 985 0080 FB68     		ldr	r3, [r7, #12]
 986 0082 BA1D     		adds	r2, r7, #6
 987 0084 5A21     		movs	r1, #90
 988 0086 1288     		ldrh	r2, [r2]
 989 0088 5A52     		strh	r2, [r3, r1]
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 990              		.loc 1 1208 5
 991 008a FB68     		ldr	r3, [r7, #12]
 992 008c 9A68     		ldr	r2, [r3, #8]
 993 008e 8023     		movs	r3, #128
 994 0090 5B01     		lsls	r3, r3, #5
 995 0092 9A42     		cmp	r2, r3
 996 0094 0DD1     		bne	.L53
 997              		.loc 1 1208 5 is_stmt 0 discriminator 1
 998 0096 FB68     		ldr	r3, [r7, #12]
 999 0098 1B69     		ldr	r3, [r3, #16]
 1000 009a 002B     		cmp	r3, #0
 1001 009c 04D1     		bne	.L54
 1002              		.loc 1 1208 5 discriminator 3
 1003 009e FB68     		ldr	r3, [r7, #12]
 1004 00a0 5C22     		movs	r2, #92
 1005 00a2 4249     		ldr	r1, .L65
 1006 00a4 9952     		strh	r1, [r3, r2]
 1007 00a6 1AE0     		b	.L55
 1008              	.L54:
 1009              		.loc 1 1208 5 discriminator 4
 1010 00a8 FB68     		ldr	r3, [r7, #12]
 1011 00aa 5C22     		movs	r2, #92
 1012 00ac FF21     		movs	r1, #255
 1013 00ae 9952     		strh	r1, [r3, r2]
 1014 00b0 15E0     		b	.L55
 1015              	.L53:
 1016              		.loc 1 1208 5 discriminator 2
 1017 00b2 FB68     		ldr	r3, [r7, #12]
 1018 00b4 9B68     		ldr	r3, [r3, #8]
 1019 00b6 002B     		cmp	r3, #0
 1020 00b8 0DD1     		bne	.L56
 1021              		.loc 1 1208 5 discriminator 5
 1022 00ba FB68     		ldr	r3, [r7, #12]
 1023 00bc 1B69     		ldr	r3, [r3, #16]
 1024 00be 002B     		cmp	r3, #0
 1025 00c0 04D1     		bne	.L57
 1026              		.loc 1 1208 5 discriminator 7
 1027 00c2 FB68     		ldr	r3, [r7, #12]
 1028 00c4 5C22     		movs	r2, #92
ARM GAS  /tmp/ccTcPcT8.s 			page 40


 1029 00c6 FF21     		movs	r1, #255
 1030 00c8 9952     		strh	r1, [r3, r2]
 1031 00ca 08E0     		b	.L55
 1032              	.L57:
 1033              		.loc 1 1208 5 discriminator 8
 1034 00cc FB68     		ldr	r3, [r7, #12]
 1035 00ce 5C22     		movs	r2, #92
 1036 00d0 7F21     		movs	r1, #127
 1037 00d2 9952     		strh	r1, [r3, r2]
 1038 00d4 03E0     		b	.L55
 1039              	.L56:
 1040              		.loc 1 1208 5 discriminator 6
 1041 00d6 FB68     		ldr	r3, [r7, #12]
 1042 00d8 5C22     		movs	r2, #92
 1043 00da 0021     		movs	r1, #0
 1044 00dc 9952     		strh	r1, [r3, r2]
 1045              	.L55:
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 1046              		.loc 1 1209 12 is_stmt 1
 1047 00de 1223     		movs	r3, #18
 1048 00e0 FB18     		adds	r3, r7, r3
 1049 00e2 FA68     		ldr	r2, [r7, #12]
 1050 00e4 5C21     		movs	r1, #92
 1051 00e6 525A     		ldrh	r2, [r2, r1]
 1052 00e8 1A80     		strh	r2, [r3]
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1053              		.loc 1 1212 21
 1054 00ea FB68     		ldr	r3, [r7, #12]
 1055 00ec 9A68     		ldr	r2, [r3, #8]
 1056              		.loc 1 1212 8
 1057 00ee 8023     		movs	r3, #128
 1058 00f0 5B01     		lsls	r3, r3, #5
 1059 00f2 9A42     		cmp	r2, r3
 1060 00f4 08D1     		bne	.L58
 1061              		.loc 1 1212 71 discriminator 1
 1062 00f6 FB68     		ldr	r3, [r7, #12]
 1063 00f8 1B69     		ldr	r3, [r3, #16]
 1064              		.loc 1 1212 56 discriminator 1
 1065 00fa 002B     		cmp	r3, #0
 1066 00fc 04D1     		bne	.L58
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata8bits  = NULL;
 1067              		.loc 1 1214 19
 1068 00fe 0023     		movs	r3, #0
 1069 0100 FB61     		str	r3, [r7, #28]
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 1070              		.loc 1 1215 19
 1071 0102 BB68     		ldr	r3, [r7, #8]
 1072 0104 BB61     		str	r3, [r7, #24]
 1073 0106 03E0     		b	.L59
 1074              	.L58:
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata8bits  = pData;
ARM GAS  /tmp/ccTcPcT8.s 			page 41


 1075              		.loc 1 1219 19
 1076 0108 BB68     		ldr	r3, [r7, #8]
 1077 010a FB61     		str	r3, [r7, #28]
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       pdata16bits = NULL;
 1078              		.loc 1 1220 19
 1079 010c 0023     		movs	r3, #0
 1080 010e BB61     		str	r3, [r7, #24]
 1081              	.L59:
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* as long as data have to be received */
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
 1082              		.loc 1 1224 11
 1083 0110 37E0     		b	.L60
 1084              	.L64:
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1085              		.loc 1 1226 11
 1086 0112 7A69     		ldr	r2, [r7, #20]
 1087 0114 F868     		ldr	r0, [r7, #12]
 1088 0116 3B68     		ldr	r3, [r7]
 1089 0118 0093     		str	r3, [sp]
 1090 011a 1300     		movs	r3, r2
 1091 011c 0022     		movs	r2, #0
 1092 011e 2021     		movs	r1, #32
 1093 0120 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1094 0124 031E     		subs	r3, r0, #0
 1095              		.loc 1 1226 10 discriminator 1
 1096 0126 01D0     		beq	.L61
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 1097              		.loc 1 1228 16
 1098 0128 0323     		movs	r3, #3
 1099 012a 3AE0     		b	.L50
 1100              	.L61:
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (pdata8bits == NULL)
 1101              		.loc 1 1230 10
 1102 012c FB69     		ldr	r3, [r7, #28]
 1103 012e 002B     		cmp	r3, #0
 1104 0130 0ED1     		bne	.L62
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 1105              		.loc 1 1232 40
 1106 0132 FB68     		ldr	r3, [r7, #12]
 1107 0134 1B68     		ldr	r3, [r3]
 1108              		.loc 1 1232 50
 1109 0136 9B8C     		ldrh	r3, [r3, #36]
 1110 0138 9BB2     		uxth	r3, r3
 1111              		.loc 1 1232 24
 1112 013a 1222     		movs	r2, #18
 1113 013c BA18     		adds	r2, r7, r2
 1114 013e 1288     		ldrh	r2, [r2]
 1115 0140 1340     		ands	r3, r2
 1116 0142 9AB2     		uxth	r2, r3
 1117              		.loc 1 1232 22
 1118 0144 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccTcPcT8.s 			page 42


 1119 0146 1A80     		strh	r2, [r3]
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pdata16bits++;
 1120              		.loc 1 1233 20
 1121 0148 BB69     		ldr	r3, [r7, #24]
 1122 014a 0233     		adds	r3, r3, #2
 1123 014c BB61     		str	r3, [r7, #24]
 1124 014e 0FE0     		b	.L63
 1125              	.L62:
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1126              		.loc 1 1237 38
 1127 0150 FB68     		ldr	r3, [r7, #12]
 1128 0152 1B68     		ldr	r3, [r3]
 1129              		.loc 1 1237 48
 1130 0154 9B8C     		ldrh	r3, [r3, #36]
 1131 0156 9BB2     		uxth	r3, r3
 1132              		.loc 1 1237 23
 1133 0158 DBB2     		uxtb	r3, r3
 1134              		.loc 1 1237 56
 1135 015a 1222     		movs	r2, #18
 1136 015c BA18     		adds	r2, r7, r2
 1137 015e 1288     		ldrh	r2, [r2]
 1138 0160 D2B2     		uxtb	r2, r2
 1139              		.loc 1 1237 23
 1140 0162 1340     		ands	r3, r2
 1141 0164 DAB2     		uxtb	r2, r3
 1142              		.loc 1 1237 21
 1143 0166 FB69     		ldr	r3, [r7, #28]
 1144 0168 1A70     		strb	r2, [r3]
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pdata8bits++;
 1145              		.loc 1 1238 19
 1146 016a FB69     		ldr	r3, [r7, #28]
 1147 016c 0133     		adds	r3, r3, #1
 1148 016e FB61     		str	r3, [r7, #28]
 1149              	.L63:
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxXferCount--;
 1150              		.loc 1 1240 12
 1151 0170 FB68     		ldr	r3, [r7, #12]
 1152 0172 5A22     		movs	r2, #90
 1153 0174 9B5A     		ldrh	r3, [r3, r2]
 1154 0176 9BB2     		uxth	r3, r3
 1155              		.loc 1 1240 25
 1156 0178 013B     		subs	r3, r3, #1
 1157 017a 99B2     		uxth	r1, r3
 1158 017c FB68     		ldr	r3, [r7, #12]
 1159 017e 5A22     		movs	r2, #90
 1160 0180 9952     		strh	r1, [r3, r2]
 1161              	.L60:
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1162              		.loc 1 1224 17
 1163 0182 FB68     		ldr	r3, [r7, #12]
 1164 0184 5A22     		movs	r2, #90
 1165 0186 9B5A     		ldrh	r3, [r3, r2]
 1166 0188 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 43


1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1167              		.loc 1 1224 31
 1168 018a 002B     		cmp	r3, #0
 1169 018c C1D1     		bne	.L64
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1170              		.loc 1 1244 20
 1171 018e FB68     		ldr	r3, [r7, #12]
 1172 0190 2022     		movs	r2, #32
 1173 0192 9A67     		str	r2, [r3, #120]
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1174              		.loc 1 1246 5
 1175 0194 FB68     		ldr	r3, [r7, #12]
 1176 0196 7022     		movs	r2, #112
 1177 0198 0021     		movs	r1, #0
 1178 019a 9954     		strb	r1, [r3, r2]
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1179              		.loc 1 1248 12
 1180 019c 0023     		movs	r3, #0
 1181 019e 00E0     		b	.L50
 1182              	.L47:
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1183              		.loc 1 1252 12
 1184 01a0 0223     		movs	r3, #2
 1185              	.L50:
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1186              		.loc 1 1254 1
 1187 01a2 1800     		movs	r0, r3
 1188 01a4 BD46     		mov	sp, r7
 1189 01a6 08B0     		add	sp, sp, #32
 1190              		@ sp needed
 1191 01a8 80BD     		pop	{r7, pc}
 1192              	.L66:
 1193 01aa C046     		.align	2
 1194              	.L65:
 1195 01ac FF010000 		.word	511
 1196              		.cfi_endproc
 1197              	.LFE47:
 1199              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1200              		.align	1
 1201              		.global	HAL_UART_Transmit_IT
 1202              		.syntax unified
 1203              		.code	16
 1204              		.thumb_func
 1206              	HAL_UART_Transmit_IT:
 1207              	.LFB48:
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
ARM GAS  /tmp/ccTcPcT8.s 			page 44


1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 provided through pData.
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1208              		.loc 1 1271 1
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 16
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212 0000 80B5     		push	{r7, lr}
 1213              	.LCFI24:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 84B0     		sub	sp, sp, #16
 1218              	.LCFI25:
 1219              		.cfi_def_cfa_offset 24
 1220 0004 00AF     		add	r7, sp, #0
 1221              	.LCFI26:
 1222              		.cfi_def_cfa_register 7
 1223 0006 F860     		str	r0, [r7, #12]
 1224 0008 B960     		str	r1, [r7, #8]
 1225 000a BB1D     		adds	r3, r7, #6
 1226 000c 1A80     		strh	r2, [r3]
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1227              		.loc 1 1273 12
 1228 000e FB68     		ldr	r3, [r7, #12]
 1229 0010 5B6F     		ldr	r3, [r3, #116]
 1230              		.loc 1 1273 6
 1231 0012 202B     		cmp	r3, #32
 1232 0014 58D1     		bne	.L68
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1233              		.loc 1 1275 8
 1234 0016 BB68     		ldr	r3, [r7, #8]
 1235 0018 002B     		cmp	r3, #0
 1236 001a 03D0     		beq	.L69
 1237              		.loc 1 1275 25 discriminator 1
 1238 001c BB1D     		adds	r3, r7, #6
 1239 001e 1B88     		ldrh	r3, [r3]
 1240 0020 002B     		cmp	r3, #0
 1241 0022 01D1     		bne	.L70
 1242              	.L69:
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1243              		.loc 1 1277 14
 1244 0024 0123     		movs	r3, #1
ARM GAS  /tmp/ccTcPcT8.s 			page 45


 1245 0026 50E0     		b	.L71
 1246              	.L70:
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1247              		.loc 1 1283 21
 1248 0028 FB68     		ldr	r3, [r7, #12]
 1249 002a 9A68     		ldr	r2, [r3, #8]
 1250              		.loc 1 1283 8
 1251 002c 8023     		movs	r3, #128
 1252 002e 5B01     		lsls	r3, r3, #5
 1253 0030 9A42     		cmp	r2, r3
 1254 0032 09D1     		bne	.L72
 1255              		.loc 1 1283 71 discriminator 1
 1256 0034 FB68     		ldr	r3, [r7, #12]
 1257 0036 1B69     		ldr	r3, [r3, #16]
 1258              		.loc 1 1283 56 discriminator 1
 1259 0038 002B     		cmp	r3, #0
 1260 003a 05D1     		bne	.L72
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1261              		.loc 1 1285 13
 1262 003c BB68     		ldr	r3, [r7, #8]
 1263              		.loc 1 1285 30
 1264 003e 0122     		movs	r2, #1
 1265 0040 1340     		ands	r3, r2
 1266              		.loc 1 1285 10
 1267 0042 01D0     		beq	.L72
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1268              		.loc 1 1287 17
 1269 0044 0123     		movs	r3, #1
 1270 0046 40E0     		b	.L71
 1271              	.L72:
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1272              		.loc 1 1291 5
 1273 0048 FB68     		ldr	r3, [r7, #12]
 1274 004a 7022     		movs	r2, #112
 1275 004c 9B5C     		ldrb	r3, [r3, r2]
 1276 004e 012B     		cmp	r3, #1
 1277 0050 01D1     		bne	.L73
 1278              		.loc 1 1291 5 is_stmt 0 discriminator 1
 1279 0052 0223     		movs	r3, #2
 1280              		.loc 1 1291 5
 1281 0054 39E0     		b	.L71
 1282              	.L73:
 1283              		.loc 1 1291 5 discriminator 2
 1284 0056 FB68     		ldr	r3, [r7, #12]
 1285 0058 7022     		movs	r2, #112
 1286 005a 0121     		movs	r1, #1
 1287 005c 9954     		strb	r1, [r3, r2]
ARM GAS  /tmp/ccTcPcT8.s 			page 46


1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
 1288              		.loc 1 1293 24 is_stmt 1
 1289 005e FB68     		ldr	r3, [r7, #12]
 1290 0060 BA68     		ldr	r2, [r7, #8]
 1291 0062 DA64     		str	r2, [r3, #76]
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize  = Size;
 1292              		.loc 1 1294 24
 1293 0064 FB68     		ldr	r3, [r7, #12]
 1294 0066 BA1D     		adds	r2, r7, #6
 1295 0068 5021     		movs	r1, #80
 1296 006a 1288     		ldrh	r2, [r2]
 1297 006c 5A52     		strh	r2, [r3, r1]
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 1298              		.loc 1 1295 24
 1299 006e FB68     		ldr	r3, [r7, #12]
 1300 0070 BA1D     		adds	r2, r7, #6
 1301 0072 5221     		movs	r1, #82
 1302 0074 1288     		ldrh	r2, [r2]
 1303 0076 5A52     		strh	r2, [r3, r1]
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxISR       = NULL;
 1304              		.loc 1 1296 24
 1305 0078 FB68     		ldr	r3, [r7, #12]
 1306 007a 0022     		movs	r2, #0
 1307 007c 5A66     		str	r2, [r3, #100]
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1308              		.loc 1 1298 22
 1309 007e FB68     		ldr	r3, [r7, #12]
 1310 0080 0022     		movs	r2, #0
 1311 0082 DA67     		str	r2, [r3, #124]
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1312              		.loc 1 1299 19
 1313 0084 FB68     		ldr	r3, [r7, #12]
 1314 0086 2122     		movs	r2, #33
 1315 0088 5A67     		str	r2, [r3, #116]
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the Tx ISR function pointer according to the data word length */
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1316              		.loc 1 1302 21
 1317 008a FB68     		ldr	r3, [r7, #12]
 1318 008c 9A68     		ldr	r2, [r3, #8]
 1319              		.loc 1 1302 8
 1320 008e 8023     		movs	r3, #128
 1321 0090 5B01     		lsls	r3, r3, #5
 1322 0092 9A42     		cmp	r2, r3
 1323 0094 07D1     		bne	.L74
 1324              		.loc 1 1302 71 discriminator 1
 1325 0096 FB68     		ldr	r3, [r7, #12]
 1326 0098 1B69     		ldr	r3, [r3, #16]
 1327              		.loc 1 1302 56 discriminator 1
 1328 009a 002B     		cmp	r3, #0
 1329 009c 03D1     		bne	.L74
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxISR = UART_TxISR_16BIT;
 1330              		.loc 1 1304 20
 1331 009e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 47


 1332 00a0 0C4A     		ldr	r2, .L76
 1333 00a2 5A66     		str	r2, [r3, #100]
 1334 00a4 02E0     		b	.L75
 1335              	.L74:
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxISR = UART_TxISR_8BIT;
 1336              		.loc 1 1308 20
 1337 00a6 FB68     		ldr	r3, [r7, #12]
 1338 00a8 0B4A     		ldr	r2, .L76+4
 1339 00aa 5A66     		str	r2, [r3, #100]
 1340              	.L75:
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1341              		.loc 1 1311 5
 1342 00ac FB68     		ldr	r3, [r7, #12]
 1343 00ae 7022     		movs	r2, #112
 1344 00b0 0021     		movs	r1, #0
 1345 00b2 9954     		strb	r1, [r3, r2]
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the Transmit Data Register Empty interrupt */
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 1346              		.loc 1 1314 5
 1347 00b4 FB68     		ldr	r3, [r7, #12]
 1348 00b6 1B68     		ldr	r3, [r3]
 1349 00b8 1A68     		ldr	r2, [r3]
 1350 00ba FB68     		ldr	r3, [r7, #12]
 1351 00bc 1B68     		ldr	r3, [r3]
 1352 00be 8021     		movs	r1, #128
 1353 00c0 0A43     		orrs	r2, r1
 1354 00c2 1A60     		str	r2, [r3]
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1355              		.loc 1 1316 12
 1356 00c4 0023     		movs	r3, #0
 1357 00c6 00E0     		b	.L71
 1358              	.L68:
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1359              		.loc 1 1320 12
 1360 00c8 0223     		movs	r3, #2
 1361              	.L71:
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1362              		.loc 1 1322 1
 1363 00ca 1800     		movs	r0, r3
 1364 00cc BD46     		mov	sp, r7
 1365 00ce 04B0     		add	sp, sp, #16
 1366              		@ sp needed
 1367 00d0 80BD     		pop	{r7, pc}
 1368              	.L77:
 1369 00d2 C046     		.align	2
 1370              	.L76:
ARM GAS  /tmp/ccTcPcT8.s 			page 48


 1371 00d4 00000000 		.word	UART_TxISR_16BIT
 1372 00d8 00000000 		.word	UART_TxISR_8BIT
 1373              		.cfi_endproc
 1374              	.LFE48:
 1376              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1377              		.align	1
 1378              		.global	HAL_UART_Receive_IT
 1379              		.syntax unified
 1380              		.code	16
 1381              		.thumb_func
 1383              	HAL_UART_Receive_IT:
 1384              	.LFB49:
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 available through pData.
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1385              		.loc 1 1339 1
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 16
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389 0000 80B5     		push	{r7, lr}
 1390              	.LCFI27:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 7, -8
 1393              		.cfi_offset 14, -4
 1394 0002 84B0     		sub	sp, sp, #16
 1395              	.LCFI28:
 1396              		.cfi_def_cfa_offset 24
 1397 0004 00AF     		add	r7, sp, #0
 1398              	.LCFI29:
 1399              		.cfi_def_cfa_register 7
 1400 0006 F860     		str	r0, [r7, #12]
 1401 0008 B960     		str	r1, [r7, #8]
 1402 000a BB1D     		adds	r3, r7, #6
 1403 000c 1A80     		strh	r2, [r3]
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1404              		.loc 1 1341 12
 1405 000e FB68     		ldr	r3, [r7, #12]
 1406 0010 9B6F     		ldr	r3, [r3, #120]
 1407              		.loc 1 1341 6
 1408 0012 202B     		cmp	r3, #32
 1409 0014 00D0     		beq	.LCB1192
 1410 0016 8BE0     		b	.L79	@long jump
ARM GAS  /tmp/ccTcPcT8.s 			page 49


 1411              	.LCB1192:
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1412              		.loc 1 1343 8
 1413 0018 BB68     		ldr	r3, [r7, #8]
 1414 001a 002B     		cmp	r3, #0
 1415 001c 03D0     		beq	.L80
 1416              		.loc 1 1343 25 discriminator 1
 1417 001e BB1D     		adds	r3, r7, #6
 1418 0020 1B88     		ldrh	r3, [r3]
 1419 0022 002B     		cmp	r3, #0
 1420 0024 01D1     		bne	.L81
 1421              	.L80:
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1422              		.loc 1 1345 14
 1423 0026 0123     		movs	r3, #1
 1424 0028 83E0     		b	.L82
 1425              	.L81:
1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1426              		.loc 1 1351 21
 1427 002a FB68     		ldr	r3, [r7, #12]
 1428 002c 9A68     		ldr	r2, [r3, #8]
 1429              		.loc 1 1351 8
 1430 002e 8023     		movs	r3, #128
 1431 0030 5B01     		lsls	r3, r3, #5
 1432 0032 9A42     		cmp	r2, r3
 1433 0034 09D1     		bne	.L83
 1434              		.loc 1 1351 71 discriminator 1
 1435 0036 FB68     		ldr	r3, [r7, #12]
 1436 0038 1B69     		ldr	r3, [r3, #16]
 1437              		.loc 1 1351 56 discriminator 1
 1438 003a 002B     		cmp	r3, #0
 1439 003c 05D1     		bne	.L83
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1440              		.loc 1 1353 13
 1441 003e BB68     		ldr	r3, [r7, #8]
 1442              		.loc 1 1353 30
 1443 0040 0122     		movs	r2, #1
 1444 0042 1340     		ands	r3, r2
 1445              		.loc 1 1353 10
 1446 0044 01D0     		beq	.L83
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1447              		.loc 1 1355 17
 1448 0046 0123     		movs	r3, #1
 1449 0048 73E0     		b	.L82
 1450              	.L83:
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 50


1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1451              		.loc 1 1359 5
 1452 004a FB68     		ldr	r3, [r7, #12]
 1453 004c 7022     		movs	r2, #112
 1454 004e 9B5C     		ldrb	r3, [r3, r2]
 1455 0050 012B     		cmp	r3, #1
 1456 0052 01D1     		bne	.L84
 1457              		.loc 1 1359 5 is_stmt 0 discriminator 1
 1458 0054 0223     		movs	r3, #2
 1459              		.loc 1 1359 5
 1460 0056 6CE0     		b	.L82
 1461              	.L84:
 1462              		.loc 1 1359 5 discriminator 2
 1463 0058 FB68     		ldr	r3, [r7, #12]
 1464 005a 7022     		movs	r2, #112
 1465 005c 0121     		movs	r1, #1
 1466 005e 9954     		strb	r1, [r3, r2]
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr  = pData;
 1467              		.loc 1 1361 24 is_stmt 1
 1468 0060 FB68     		ldr	r3, [r7, #12]
 1469 0062 BA68     		ldr	r2, [r7, #8]
 1470 0064 5A65     		str	r2, [r3, #84]
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize  = Size;
 1471              		.loc 1 1362 24
 1472 0066 FB68     		ldr	r3, [r7, #12]
 1473 0068 BA1D     		adds	r2, r7, #6
 1474 006a 5821     		movs	r1, #88
 1475 006c 1288     		ldrh	r2, [r2]
 1476 006e 5A52     		strh	r2, [r3, r1]
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 1477              		.loc 1 1363 24
 1478 0070 FB68     		ldr	r3, [r7, #12]
 1479 0072 BA1D     		adds	r2, r7, #6
 1480 0074 5A21     		movs	r1, #90
 1481 0076 1288     		ldrh	r2, [r2]
 1482 0078 5A52     		strh	r2, [r3, r1]
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxISR       = NULL;
 1483              		.loc 1 1364 24
 1484 007a FB68     		ldr	r3, [r7, #12]
 1485 007c 0022     		movs	r2, #0
 1486 007e 1A66     		str	r2, [r3, #96]
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 1487              		.loc 1 1367 5
 1488 0080 FB68     		ldr	r3, [r7, #12]
 1489 0082 9A68     		ldr	r2, [r3, #8]
 1490 0084 8023     		movs	r3, #128
 1491 0086 5B01     		lsls	r3, r3, #5
 1492 0088 9A42     		cmp	r2, r3
 1493 008a 0DD1     		bne	.L85
 1494              		.loc 1 1367 5 is_stmt 0 discriminator 1
 1495 008c FB68     		ldr	r3, [r7, #12]
 1496 008e 1B69     		ldr	r3, [r3, #16]
 1497 0090 002B     		cmp	r3, #0
 1498 0092 04D1     		bne	.L86
ARM GAS  /tmp/ccTcPcT8.s 			page 51


 1499              		.loc 1 1367 5 discriminator 3
 1500 0094 FB68     		ldr	r3, [r7, #12]
 1501 0096 5C22     		movs	r2, #92
 1502 0098 2849     		ldr	r1, .L92
 1503 009a 9952     		strh	r1, [r3, r2]
 1504 009c 1AE0     		b	.L87
 1505              	.L86:
 1506              		.loc 1 1367 5 discriminator 4
 1507 009e FB68     		ldr	r3, [r7, #12]
 1508 00a0 5C22     		movs	r2, #92
 1509 00a2 FF21     		movs	r1, #255
 1510 00a4 9952     		strh	r1, [r3, r2]
 1511 00a6 15E0     		b	.L87
 1512              	.L85:
 1513              		.loc 1 1367 5 discriminator 2
 1514 00a8 FB68     		ldr	r3, [r7, #12]
 1515 00aa 9B68     		ldr	r3, [r3, #8]
 1516 00ac 002B     		cmp	r3, #0
 1517 00ae 0DD1     		bne	.L88
 1518              		.loc 1 1367 5 discriminator 5
 1519 00b0 FB68     		ldr	r3, [r7, #12]
 1520 00b2 1B69     		ldr	r3, [r3, #16]
 1521 00b4 002B     		cmp	r3, #0
 1522 00b6 04D1     		bne	.L89
 1523              		.loc 1 1367 5 discriminator 7
 1524 00b8 FB68     		ldr	r3, [r7, #12]
 1525 00ba 5C22     		movs	r2, #92
 1526 00bc FF21     		movs	r1, #255
 1527 00be 9952     		strh	r1, [r3, r2]
 1528 00c0 08E0     		b	.L87
 1529              	.L89:
 1530              		.loc 1 1367 5 discriminator 8
 1531 00c2 FB68     		ldr	r3, [r7, #12]
 1532 00c4 5C22     		movs	r2, #92
 1533 00c6 7F21     		movs	r1, #127
 1534 00c8 9952     		strh	r1, [r3, r2]
 1535 00ca 03E0     		b	.L87
 1536              	.L88:
 1537              		.loc 1 1367 5 discriminator 6
 1538 00cc FB68     		ldr	r3, [r7, #12]
 1539 00ce 5C22     		movs	r2, #92
 1540 00d0 0021     		movs	r1, #0
 1541 00d2 9952     		strh	r1, [r3, r2]
 1542              	.L87:
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1543              		.loc 1 1369 22 is_stmt 1
 1544 00d4 FB68     		ldr	r3, [r7, #12]
 1545 00d6 0022     		movs	r2, #0
 1546 00d8 DA67     		str	r2, [r3, #124]
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1547              		.loc 1 1370 20
 1548 00da FB68     		ldr	r3, [r7, #12]
 1549 00dc 2222     		movs	r2, #34
 1550 00de 9A67     		str	r2, [r3, #120]
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
ARM GAS  /tmp/ccTcPcT8.s 			page 52


1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1551              		.loc 1 1373 5
 1552 00e0 FB68     		ldr	r3, [r7, #12]
 1553 00e2 1B68     		ldr	r3, [r3]
 1554 00e4 9A68     		ldr	r2, [r3, #8]
 1555 00e6 FB68     		ldr	r3, [r7, #12]
 1556 00e8 1B68     		ldr	r3, [r3]
 1557 00ea 0121     		movs	r1, #1
 1558 00ec 0A43     		orrs	r2, r1
 1559 00ee 9A60     		str	r2, [r3, #8]
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the Rx ISR function pointer according to the data word length */
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1560              		.loc 1 1376 21
 1561 00f0 FB68     		ldr	r3, [r7, #12]
 1562 00f2 9A68     		ldr	r2, [r3, #8]
 1563              		.loc 1 1376 8
 1564 00f4 8023     		movs	r3, #128
 1565 00f6 5B01     		lsls	r3, r3, #5
 1566 00f8 9A42     		cmp	r2, r3
 1567 00fa 07D1     		bne	.L90
 1568              		.loc 1 1376 71 discriminator 1
 1569 00fc FB68     		ldr	r3, [r7, #12]
 1570 00fe 1B69     		ldr	r3, [r3, #16]
 1571              		.loc 1 1376 56 discriminator 1
 1572 0100 002B     		cmp	r3, #0
 1573 0102 03D1     		bne	.L90
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxISR = UART_RxISR_16BIT;
 1574              		.loc 1 1378 20
 1575 0104 FB68     		ldr	r3, [r7, #12]
 1576 0106 0E4A     		ldr	r2, .L92+4
 1577 0108 1A66     		str	r2, [r3, #96]
 1578 010a 02E0     		b	.L91
 1579              	.L90:
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxISR = UART_RxISR_8BIT;
 1580              		.loc 1 1382 20
 1581 010c FB68     		ldr	r3, [r7, #12]
 1582 010e 0D4A     		ldr	r2, .L92+8
 1583 0110 1A66     		str	r2, [r3, #96]
 1584              	.L91:
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1585              		.loc 1 1385 5
 1586 0112 FB68     		ldr	r3, [r7, #12]
 1587 0114 7022     		movs	r2, #112
 1588 0116 0021     		movs	r1, #0
 1589 0118 9954     		strb	r1, [r3, r2]
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 1590              		.loc 1 1388 5
 1591 011a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 53


 1592 011c 1B68     		ldr	r3, [r3]
 1593 011e 1A68     		ldr	r2, [r3]
 1594 0120 FB68     		ldr	r3, [r7, #12]
 1595 0122 1B68     		ldr	r3, [r3]
 1596 0124 9021     		movs	r1, #144
 1597 0126 4900     		lsls	r1, r1, #1
 1598 0128 0A43     		orrs	r2, r1
 1599 012a 1A60     		str	r2, [r3]
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1600              		.loc 1 1390 12
 1601 012c 0023     		movs	r3, #0
 1602 012e 00E0     		b	.L82
 1603              	.L79:
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1604              		.loc 1 1394 12
 1605 0130 0223     		movs	r3, #2
 1606              	.L82:
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1607              		.loc 1 1396 1
 1608 0132 1800     		movs	r0, r3
 1609 0134 BD46     		mov	sp, r7
 1610 0136 04B0     		add	sp, sp, #16
 1611              		@ sp needed
 1612 0138 80BD     		pop	{r7, pc}
 1613              	.L93:
 1614 013a C046     		.align	2
 1615              	.L92:
 1616 013c FF010000 		.word	511
 1617 0140 00000000 		.word	UART_RxISR_16BIT
 1618 0144 00000000 		.word	UART_RxISR_8BIT
 1619              		.cfi_endproc
 1620              	.LFE49:
 1622              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1623              		.align	1
 1624              		.global	HAL_UART_Transmit_DMA
 1625              		.syntax unified
 1626              		.code	16
 1627              		.thumb_func
 1629              	HAL_UART_Transmit_DMA:
 1630              	.LFB50:
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 provided through pData.
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation 
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
ARM GAS  /tmp/ccTcPcT8.s 			page 54


1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1631              		.loc 1 1413 1
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 16
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635 0000 80B5     		push	{r7, lr}
 1636              	.LCFI30:
 1637              		.cfi_def_cfa_offset 8
 1638              		.cfi_offset 7, -8
 1639              		.cfi_offset 14, -4
 1640 0002 84B0     		sub	sp, sp, #16
 1641              	.LCFI31:
 1642              		.cfi_def_cfa_offset 24
 1643 0004 00AF     		add	r7, sp, #0
 1644              	.LCFI32:
 1645              		.cfi_def_cfa_register 7
 1646 0006 F860     		str	r0, [r7, #12]
 1647 0008 B960     		str	r1, [r7, #8]
 1648 000a BB1D     		adds	r3, r7, #6
 1649 000c 1A80     		strh	r2, [r3]
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 1650              		.loc 1 1415 12
 1651 000e FB68     		ldr	r3, [r7, #12]
 1652 0010 5B6F     		ldr	r3, [r3, #116]
 1653              		.loc 1 1415 6
 1654 0012 202B     		cmp	r3, #32
 1655 0014 00D0     		beq	.LCB1411
 1656 0016 77E0     		b	.L95	@long jump
 1657              	.LCB1411:
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1658              		.loc 1 1417 8
 1659 0018 BB68     		ldr	r3, [r7, #8]
 1660 001a 002B     		cmp	r3, #0
 1661 001c 03D0     		beq	.L96
 1662              		.loc 1 1417 25 discriminator 1
 1663 001e BB1D     		adds	r3, r7, #6
 1664 0020 1B88     		ldrh	r3, [r3]
 1665 0022 002B     		cmp	r3, #0
 1666 0024 01D1     		bne	.L97
 1667              	.L96:
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1668              		.loc 1 1419 14
 1669 0026 0123     		movs	r3, #1
 1670 0028 6FE0     		b	.L98
 1671              	.L97:
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy into TDR will be
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
ARM GAS  /tmp/ccTcPcT8.s 			page 55


1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1672              		.loc 1 1425 21
 1673 002a FB68     		ldr	r3, [r7, #12]
 1674 002c 9A68     		ldr	r2, [r3, #8]
 1675              		.loc 1 1425 8
 1676 002e 8023     		movs	r3, #128
 1677 0030 5B01     		lsls	r3, r3, #5
 1678 0032 9A42     		cmp	r2, r3
 1679 0034 09D1     		bne	.L99
 1680              		.loc 1 1425 71 discriminator 1
 1681 0036 FB68     		ldr	r3, [r7, #12]
 1682 0038 1B69     		ldr	r3, [r3, #16]
 1683              		.loc 1 1425 56 discriminator 1
 1684 003a 002B     		cmp	r3, #0
 1685 003c 05D1     		bne	.L99
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1686              		.loc 1 1427 13
 1687 003e BB68     		ldr	r3, [r7, #8]
 1688              		.loc 1 1427 30
 1689 0040 0122     		movs	r2, #1
 1690 0042 1340     		ands	r3, r2
 1691              		.loc 1 1427 10
 1692 0044 01D0     		beq	.L99
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1693              		.loc 1 1429 17
 1694 0046 0123     		movs	r3, #1
 1695 0048 5FE0     		b	.L98
 1696              	.L99:
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1697              		.loc 1 1433 5
 1698 004a FB68     		ldr	r3, [r7, #12]
 1699 004c 7022     		movs	r2, #112
 1700 004e 9B5C     		ldrb	r3, [r3, r2]
 1701 0050 012B     		cmp	r3, #1
 1702 0052 01D1     		bne	.L100
 1703              		.loc 1 1433 5 is_stmt 0 discriminator 1
 1704 0054 0223     		movs	r3, #2
 1705              		.loc 1 1433 5
 1706 0056 58E0     		b	.L98
 1707              	.L100:
 1708              		.loc 1 1433 5 discriminator 2
 1709 0058 FB68     		ldr	r3, [r7, #12]
 1710 005a 7022     		movs	r2, #112
 1711 005c 0121     		movs	r1, #1
 1712 005e 9954     		strb	r1, [r3, r2]
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
 1713              		.loc 1 1435 24 is_stmt 1
 1714 0060 FB68     		ldr	r3, [r7, #12]
 1715 0062 BA68     		ldr	r2, [r7, #8]
 1716 0064 DA64     		str	r2, [r3, #76]
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize  = Size;
ARM GAS  /tmp/ccTcPcT8.s 			page 56


 1717              		.loc 1 1436 24
 1718 0066 FB68     		ldr	r3, [r7, #12]
 1719 0068 BA1D     		adds	r2, r7, #6
 1720 006a 5021     		movs	r1, #80
 1721 006c 1288     		ldrh	r2, [r2]
 1722 006e 5A52     		strh	r2, [r3, r1]
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 1723              		.loc 1 1437 24
 1724 0070 FB68     		ldr	r3, [r7, #12]
 1725 0072 BA1D     		adds	r2, r7, #6
 1726 0074 5221     		movs	r1, #82
 1727 0076 1288     		ldrh	r2, [r2]
 1728 0078 5A52     		strh	r2, [r3, r1]
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1729              		.loc 1 1439 22
 1730 007a FB68     		ldr	r3, [r7, #12]
 1731 007c 0022     		movs	r2, #0
 1732 007e DA67     		str	r2, [r3, #124]
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1733              		.loc 1 1440 19
 1734 0080 FB68     		ldr	r3, [r7, #12]
 1735 0082 2122     		movs	r2, #33
 1736 0084 5A67     		str	r2, [r3, #116]
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 1737              		.loc 1 1442 14
 1738 0086 FB68     		ldr	r3, [r7, #12]
 1739 0088 9B6E     		ldr	r3, [r3, #104]
 1740              		.loc 1 1442 8
 1741 008a 002B     		cmp	r3, #0
 1742 008c 2AD0     		beq	.L101
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1743              		.loc 1 1445 12
 1744 008e FB68     		ldr	r3, [r7, #12]
 1745 0090 9B6E     		ldr	r3, [r3, #104]
 1746              		.loc 1 1445 39
 1747 0092 204A     		ldr	r2, .L102
 1748 0094 9A62     		str	r2, [r3, #40]
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1749              		.loc 1 1448 12
 1750 0096 FB68     		ldr	r3, [r7, #12]
 1751 0098 9B6E     		ldr	r3, [r3, #104]
 1752              		.loc 1 1448 43
 1753 009a 1F4A     		ldr	r2, .L102+4
 1754 009c DA62     		str	r2, [r3, #44]
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the DMA error callback */
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
 1755              		.loc 1 1451 12
 1756 009e FB68     		ldr	r3, [r7, #12]
 1757 00a0 9B6E     		ldr	r3, [r3, #104]
 1758              		.loc 1 1451 40
ARM GAS  /tmp/ccTcPcT8.s 			page 57


 1759 00a2 1E4A     		ldr	r2, .L102+8
 1760 00a4 1A63     		str	r2, [r3, #48]
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the DMA abort callback */
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 1761              		.loc 1 1454 12
 1762 00a6 FB68     		ldr	r3, [r7, #12]
 1763 00a8 9B6E     		ldr	r3, [r3, #104]
 1764              		.loc 1 1454 40
 1765 00aa 0022     		movs	r2, #0
 1766 00ac 5A63     		str	r2, [r3, #52]
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
 1767              		.loc 1 1457 11
 1768 00ae FB68     		ldr	r3, [r7, #12]
 1769 00b0 986E     		ldr	r0, [r3, #104]
 1770              		.loc 1 1457 58
 1771 00b2 FB68     		ldr	r3, [r7, #12]
 1772 00b4 DB6C     		ldr	r3, [r3, #76]
 1773              		.loc 1 1457 11
 1774 00b6 1900     		movs	r1, r3
 1775              		.loc 1 1457 88
 1776 00b8 FB68     		ldr	r3, [r7, #12]
 1777 00ba 1B68     		ldr	r3, [r3]
 1778              		.loc 1 1457 82
 1779 00bc 2833     		adds	r3, r3, #40
 1780              		.loc 1 1457 11
 1781 00be 1A00     		movs	r2, r3
 1782 00c0 BB1D     		adds	r3, r7, #6
 1783 00c2 1B88     		ldrh	r3, [r3]
 1784 00c4 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1785 00c8 031E     		subs	r3, r0, #0
 1786              		.loc 1 1457 10 discriminator 1
 1787 00ca 0BD0     		beq	.L101
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Set error code to DMA */
1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
 1788              		.loc 1 1460 26
 1789 00cc FB68     		ldr	r3, [r7, #12]
 1790 00ce 1022     		movs	r2, #16
 1791 00d0 DA67     		str	r2, [r3, #124]
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 1792              		.loc 1 1462 9
 1793 00d2 FB68     		ldr	r3, [r7, #12]
 1794 00d4 7022     		movs	r2, #112
 1795 00d6 0021     		movs	r1, #0
 1796 00d8 9954     		strb	r1, [r3, r2]
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Restore huart->gState to ready */
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 1797              		.loc 1 1465 23
 1798 00da FB68     		ldr	r3, [r7, #12]
 1799 00dc 2022     		movs	r2, #32
 1800 00de 5A67     		str	r2, [r3, #116]
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 58


1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_ERROR;
 1801              		.loc 1 1467 16
 1802 00e0 0123     		movs	r3, #1
 1803 00e2 12E0     		b	.L98
 1804              	.L101:
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 1805              		.loc 1 1471 5
 1806 00e4 FB68     		ldr	r3, [r7, #12]
 1807 00e6 1B68     		ldr	r3, [r3]
 1808 00e8 4022     		movs	r2, #64
 1809 00ea 1A62     		str	r2, [r3, #32]
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1810              		.loc 1 1473 5
 1811 00ec FB68     		ldr	r3, [r7, #12]
 1812 00ee 7022     		movs	r2, #112
 1813 00f0 0021     		movs	r1, #0
 1814 00f2 9954     		strb	r1, [r3, r2]
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in the UART CR3 register */
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1815              		.loc 1 1477 5
 1816 00f4 FB68     		ldr	r3, [r7, #12]
 1817 00f6 1B68     		ldr	r3, [r3]
 1818 00f8 9A68     		ldr	r2, [r3, #8]
 1819 00fa FB68     		ldr	r3, [r7, #12]
 1820 00fc 1B68     		ldr	r3, [r3]
 1821 00fe 8021     		movs	r1, #128
 1822 0100 0A43     		orrs	r2, r1
 1823 0102 9A60     		str	r2, [r3, #8]
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 1824              		.loc 1 1479 12
 1825 0104 0023     		movs	r3, #0
 1826 0106 00E0     		b	.L98
 1827              	.L95:
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 1828              		.loc 1 1483 12
 1829 0108 0223     		movs	r3, #2
 1830              	.L98:
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1831              		.loc 1 1485 1
 1832 010a 1800     		movs	r0, r3
 1833 010c BD46     		mov	sp, r7
 1834 010e 04B0     		add	sp, sp, #16
 1835              		@ sp needed
 1836 0110 80BD     		pop	{r7, pc}
 1837              	.L103:
 1838 0112 C046     		.align	2
ARM GAS  /tmp/ccTcPcT8.s 			page 59


 1839              	.L102:
 1840 0114 00000000 		.word	UART_DMATransmitCplt
 1841 0118 00000000 		.word	UART_DMATxHalfCplt
 1842 011c 00000000 		.word	UART_DMAError
 1843              		.cfi_endproc
 1844              	.LFE50:
 1846              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1847              		.align	1
 1848              		.global	HAL_UART_Receive_DMA
 1849              		.syntax unified
 1850              		.code	16
 1851              		.thumb_func
 1853              	HAL_UART_Receive_DMA:
 1854              	.LFB51:
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the parity bit (MSB position).
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         of u16 available through pData.
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled by DMA from halfword frontier). Depending on compilat
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1855              		.loc 1 1504 1
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 16
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0000 80B5     		push	{r7, lr}
 1860              	.LCFI33:
 1861              		.cfi_def_cfa_offset 8
 1862              		.cfi_offset 7, -8
 1863              		.cfi_offset 14, -4
 1864 0002 84B0     		sub	sp, sp, #16
 1865              	.LCFI34:
 1866              		.cfi_def_cfa_offset 24
 1867 0004 00AF     		add	r7, sp, #0
 1868              	.LCFI35:
 1869              		.cfi_def_cfa_register 7
 1870 0006 F860     		str	r0, [r7, #12]
 1871 0008 B960     		str	r1, [r7, #8]
 1872 000a BB1D     		adds	r3, r7, #6
 1873 000c 1A80     		strh	r2, [r3]
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
 1874              		.loc 1 1506 12
 1875 000e FB68     		ldr	r3, [r7, #12]
 1876 0010 9B6F     		ldr	r3, [r3, #120]
ARM GAS  /tmp/ccTcPcT8.s 			page 60


 1877              		.loc 1 1506 6
 1878 0012 202B     		cmp	r3, #32
 1879 0014 00D0     		beq	.LCB1593
 1880 0016 7FE0     		b	.L105	@long jump
 1881              	.LCB1593:
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
 1882              		.loc 1 1508 8
 1883 0018 BB68     		ldr	r3, [r7, #8]
 1884 001a 002B     		cmp	r3, #0
 1885 001c 03D0     		beq	.L106
 1886              		.loc 1 1508 25 discriminator 1
 1887 001e BB1D     		adds	r3, r7, #6
 1888 0020 1B88     		ldrh	r3, [r3]
 1889 0022 002B     		cmp	r3, #0
 1890 0024 01D1     		bne	.L107
 1891              	.L106:
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 1892              		.loc 1 1510 14
 1893 0026 0123     		movs	r3, #1
 1894 0028 77E0     		b	.L108
 1895              	.L107:
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy from RDR will be
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 1896              		.loc 1 1516 21
 1897 002a FB68     		ldr	r3, [r7, #12]
 1898 002c 9A68     		ldr	r2, [r3, #8]
 1899              		.loc 1 1516 8
 1900 002e 8023     		movs	r3, #128
 1901 0030 5B01     		lsls	r3, r3, #5
 1902 0032 9A42     		cmp	r2, r3
 1903 0034 09D1     		bne	.L109
 1904              		.loc 1 1516 71 discriminator 1
 1905 0036 FB68     		ldr	r3, [r7, #12]
 1906 0038 1B69     		ldr	r3, [r3, #16]
 1907              		.loc 1 1516 56 discriminator 1
 1908 003a 002B     		cmp	r3, #0
 1909 003c 05D1     		bne	.L109
1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((((uint32_t)pData) & 1U) != 0U)
 1910              		.loc 1 1518 13
 1911 003e BB68     		ldr	r3, [r7, #8]
 1912              		.loc 1 1518 30
 1913 0040 0122     		movs	r2, #1
 1914 0042 1340     		ands	r3, r2
 1915              		.loc 1 1518 10
 1916 0044 01D0     		beq	.L109
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 1917              		.loc 1 1520 17
 1918 0046 0123     		movs	r3, #1
 1919 0048 67E0     		b	.L108
ARM GAS  /tmp/ccTcPcT8.s 			page 61


 1920              	.L109:
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 1921              		.loc 1 1524 5
 1922 004a FB68     		ldr	r3, [r7, #12]
 1923 004c 7022     		movs	r2, #112
 1924 004e 9B5C     		ldrb	r3, [r3, r2]
 1925 0050 012B     		cmp	r3, #1
 1926 0052 01D1     		bne	.L110
 1927              		.loc 1 1524 5 is_stmt 0 discriminator 1
 1928 0054 0223     		movs	r3, #2
 1929              		.loc 1 1524 5
 1930 0056 60E0     		b	.L108
 1931              	.L110:
 1932              		.loc 1 1524 5 discriminator 2
 1933 0058 FB68     		ldr	r3, [r7, #12]
 1934 005a 7022     		movs	r2, #112
 1935 005c 0121     		movs	r1, #1
 1936 005e 9954     		strb	r1, [r3, r2]
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1937              		.loc 1 1526 23 is_stmt 1
 1938 0060 FB68     		ldr	r3, [r7, #12]
 1939 0062 BA68     		ldr	r2, [r7, #8]
 1940 0064 5A65     		str	r2, [r3, #84]
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 1941              		.loc 1 1527 23
 1942 0066 FB68     		ldr	r3, [r7, #12]
 1943 0068 BA1D     		adds	r2, r7, #6
 1944 006a 5821     		movs	r1, #88
 1945 006c 1288     		ldrh	r2, [r2]
 1946 006e 5A52     		strh	r2, [r3, r1]
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1947              		.loc 1 1529 22
 1948 0070 FB68     		ldr	r3, [r7, #12]
 1949 0072 0022     		movs	r2, #0
 1950 0074 DA67     		str	r2, [r3, #124]
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1951              		.loc 1 1530 20
 1952 0076 FB68     		ldr	r3, [r7, #12]
 1953 0078 2222     		movs	r2, #34
 1954 007a 9A67     		str	r2, [r3, #120]
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 1955              		.loc 1 1532 14
 1956 007c FB68     		ldr	r3, [r7, #12]
 1957 007e DB6E     		ldr	r3, [r3, #108]
 1958              		.loc 1 1532 8
 1959 0080 002B     		cmp	r3, #0
 1960 0082 2AD0     		beq	.L111
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1961              		.loc 1 1535 12
ARM GAS  /tmp/ccTcPcT8.s 			page 62


 1962 0084 FB68     		ldr	r3, [r7, #12]
 1963 0086 DB6E     		ldr	r3, [r3, #108]
 1964              		.loc 1 1535 39
 1965 0088 264A     		ldr	r2, .L112
 1966 008a 9A62     		str	r2, [r3, #40]
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1967              		.loc 1 1538 12
 1968 008c FB68     		ldr	r3, [r7, #12]
 1969 008e DB6E     		ldr	r3, [r3, #108]
 1970              		.loc 1 1538 43
 1971 0090 254A     		ldr	r2, .L112+4
 1972 0092 DA62     		str	r2, [r3, #44]
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the DMA error callback */
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferErrorCallback = UART_DMAError;
 1973              		.loc 1 1541 12
 1974 0094 FB68     		ldr	r3, [r7, #12]
 1975 0096 DB6E     		ldr	r3, [r3, #108]
 1976              		.loc 1 1541 40
 1977 0098 244A     		ldr	r2, .L112+8
 1978 009a 1A63     		str	r2, [r3, #48]
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the DMA abort callback */
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 1979              		.loc 1 1544 12
 1980 009c FB68     		ldr	r3, [r7, #12]
 1981 009e DB6E     		ldr	r3, [r3, #108]
 1982              		.loc 1 1544 40
 1983 00a0 0022     		movs	r2, #0
 1984 00a2 5A63     		str	r2, [r3, #52]
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the DMA channel */
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuff
 1985              		.loc 1 1547 11
 1986 00a4 FB68     		ldr	r3, [r7, #12]
 1987 00a6 D86E     		ldr	r0, [r3, #108]
 1988              		.loc 1 1547 59
 1989 00a8 FB68     		ldr	r3, [r7, #12]
 1990 00aa 1B68     		ldr	r3, [r3]
 1991              		.loc 1 1547 53
 1992 00ac 2433     		adds	r3, r3, #36
 1993              		.loc 1 1547 11
 1994 00ae 1900     		movs	r1, r3
 1995              		.loc 1 1547 91
 1996 00b0 FB68     		ldr	r3, [r7, #12]
 1997 00b2 5B6D     		ldr	r3, [r3, #84]
 1998              		.loc 1 1547 11
 1999 00b4 1A00     		movs	r2, r3
 2000 00b6 BB1D     		adds	r3, r7, #6
 2001 00b8 1B88     		ldrh	r3, [r3]
 2002 00ba FFF7FEFF 		bl	HAL_DMA_Start_IT
 2003 00be 031E     		subs	r3, r0, #0
 2004              		.loc 1 1547 10 discriminator 1
 2005 00c0 0BD0     		beq	.L111
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
ARM GAS  /tmp/ccTcPcT8.s 			page 63


1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Set error code to DMA */
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
 2006              		.loc 1 1550 26
 2007 00c2 FB68     		ldr	r3, [r7, #12]
 2008 00c4 1022     		movs	r2, #16
 2009 00c6 DA67     		str	r2, [r3, #124]
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 2010              		.loc 1 1552 9
 2011 00c8 FB68     		ldr	r3, [r7, #12]
 2012 00ca 7022     		movs	r2, #112
 2013 00cc 0021     		movs	r1, #0
 2014 00ce 9954     		strb	r1, [r3, r2]
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Restore huart->gState to ready */
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 2015              		.loc 1 1555 23
 2016 00d0 FB68     		ldr	r3, [r7, #12]
 2017 00d2 2022     		movs	r2, #32
 2018 00d4 5A67     		str	r2, [r3, #116]
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_ERROR;
 2019              		.loc 1 1557 16
 2020 00d6 0123     		movs	r3, #1
 2021 00d8 1FE0     		b	.L108
 2022              	.L111:
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 2023              		.loc 1 1560 5
 2024 00da FB68     		ldr	r3, [r7, #12]
 2025 00dc 7022     		movs	r2, #112
 2026 00de 0021     		movs	r1, #0
 2027 00e0 9954     		strb	r1, [r3, r2]
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2028              		.loc 1 1563 5
 2029 00e2 FB68     		ldr	r3, [r7, #12]
 2030 00e4 1B68     		ldr	r3, [r3]
 2031 00e6 1A68     		ldr	r2, [r3]
 2032 00e8 FB68     		ldr	r3, [r7, #12]
 2033 00ea 1B68     		ldr	r3, [r3]
 2034 00ec 8021     		movs	r1, #128
 2035 00ee 4900     		lsls	r1, r1, #1
 2036 00f0 0A43     		orrs	r2, r1
 2037 00f2 1A60     		str	r2, [r3]
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2038              		.loc 1 1566 5
 2039 00f4 FB68     		ldr	r3, [r7, #12]
 2040 00f6 1B68     		ldr	r3, [r3]
 2041 00f8 9A68     		ldr	r2, [r3, #8]
 2042 00fa FB68     		ldr	r3, [r7, #12]
 2043 00fc 1B68     		ldr	r3, [r3]
 2044 00fe 0121     		movs	r1, #1
ARM GAS  /tmp/ccTcPcT8.s 			page 64


 2045 0100 0A43     		orrs	r2, r1
 2046 0102 9A60     		str	r2, [r3, #8]
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in the UART CR3 register */
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2047              		.loc 1 1570 5
 2048 0104 FB68     		ldr	r3, [r7, #12]
 2049 0106 1B68     		ldr	r3, [r3]
 2050 0108 9A68     		ldr	r2, [r3, #8]
 2051 010a FB68     		ldr	r3, [r7, #12]
 2052 010c 1B68     		ldr	r3, [r3]
 2053 010e 4021     		movs	r1, #64
 2054 0110 0A43     		orrs	r2, r1
 2055 0112 9A60     		str	r2, [r3, #8]
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 2056              		.loc 1 1572 12
 2057 0114 0023     		movs	r3, #0
 2058 0116 00E0     		b	.L108
 2059              	.L105:
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 2060              		.loc 1 1576 12
 2061 0118 0223     		movs	r3, #2
 2062              	.L108:
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2063              		.loc 1 1578 1
 2064 011a 1800     		movs	r0, r3
 2065 011c BD46     		mov	sp, r7
 2066 011e 04B0     		add	sp, sp, #16
 2067              		@ sp needed
 2068 0120 80BD     		pop	{r7, pc}
 2069              	.L113:
 2070 0122 C046     		.align	2
 2071              	.L112:
 2072 0124 00000000 		.word	UART_DMAReceiveCplt
 2073 0128 00000000 		.word	UART_DMARxHalfCplt
 2074 012c 00000000 		.word	UART_DMAError
 2075              		.cfi_endproc
 2076              	.LFE51:
 2078              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 2079              		.align	1
 2080              		.global	HAL_UART_DMAPause
 2081              		.syntax unified
 2082              		.code	16
 2083              		.thumb_func
 2085              	HAL_UART_DMAPause:
 2086              	.LFB52:
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccTcPcT8.s 			page 65


1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2087              		.loc 1 1586 1
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 16
 2090              		@ frame_needed = 1, uses_anonymous_args = 0
 2091 0000 80B5     		push	{r7, lr}
 2092              	.LCFI36:
 2093              		.cfi_def_cfa_offset 8
 2094              		.cfi_offset 7, -8
 2095              		.cfi_offset 14, -4
 2096 0002 84B0     		sub	sp, sp, #16
 2097              	.LCFI37:
 2098              		.cfi_def_cfa_offset 24
 2099 0004 00AF     		add	r7, sp, #0
 2100              	.LCFI38:
 2101              		.cfi_def_cfa_register 7
 2102 0006 7860     		str	r0, [r7, #4]
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 2103              		.loc 1 1587 31
 2104 0008 7B68     		ldr	r3, [r7, #4]
 2105 000a 5B6F     		ldr	r3, [r3, #116]
 2106 000c FB60     		str	r3, [r7, #12]
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 2107              		.loc 1 1588 31
 2108 000e 7B68     		ldr	r3, [r7, #4]
 2109 0010 9B6F     		ldr	r3, [r3, #120]
 2110 0012 BB60     		str	r3, [r7, #8]
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2111              		.loc 1 1590 3
 2112 0014 7B68     		ldr	r3, [r7, #4]
 2113 0016 7022     		movs	r2, #112
 2114 0018 9B5C     		ldrb	r3, [r3, r2]
 2115 001a 012B     		cmp	r3, #1
 2116 001c 01D1     		bne	.L115
 2117              		.loc 1 1590 3 is_stmt 0 discriminator 1
 2118 001e 0223     		movs	r3, #2
 2119              		.loc 1 1590 3
 2120 0020 3CE0     		b	.L116
 2121              	.L115:
 2122              		.loc 1 1590 3 discriminator 2
 2123 0022 7B68     		ldr	r3, [r7, #4]
 2124 0024 7022     		movs	r2, #112
 2125 0026 0121     		movs	r1, #1
 2126 0028 9954     		strb	r1, [r3, r2]
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 2127              		.loc 1 1592 8 is_stmt 1
 2128 002a 7B68     		ldr	r3, [r7, #4]
 2129 002c 1B68     		ldr	r3, [r3]
 2130 002e 9B68     		ldr	r3, [r3, #8]
 2131 0030 8022     		movs	r2, #128
 2132 0032 1340     		ands	r3, r2
 2133              		.loc 1 1592 6
 2134 0034 802B     		cmp	r3, #128
ARM GAS  /tmp/ccTcPcT8.s 			page 66


 2135 0036 0AD1     		bne	.L117
 2136              		.loc 1 1592 62 discriminator 1
 2137 0038 FB68     		ldr	r3, [r7, #12]
 2138 003a 212B     		cmp	r3, #33
 2139 003c 07D1     		bne	.L117
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2140              		.loc 1 1596 5
 2141 003e 7B68     		ldr	r3, [r7, #4]
 2142 0040 1B68     		ldr	r3, [r3]
 2143 0042 9A68     		ldr	r2, [r3, #8]
 2144 0044 7B68     		ldr	r3, [r7, #4]
 2145 0046 1B68     		ldr	r3, [r3]
 2146 0048 8021     		movs	r1, #128
 2147 004a 8A43     		bics	r2, r1
 2148 004c 9A60     		str	r2, [r3, #8]
 2149              	.L117:
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 2150              		.loc 1 1598 8
 2151 004e 7B68     		ldr	r3, [r7, #4]
 2152 0050 1B68     		ldr	r3, [r3]
 2153 0052 9B68     		ldr	r3, [r3, #8]
 2154 0054 4022     		movs	r2, #64
 2155 0056 1340     		ands	r3, r2
 2156              		.loc 1 1598 6
 2157 0058 402B     		cmp	r3, #64
 2158 005a 1AD1     		bne	.L118
 2159              		.loc 1 1598 62 discriminator 1
 2160 005c BB68     		ldr	r3, [r7, #8]
 2161 005e 222B     		cmp	r3, #34
 2162 0060 17D1     		bne	.L118
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2163              		.loc 1 1602 5
 2164 0062 7B68     		ldr	r3, [r7, #4]
 2165 0064 1B68     		ldr	r3, [r3]
 2166 0066 1A68     		ldr	r2, [r3]
 2167 0068 7B68     		ldr	r3, [r7, #4]
 2168 006a 1B68     		ldr	r3, [r3]
 2169 006c 0D49     		ldr	r1, .L119
 2170 006e 0A40     		ands	r2, r1
 2171 0070 1A60     		str	r2, [r3]
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2172              		.loc 1 1603 5
 2173 0072 7B68     		ldr	r3, [r7, #4]
 2174 0074 1B68     		ldr	r3, [r3]
 2175 0076 9A68     		ldr	r2, [r3, #8]
 2176 0078 7B68     		ldr	r3, [r7, #4]
 2177 007a 1B68     		ldr	r3, [r3]
 2178 007c 0121     		movs	r1, #1
 2179 007e 8A43     		bics	r2, r1
 2180 0080 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccTcPcT8.s 			page 67


1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2181              		.loc 1 1606 5
 2182 0082 7B68     		ldr	r3, [r7, #4]
 2183 0084 1B68     		ldr	r3, [r3]
 2184 0086 9A68     		ldr	r2, [r3, #8]
 2185 0088 7B68     		ldr	r3, [r7, #4]
 2186 008a 1B68     		ldr	r3, [r3]
 2187 008c 4021     		movs	r1, #64
 2188 008e 8A43     		bics	r2, r1
 2189 0090 9A60     		str	r2, [r3, #8]
 2190              	.L118:
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2191              		.loc 1 1609 3
 2192 0092 7B68     		ldr	r3, [r7, #4]
 2193 0094 7022     		movs	r2, #112
 2194 0096 0021     		movs	r1, #0
 2195 0098 9954     		strb	r1, [r3, r2]
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2196              		.loc 1 1611 10
 2197 009a 0023     		movs	r3, #0
 2198              	.L116:
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2199              		.loc 1 1612 1
 2200 009c 1800     		movs	r0, r3
 2201 009e BD46     		mov	sp, r7
 2202 00a0 04B0     		add	sp, sp, #16
 2203              		@ sp needed
 2204 00a2 80BD     		pop	{r7, pc}
 2205              	.L120:
 2206              		.align	2
 2207              	.L119:
 2208 00a4 FFFEFFFF 		.word	-257
 2209              		.cfi_endproc
 2210              	.LFE52:
 2212              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 2213              		.align	1
 2214              		.global	HAL_UART_DMAResume
 2215              		.syntax unified
 2216              		.code	16
 2217              		.thumb_func
 2219              	HAL_UART_DMAResume:
 2220              	.LFB53:
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2221              		.loc 1 1620 1
 2222              		.cfi_startproc
ARM GAS  /tmp/ccTcPcT8.s 			page 68


 2223              		@ args = 0, pretend = 0, frame = 8
 2224              		@ frame_needed = 1, uses_anonymous_args = 0
 2225 0000 80B5     		push	{r7, lr}
 2226              	.LCFI39:
 2227              		.cfi_def_cfa_offset 8
 2228              		.cfi_offset 7, -8
 2229              		.cfi_offset 14, -4
 2230 0002 82B0     		sub	sp, sp, #8
 2231              	.LCFI40:
 2232              		.cfi_def_cfa_offset 16
 2233 0004 00AF     		add	r7, sp, #0
 2234              	.LCFI41:
 2235              		.cfi_def_cfa_register 7
 2236 0006 7860     		str	r0, [r7, #4]
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 2237              		.loc 1 1621 3
 2238 0008 7B68     		ldr	r3, [r7, #4]
 2239 000a 7022     		movs	r2, #112
 2240 000c 9B5C     		ldrb	r3, [r3, r2]
 2241 000e 012B     		cmp	r3, #1
 2242 0010 01D1     		bne	.L122
 2243              		.loc 1 1621 3 is_stmt 0 discriminator 1
 2244 0012 0223     		movs	r3, #2
 2245              		.loc 1 1621 3
 2246 0014 35E0     		b	.L123
 2247              	.L122:
 2248              		.loc 1 1621 3 discriminator 2
 2249 0016 7B68     		ldr	r3, [r7, #4]
 2250 0018 7022     		movs	r2, #112
 2251 001a 0121     		movs	r1, #1
 2252 001c 9954     		strb	r1, [r3, r2]
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 2253              		.loc 1 1623 12 is_stmt 1
 2254 001e 7B68     		ldr	r3, [r7, #4]
 2255 0020 5B6F     		ldr	r3, [r3, #116]
 2256              		.loc 1 1623 6
 2257 0022 212B     		cmp	r3, #33
 2258 0024 07D1     		bne	.L124
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2259              		.loc 1 1626 5
 2260 0026 7B68     		ldr	r3, [r7, #4]
 2261 0028 1B68     		ldr	r3, [r3]
 2262 002a 9A68     		ldr	r2, [r3, #8]
 2263 002c 7B68     		ldr	r3, [r7, #4]
 2264 002e 1B68     		ldr	r3, [r3]
 2265 0030 8021     		movs	r1, #128
 2266 0032 0A43     		orrs	r2, r1
 2267 0034 9A60     		str	r2, [r3, #8]
 2268              	.L124:
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2269              		.loc 1 1628 12
 2270 0036 7B68     		ldr	r3, [r7, #4]
 2271 0038 9B6F     		ldr	r3, [r3, #120]
ARM GAS  /tmp/ccTcPcT8.s 			page 69


 2272              		.loc 1 1628 6
 2273 003a 222B     		cmp	r3, #34
 2274 003c 1CD1     		bne	.L125
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 2275              		.loc 1 1631 5
 2276 003e 7B68     		ldr	r3, [r7, #4]
 2277 0040 1B68     		ldr	r3, [r3]
 2278 0042 0822     		movs	r2, #8
 2279 0044 1A62     		str	r2, [r3, #32]
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2280              		.loc 1 1634 5
 2281 0046 7B68     		ldr	r3, [r7, #4]
 2282 0048 1B68     		ldr	r3, [r3]
 2283 004a 1A68     		ldr	r2, [r3]
 2284 004c 7B68     		ldr	r3, [r7, #4]
 2285 004e 1B68     		ldr	r3, [r3]
 2286 0050 8021     		movs	r1, #128
 2287 0052 4900     		lsls	r1, r1, #1
 2288 0054 0A43     		orrs	r2, r1
 2289 0056 1A60     		str	r2, [r3]
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2290              		.loc 1 1635 5
 2291 0058 7B68     		ldr	r3, [r7, #4]
 2292 005a 1B68     		ldr	r3, [r3]
 2293 005c 9A68     		ldr	r2, [r3, #8]
 2294 005e 7B68     		ldr	r3, [r7, #4]
 2295 0060 1B68     		ldr	r3, [r3]
 2296 0062 0121     		movs	r1, #1
 2297 0064 0A43     		orrs	r2, r1
 2298 0066 9A60     		str	r2, [r3, #8]
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2299              		.loc 1 1638 5
 2300 0068 7B68     		ldr	r3, [r7, #4]
 2301 006a 1B68     		ldr	r3, [r3]
 2302 006c 9A68     		ldr	r2, [r3, #8]
 2303 006e 7B68     		ldr	r3, [r7, #4]
 2304 0070 1B68     		ldr	r3, [r3]
 2305 0072 4021     		movs	r1, #64
 2306 0074 0A43     		orrs	r2, r1
 2307 0076 9A60     		str	r2, [r3, #8]
 2308              	.L125:
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2309              		.loc 1 1641 3
 2310 0078 7B68     		ldr	r3, [r7, #4]
 2311 007a 7022     		movs	r2, #112
 2312 007c 0021     		movs	r1, #0
 2313 007e 9954     		strb	r1, [r3, r2]
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
ARM GAS  /tmp/ccTcPcT8.s 			page 70


 2314              		.loc 1 1643 10
 2315 0080 0023     		movs	r3, #0
 2316              	.L123:
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2317              		.loc 1 1644 1
 2318 0082 1800     		movs	r0, r3
 2319 0084 BD46     		mov	sp, r7
 2320 0086 02B0     		add	sp, sp, #8
 2321              		@ sp needed
 2322 0088 80BD     		pop	{r7, pc}
 2323              		.cfi_endproc
 2324              	.LFE53:
 2326              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2327              		.align	1
 2328              		.global	HAL_UART_DMAStop
 2329              		.syntax unified
 2330              		.code	16
 2331              		.thumb_func
 2333              	HAL_UART_DMAStop:
 2334              	.LFB54:
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2335              		.loc 1 1652 1
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 16
 2338              		@ frame_needed = 1, uses_anonymous_args = 0
 2339 0000 80B5     		push	{r7, lr}
 2340              	.LCFI42:
 2341              		.cfi_def_cfa_offset 8
 2342              		.cfi_offset 7, -8
 2343              		.cfi_offset 14, -4
 2344 0002 84B0     		sub	sp, sp, #16
 2345              	.LCFI43:
 2346              		.cfi_def_cfa_offset 24
 2347 0004 00AF     		add	r7, sp, #0
 2348              	.LCFI44:
 2349              		.cfi_def_cfa_register 7
 2350 0006 7860     		str	r0, [r7, #4]
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 2351              		.loc 1 1660 31
 2352 0008 7B68     		ldr	r3, [r7, #4]
 2353 000a 5B6F     		ldr	r3, [r3, #116]
 2354 000c FB60     		str	r3, [r7, #12]
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
ARM GAS  /tmp/ccTcPcT8.s 			page 71


 2355              		.loc 1 1661 31
 2356 000e 7B68     		ldr	r3, [r7, #4]
 2357 0010 9B6F     		ldr	r3, [r3, #120]
 2358 0012 BB60     		str	r3, [r7, #8]
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 2359              		.loc 1 1664 8
 2360 0014 7B68     		ldr	r3, [r7, #4]
 2361 0016 1B68     		ldr	r3, [r3]
 2362 0018 9B68     		ldr	r3, [r3, #8]
 2363 001a 8022     		movs	r2, #128
 2364 001c 1340     		ands	r3, r2
 2365              		.loc 1 1664 6
 2366 001e 802B     		cmp	r3, #128
 2367 0020 26D1     		bne	.L127
 2368              		.loc 1 1664 62 discriminator 1
 2369 0022 FB68     		ldr	r3, [r7, #12]
 2370 0024 212B     		cmp	r3, #33
 2371 0026 23D1     		bne	.L127
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2372              		.loc 1 1667 5
 2373 0028 7B68     		ldr	r3, [r7, #4]
 2374 002a 1B68     		ldr	r3, [r3]
 2375 002c 9A68     		ldr	r2, [r3, #8]
 2376 002e 7B68     		ldr	r3, [r7, #4]
 2377 0030 1B68     		ldr	r3, [r3]
 2378 0032 8021     		movs	r1, #128
 2379 0034 8A43     		bics	r2, r1
 2380 0036 9A60     		str	r2, [r3, #8]
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2381              		.loc 1 1670 14
 2382 0038 7B68     		ldr	r3, [r7, #4]
 2383 003a 9B6E     		ldr	r3, [r3, #104]
 2384              		.loc 1 1670 8
 2385 003c 002B     		cmp	r3, #0
 2386 003e 13D0     		beq	.L128
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2387              		.loc 1 1672 11
 2388 0040 7B68     		ldr	r3, [r7, #4]
 2389 0042 9B6E     		ldr	r3, [r3, #104]
 2390 0044 1800     		movs	r0, r3
 2391 0046 FFF7FEFF 		bl	HAL_DMA_Abort
 2392 004a 031E     		subs	r3, r0, #0
 2393              		.loc 1 1672 10 discriminator 1
 2394 004c 0CD0     		beq	.L128
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2395              		.loc 1 1674 13
 2396 004e 7B68     		ldr	r3, [r7, #4]
 2397 0050 9B6E     		ldr	r3, [r3, #104]
 2398 0052 1800     		movs	r0, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 72


 2399 0054 FFF7FEFF 		bl	HAL_DMA_GetError
 2400 0058 0300     		movs	r3, r0
 2401              		.loc 1 1674 12 discriminator 1
 2402 005a 202B     		cmp	r3, #32
 2403 005c 04D1     		bne	.L128
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2404              		.loc 1 1677 28
 2405 005e 7B68     		ldr	r3, [r7, #4]
 2406 0060 1022     		movs	r2, #16
 2407 0062 DA67     		str	r2, [r3, #124]
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2408              		.loc 1 1679 18
 2409 0064 0323     		movs	r3, #3
 2410 0066 32E0     		b	.L129
 2411              	.L128:
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2412              		.loc 1 1684 5
 2413 0068 7B68     		ldr	r3, [r7, #4]
 2414 006a 1800     		movs	r0, r3
 2415 006c FFF7FEFF 		bl	UART_EndTxTransfer
 2416              	.L127:
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 2417              		.loc 1 1688 8
 2418 0070 7B68     		ldr	r3, [r7, #4]
 2419 0072 1B68     		ldr	r3, [r3]
 2420 0074 9B68     		ldr	r3, [r3, #8]
 2421 0076 4022     		movs	r2, #64
 2422 0078 1340     		ands	r3, r2
 2423              		.loc 1 1688 6
 2424 007a 402B     		cmp	r3, #64
 2425 007c 26D1     		bne	.L130
 2426              		.loc 1 1688 62 discriminator 1
 2427 007e BB68     		ldr	r3, [r7, #8]
 2428 0080 222B     		cmp	r3, #34
 2429 0082 23D1     		bne	.L130
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2430              		.loc 1 1691 5
 2431 0084 7B68     		ldr	r3, [r7, #4]
 2432 0086 1B68     		ldr	r3, [r3]
 2433 0088 9A68     		ldr	r2, [r3, #8]
 2434 008a 7B68     		ldr	r3, [r7, #4]
 2435 008c 1B68     		ldr	r3, [r3]
 2436 008e 4021     		movs	r1, #64
 2437 0090 8A43     		bics	r2, r1
 2438 0092 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccTcPcT8.s 			page 73


1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2439              		.loc 1 1694 14
 2440 0094 7B68     		ldr	r3, [r7, #4]
 2441 0096 DB6E     		ldr	r3, [r3, #108]
 2442              		.loc 1 1694 8
 2443 0098 002B     		cmp	r3, #0
 2444 009a 13D0     		beq	.L131
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2445              		.loc 1 1696 11
 2446 009c 7B68     		ldr	r3, [r7, #4]
 2447 009e DB6E     		ldr	r3, [r3, #108]
 2448 00a0 1800     		movs	r0, r3
 2449 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 2450 00a6 031E     		subs	r3, r0, #0
 2451              		.loc 1 1696 10 discriminator 1
 2452 00a8 0CD0     		beq	.L131
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2453              		.loc 1 1698 13
 2454 00aa 7B68     		ldr	r3, [r7, #4]
 2455 00ac DB6E     		ldr	r3, [r3, #108]
 2456 00ae 1800     		movs	r0, r3
 2457 00b0 FFF7FEFF 		bl	HAL_DMA_GetError
 2458 00b4 0300     		movs	r3, r0
 2459              		.loc 1 1698 12 discriminator 1
 2460 00b6 202B     		cmp	r3, #32
 2461 00b8 04D1     		bne	.L131
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2462              		.loc 1 1701 28
 2463 00ba 7B68     		ldr	r3, [r7, #4]
 2464 00bc 1022     		movs	r2, #16
 2465 00be DA67     		str	r2, [r3, #124]
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2466              		.loc 1 1703 18
 2467 00c0 0323     		movs	r3, #3
 2468 00c2 04E0     		b	.L129
 2469              	.L131:
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2470              		.loc 1 1708 5
 2471 00c4 7B68     		ldr	r3, [r7, #4]
 2472 00c6 1800     		movs	r0, r3
 2473 00c8 FFF7FEFF 		bl	UART_EndRxTransfer
 2474              	.L130:
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2475              		.loc 1 1711 10
ARM GAS  /tmp/ccTcPcT8.s 			page 74


 2476 00cc 0023     		movs	r3, #0
 2477              	.L129:
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2478              		.loc 1 1712 1
 2479 00ce 1800     		movs	r0, r3
 2480 00d0 BD46     		mov	sp, r7
 2481 00d2 04B0     		add	sp, sp, #16
 2482              		@ sp needed
 2483 00d4 80BD     		pop	{r7, pc}
 2484              		.cfi_endproc
 2485              	.LFE54:
 2487              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2488              		.align	1
 2489              		.global	HAL_UART_Abort
 2490              		.syntax unified
 2491              		.code	16
 2492              		.thumb_func
 2494              	HAL_UART_Abort:
 2495              	.LFB55:
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2496              		.loc 1 1727 1
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 8
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500 0000 80B5     		push	{r7, lr}
 2501              	.LCFI45:
 2502              		.cfi_def_cfa_offset 8
 2503              		.cfi_offset 7, -8
 2504              		.cfi_offset 14, -4
 2505 0002 82B0     		sub	sp, sp, #8
 2506              	.LCFI46:
 2507              		.cfi_def_cfa_offset 16
 2508 0004 00AF     		add	r7, sp, #0
 2509              	.LCFI47:
 2510              		.cfi_def_cfa_register 7
 2511 0006 7860     		str	r0, [r7, #4]
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2512              		.loc 1 1729 3
 2513 0008 7B68     		ldr	r3, [r7, #4]
 2514 000a 1B68     		ldr	r3, [r3]
 2515 000c 1A68     		ldr	r2, [r3]
 2516 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 75


 2517 0010 1B68     		ldr	r3, [r3]
 2518 0012 4149     		ldr	r1, .L136
 2519 0014 0A40     		ands	r2, r1
 2520 0016 1A60     		str	r2, [r3]
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2521              		.loc 1 1730 3
 2522 0018 7B68     		ldr	r3, [r7, #4]
 2523 001a 1B68     		ldr	r3, [r3]
 2524 001c 9A68     		ldr	r2, [r3, #8]
 2525 001e 7B68     		ldr	r3, [r7, #4]
 2526 0020 1B68     		ldr	r3, [r3]
 2527 0022 0121     		movs	r1, #1
 2528 0024 8A43     		bics	r2, r1
 2529 0026 9A60     		str	r2, [r3, #8]
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2530              		.loc 1 1733 7
 2531 0028 7B68     		ldr	r3, [r7, #4]
 2532 002a 1B68     		ldr	r3, [r3]
 2533 002c 9B68     		ldr	r3, [r3, #8]
 2534 002e 8022     		movs	r2, #128
 2535 0030 1340     		ands	r3, r2
 2536              		.loc 1 1733 6
 2537 0032 802B     		cmp	r3, #128
 2538 0034 23D1     		bne	.L133
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2539              		.loc 1 1735 5
 2540 0036 7B68     		ldr	r3, [r7, #4]
 2541 0038 1B68     		ldr	r3, [r3]
 2542 003a 9A68     		ldr	r2, [r3, #8]
 2543 003c 7B68     		ldr	r3, [r7, #4]
 2544 003e 1B68     		ldr	r3, [r3]
 2545 0040 8021     		movs	r1, #128
 2546 0042 8A43     		bics	r2, r1
 2547 0044 9A60     		str	r2, [r3, #8]
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2548              		.loc 1 1738 14
 2549 0046 7B68     		ldr	r3, [r7, #4]
 2550 0048 9B6E     		ldr	r3, [r3, #104]
 2551              		.loc 1 1738 8
 2552 004a 002B     		cmp	r3, #0
 2553 004c 17D0     		beq	.L133
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2554              		.loc 1 1742 12
 2555 004e 7B68     		ldr	r3, [r7, #4]
 2556 0050 9B6E     		ldr	r3, [r3, #104]
 2557              		.loc 1 1742 40
 2558 0052 0022     		movs	r2, #0
 2559 0054 5A63     		str	r2, [r3, #52]
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 76


1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2560              		.loc 1 1744 11
 2561 0056 7B68     		ldr	r3, [r7, #4]
 2562 0058 9B6E     		ldr	r3, [r3, #104]
 2563 005a 1800     		movs	r0, r3
 2564 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2565 0060 031E     		subs	r3, r0, #0
 2566              		.loc 1 1744 10 discriminator 1
 2567 0062 0CD0     		beq	.L133
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2568              		.loc 1 1746 13
 2569 0064 7B68     		ldr	r3, [r7, #4]
 2570 0066 9B6E     		ldr	r3, [r3, #104]
 2571 0068 1800     		movs	r0, r3
 2572 006a FFF7FEFF 		bl	HAL_DMA_GetError
 2573 006e 0300     		movs	r3, r0
 2574              		.loc 1 1746 12 discriminator 1
 2575 0070 202B     		cmp	r3, #32
 2576 0072 04D1     		bne	.L133
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2577              		.loc 1 1749 28
 2578 0074 7B68     		ldr	r3, [r7, #4]
 2579 0076 1022     		movs	r2, #16
 2580 0078 DA67     		str	r2, [r3, #124]
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2581              		.loc 1 1751 18
 2582 007a 0323     		movs	r3, #3
 2583 007c 48E0     		b	.L134
 2584              	.L133:
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2585              		.loc 1 1758 7
 2586 007e 7B68     		ldr	r3, [r7, #4]
 2587 0080 1B68     		ldr	r3, [r3]
 2588 0082 9B68     		ldr	r3, [r3, #8]
 2589 0084 4022     		movs	r2, #64
 2590 0086 1340     		ands	r3, r2
 2591              		.loc 1 1758 6
 2592 0088 402B     		cmp	r3, #64
 2593 008a 23D1     		bne	.L135
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2594              		.loc 1 1760 5
 2595 008c 7B68     		ldr	r3, [r7, #4]
 2596 008e 1B68     		ldr	r3, [r3]
 2597 0090 9A68     		ldr	r2, [r3, #8]
 2598 0092 7B68     		ldr	r3, [r7, #4]
 2599 0094 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 77


 2600 0096 4021     		movs	r1, #64
 2601 0098 8A43     		bics	r2, r1
 2602 009a 9A60     		str	r2, [r3, #8]
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2603              		.loc 1 1763 14
 2604 009c 7B68     		ldr	r3, [r7, #4]
 2605 009e DB6E     		ldr	r3, [r3, #108]
 2606              		.loc 1 1763 8
 2607 00a0 002B     		cmp	r3, #0
 2608 00a2 17D0     		beq	.L135
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2609              		.loc 1 1767 12
 2610 00a4 7B68     		ldr	r3, [r7, #4]
 2611 00a6 DB6E     		ldr	r3, [r3, #108]
 2612              		.loc 1 1767 40
 2613 00a8 0022     		movs	r2, #0
 2614 00aa 5A63     		str	r2, [r3, #52]
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2615              		.loc 1 1769 11
 2616 00ac 7B68     		ldr	r3, [r7, #4]
 2617 00ae DB6E     		ldr	r3, [r3, #108]
 2618 00b0 1800     		movs	r0, r3
 2619 00b2 FFF7FEFF 		bl	HAL_DMA_Abort
 2620 00b6 031E     		subs	r3, r0, #0
 2621              		.loc 1 1769 10 discriminator 1
 2622 00b8 0CD0     		beq	.L135
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2623              		.loc 1 1771 13
 2624 00ba 7B68     		ldr	r3, [r7, #4]
 2625 00bc DB6E     		ldr	r3, [r3, #108]
 2626 00be 1800     		movs	r0, r3
 2627 00c0 FFF7FEFF 		bl	HAL_DMA_GetError
 2628 00c4 0300     		movs	r3, r0
 2629              		.loc 1 1771 12 discriminator 1
 2630 00c6 202B     		cmp	r3, #32
 2631 00c8 04D1     		bne	.L135
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2632              		.loc 1 1774 28
 2633 00ca 7B68     		ldr	r3, [r7, #4]
 2634 00cc 1022     		movs	r2, #16
 2635 00ce DA67     		str	r2, [r3, #124]
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2636              		.loc 1 1776 18
 2637 00d0 0323     		movs	r3, #3
 2638 00d2 1DE0     		b	.L134
 2639              	.L135:
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
ARM GAS  /tmp/ccTcPcT8.s 			page 78


1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2640              		.loc 1 1783 22
 2641 00d4 7B68     		ldr	r3, [r7, #4]
 2642 00d6 5222     		movs	r2, #82
 2643 00d8 0021     		movs	r1, #0
 2644 00da 9952     		strh	r1, [r3, r2]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2645              		.loc 1 1784 22
 2646 00dc 7B68     		ldr	r3, [r7, #4]
 2647 00de 5A22     		movs	r2, #90
 2648 00e0 0021     		movs	r1, #0
 2649 00e2 9952     		strh	r1, [r3, r2]
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2650              		.loc 1 1787 3
 2651 00e4 7B68     		ldr	r3, [r7, #4]
 2652 00e6 1B68     		ldr	r3, [r3]
 2653 00e8 0F22     		movs	r2, #15
 2654 00ea 1A62     		str	r2, [r3, #32]
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Discard the received data */
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2655              		.loc 1 1791 3
 2656 00ec 7B68     		ldr	r3, [r7, #4]
 2657 00ee 1B68     		ldr	r3, [r3]
 2658 00f0 9A69     		ldr	r2, [r3, #24]
 2659 00f2 7B68     		ldr	r3, [r7, #4]
 2660 00f4 1B68     		ldr	r3, [r3]
 2661 00f6 0821     		movs	r1, #8
 2662 00f8 0A43     		orrs	r2, r1
 2663 00fa 9A61     		str	r2, [r3, #24]
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 2664              		.loc 1 1794 18
 2665 00fc 7B68     		ldr	r3, [r7, #4]
 2666 00fe 2022     		movs	r2, #32
 2667 0100 5A67     		str	r2, [r3, #116]
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2668              		.loc 1 1795 18
 2669 0102 7B68     		ldr	r3, [r7, #4]
 2670 0104 2022     		movs	r2, #32
 2671 0106 9A67     		str	r2, [r3, #120]
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2672              		.loc 1 1797 20
 2673 0108 7B68     		ldr	r3, [r7, #4]
 2674 010a 0022     		movs	r2, #0
 2675 010c DA67     		str	r2, [r3, #124]
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 79


1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2676              		.loc 1 1799 10
 2677 010e 0023     		movs	r3, #0
 2678              	.L134:
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2679              		.loc 1 1800 1
 2680 0110 1800     		movs	r0, r3
 2681 0112 BD46     		mov	sp, r7
 2682 0114 02B0     		add	sp, sp, #8
 2683              		@ sp needed
 2684 0116 80BD     		pop	{r7, pc}
 2685              	.L137:
 2686              		.align	2
 2687              	.L136:
 2688 0118 1FFEFFFF 		.word	-481
 2689              		.cfi_endproc
 2690              	.LFE55:
 2692              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2693              		.align	1
 2694              		.global	HAL_UART_AbortTransmit
 2695              		.syntax unified
 2696              		.code	16
 2697              		.thumb_func
 2699              	HAL_UART_AbortTransmit:
 2700              	.LFB56:
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2701              		.loc 1 1815 1
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 8
 2704              		@ frame_needed = 1, uses_anonymous_args = 0
 2705 0000 80B5     		push	{r7, lr}
 2706              	.LCFI48:
 2707              		.cfi_def_cfa_offset 8
 2708              		.cfi_offset 7, -8
 2709              		.cfi_offset 14, -4
 2710 0002 82B0     		sub	sp, sp, #8
 2711              	.LCFI49:
 2712              		.cfi_def_cfa_offset 16
 2713 0004 00AF     		add	r7, sp, #0
 2714              	.LCFI50:
 2715              		.cfi_def_cfa_register 7
 2716 0006 7860     		str	r0, [r7, #4]
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
ARM GAS  /tmp/ccTcPcT8.s 			page 80


1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2717              		.loc 1 1817 3
 2718 0008 7B68     		ldr	r3, [r7, #4]
 2719 000a 1B68     		ldr	r3, [r3]
 2720 000c 1A68     		ldr	r2, [r3]
 2721 000e 7B68     		ldr	r3, [r7, #4]
 2722 0010 1B68     		ldr	r3, [r3]
 2723 0012 C021     		movs	r1, #192
 2724 0014 8A43     		bics	r2, r1
 2725 0016 1A60     		str	r2, [r3]
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2726              		.loc 1 1820 7
 2727 0018 7B68     		ldr	r3, [r7, #4]
 2728 001a 1B68     		ldr	r3, [r3]
 2729 001c 9B68     		ldr	r3, [r3, #8]
 2730 001e 8022     		movs	r2, #128
 2731 0020 1340     		ands	r3, r2
 2732              		.loc 1 1820 6
 2733 0022 802B     		cmp	r3, #128
 2734 0024 23D1     		bne	.L139
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2735              		.loc 1 1822 5
 2736 0026 7B68     		ldr	r3, [r7, #4]
 2737 0028 1B68     		ldr	r3, [r3]
 2738 002a 9A68     		ldr	r2, [r3, #8]
 2739 002c 7B68     		ldr	r3, [r7, #4]
 2740 002e 1B68     		ldr	r3, [r3]
 2741 0030 8021     		movs	r1, #128
 2742 0032 8A43     		bics	r2, r1
 2743 0034 9A60     		str	r2, [r3, #8]
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 2744              		.loc 1 1825 14
 2745 0036 7B68     		ldr	r3, [r7, #4]
 2746 0038 9B6E     		ldr	r3, [r3, #104]
 2747              		.loc 1 1825 8
 2748 003a 002B     		cmp	r3, #0
 2749 003c 17D0     		beq	.L139
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2750              		.loc 1 1829 12
 2751 003e 7B68     		ldr	r3, [r7, #4]
 2752 0040 9B6E     		ldr	r3, [r3, #104]
 2753              		.loc 1 1829 40
 2754 0042 0022     		movs	r2, #0
 2755 0044 5A63     		str	r2, [r3, #52]
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 2756              		.loc 1 1831 11
 2757 0046 7B68     		ldr	r3, [r7, #4]
 2758 0048 9B6E     		ldr	r3, [r3, #104]
ARM GAS  /tmp/ccTcPcT8.s 			page 81


 2759 004a 1800     		movs	r0, r3
 2760 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2761 0050 031E     		subs	r3, r0, #0
 2762              		.loc 1 1831 10 discriminator 1
 2763 0052 0CD0     		beq	.L139
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 2764              		.loc 1 1833 13
 2765 0054 7B68     		ldr	r3, [r7, #4]
 2766 0056 9B6E     		ldr	r3, [r3, #104]
 2767 0058 1800     		movs	r0, r3
 2768 005a FFF7FEFF 		bl	HAL_DMA_GetError
 2769 005e 0300     		movs	r3, r0
 2770              		.loc 1 1833 12 discriminator 1
 2771 0060 202B     		cmp	r3, #32
 2772 0062 04D1     		bne	.L139
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2773              		.loc 1 1836 28
 2774 0064 7B68     		ldr	r3, [r7, #4]
 2775 0066 1022     		movs	r2, #16
 2776 0068 DA67     		str	r2, [r3, #124]
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2777              		.loc 1 1838 18
 2778 006a 0323     		movs	r3, #3
 2779 006c 07E0     		b	.L140
 2780              	.L139:
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Tx transfer counter */
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2781              		.loc 1 1845 22
 2782 006e 7B68     		ldr	r3, [r7, #4]
 2783 0070 5222     		movs	r2, #82
 2784 0072 0021     		movs	r1, #0
 2785 0074 9952     		strh	r1, [r3, r2]
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2786              		.loc 1 1849 17
 2787 0076 7B68     		ldr	r3, [r7, #4]
 2788 0078 2022     		movs	r2, #32
 2789 007a 5A67     		str	r2, [r3, #116]
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2790              		.loc 1 1851 10
 2791 007c 0023     		movs	r3, #0
 2792              	.L140:
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2793              		.loc 1 1852 1
 2794 007e 1800     		movs	r0, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 82


 2795 0080 BD46     		mov	sp, r7
 2796 0082 02B0     		add	sp, sp, #8
 2797              		@ sp needed
 2798 0084 80BD     		pop	{r7, pc}
 2799              		.cfi_endproc
 2800              	.LFE56:
 2802              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2803              		.align	1
 2804              		.global	HAL_UART_AbortReceive
 2805              		.syntax unified
 2806              		.code	16
 2807              		.thumb_func
 2809              	HAL_UART_AbortReceive:
 2810              	.LFB57:
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2811              		.loc 1 1867 1
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 8
 2814              		@ frame_needed = 1, uses_anonymous_args = 0
 2815 0000 80B5     		push	{r7, lr}
 2816              	.LCFI51:
 2817              		.cfi_def_cfa_offset 8
 2818              		.cfi_offset 7, -8
 2819              		.cfi_offset 14, -4
 2820 0002 82B0     		sub	sp, sp, #8
 2821              	.LCFI52:
 2822              		.cfi_def_cfa_offset 16
 2823 0004 00AF     		add	r7, sp, #0
 2824              	.LCFI53:
 2825              		.cfi_def_cfa_register 7
 2826 0006 7860     		str	r0, [r7, #4]
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2827              		.loc 1 1869 3
 2828 0008 7B68     		ldr	r3, [r7, #4]
 2829 000a 1B68     		ldr	r3, [r3]
 2830 000c 1A68     		ldr	r2, [r3]
 2831 000e 7B68     		ldr	r3, [r7, #4]
 2832 0010 1B68     		ldr	r3, [r3]
 2833 0012 2749     		ldr	r1, .L144
 2834 0014 0A40     		ands	r2, r1
 2835 0016 1A60     		str	r2, [r3]
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccTcPcT8.s 			page 83


 2836              		.loc 1 1870 3
 2837 0018 7B68     		ldr	r3, [r7, #4]
 2838 001a 1B68     		ldr	r3, [r3]
 2839 001c 9A68     		ldr	r2, [r3, #8]
 2840 001e 7B68     		ldr	r3, [r7, #4]
 2841 0020 1B68     		ldr	r3, [r3]
 2842 0022 0121     		movs	r1, #1
 2843 0024 8A43     		bics	r2, r1
 2844 0026 9A60     		str	r2, [r3, #8]
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2845              		.loc 1 1873 7
 2846 0028 7B68     		ldr	r3, [r7, #4]
 2847 002a 1B68     		ldr	r3, [r3]
 2848 002c 9B68     		ldr	r3, [r3, #8]
 2849 002e 4022     		movs	r2, #64
 2850 0030 1340     		ands	r3, r2
 2851              		.loc 1 1873 6
 2852 0032 402B     		cmp	r3, #64
 2853 0034 23D1     		bne	.L142
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2854              		.loc 1 1875 5
 2855 0036 7B68     		ldr	r3, [r7, #4]
 2856 0038 1B68     		ldr	r3, [r3]
 2857 003a 9A68     		ldr	r2, [r3, #8]
 2858 003c 7B68     		ldr	r3, [r7, #4]
 2859 003e 1B68     		ldr	r3, [r3]
 2860 0040 4021     		movs	r1, #64
 2861 0042 8A43     		bics	r2, r1
 2862 0044 9A60     		str	r2, [r3, #8]
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 2863              		.loc 1 1878 14
 2864 0046 7B68     		ldr	r3, [r7, #4]
 2865 0048 DB6E     		ldr	r3, [r3, #108]
 2866              		.loc 1 1878 8
 2867 004a 002B     		cmp	r3, #0
 2868 004c 17D0     		beq	.L142
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2869              		.loc 1 1882 12
 2870 004e 7B68     		ldr	r3, [r7, #4]
 2871 0050 DB6E     		ldr	r3, [r3, #108]
 2872              		.loc 1 1882 40
 2873 0052 0022     		movs	r2, #0
 2874 0054 5A63     		str	r2, [r3, #52]
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 2875              		.loc 1 1884 11
 2876 0056 7B68     		ldr	r3, [r7, #4]
 2877 0058 DB6E     		ldr	r3, [r3, #108]
 2878 005a 1800     		movs	r0, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 84


 2879 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2880 0060 031E     		subs	r3, r0, #0
 2881              		.loc 1 1884 10 discriminator 1
 2882 0062 0CD0     		beq	.L142
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 2883              		.loc 1 1886 13
 2884 0064 7B68     		ldr	r3, [r7, #4]
 2885 0066 DB6E     		ldr	r3, [r3, #108]
 2886 0068 1800     		movs	r0, r3
 2887 006a FFF7FEFF 		bl	HAL_DMA_GetError
 2888 006e 0300     		movs	r3, r0
 2889              		.loc 1 1886 12 discriminator 1
 2890 0070 202B     		cmp	r3, #32
 2891 0072 04D1     		bne	.L142
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Set error code to DMA */
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
 2892              		.loc 1 1889 28
 2893 0074 7B68     		ldr	r3, [r7, #4]
 2894 0076 1022     		movs	r2, #16
 2895 0078 DA67     		str	r2, [r3, #124]
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 2896              		.loc 1 1891 18
 2897 007a 0323     		movs	r3, #3
 2898 007c 13E0     		b	.L143
 2899              	.L142:
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Rx transfer counter */
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2900              		.loc 1 1898 22
 2901 007e 7B68     		ldr	r3, [r7, #4]
 2902 0080 5A22     		movs	r2, #90
 2903 0082 0021     		movs	r1, #0
 2904 0084 9952     		strh	r1, [r3, r2]
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2905              		.loc 1 1901 3
 2906 0086 7B68     		ldr	r3, [r7, #4]
 2907 0088 1B68     		ldr	r3, [r3]
 2908 008a 0F22     		movs	r2, #15
 2909 008c 1A62     		str	r2, [r3, #32]
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Discard the received data */
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2910              		.loc 1 1904 3
 2911 008e 7B68     		ldr	r3, [r7, #4]
 2912 0090 1B68     		ldr	r3, [r3]
 2913 0092 9A69     		ldr	r2, [r3, #24]
 2914 0094 7B68     		ldr	r3, [r7, #4]
 2915 0096 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 85


 2916 0098 0821     		movs	r1, #8
 2917 009a 0A43     		orrs	r2, r1
 2918 009c 9A61     		str	r2, [r3, #24]
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2919              		.loc 1 1907 18
 2920 009e 7B68     		ldr	r3, [r7, #4]
 2921 00a0 2022     		movs	r2, #32
 2922 00a2 9A67     		str	r2, [r3, #120]
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 2923              		.loc 1 1909 10
 2924 00a4 0023     		movs	r3, #0
 2925              	.L143:
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2926              		.loc 1 1910 1
 2927 00a6 1800     		movs	r0, r3
 2928 00a8 BD46     		mov	sp, r7
 2929 00aa 02B0     		add	sp, sp, #8
 2930              		@ sp needed
 2931 00ac 80BD     		pop	{r7, pc}
 2932              	.L145:
 2933 00ae C046     		.align	2
 2934              	.L144:
 2935 00b0 DFFEFFFF 		.word	-289
 2936              		.cfi_endproc
 2937              	.LFE57:
 2939              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2940              		.align	1
 2941              		.global	HAL_UART_Abort_IT
 2942              		.syntax unified
 2943              		.code	16
 2944              		.thumb_func
 2946              	HAL_UART_Abort_IT:
 2947              	.LFB58:
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2948              		.loc 1 1927 1
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 16
 2951              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccTcPcT8.s 			page 86


 2952 0000 80B5     		push	{r7, lr}
 2953              	.LCFI54:
 2954              		.cfi_def_cfa_offset 8
 2955              		.cfi_offset 7, -8
 2956              		.cfi_offset 14, -4
 2957 0002 84B0     		sub	sp, sp, #16
 2958              	.LCFI55:
 2959              		.cfi_def_cfa_offset 24
 2960 0004 00AF     		add	r7, sp, #0
 2961              	.LCFI56:
 2962              		.cfi_def_cfa_register 7
 2963 0006 7860     		str	r0, [r7, #4]
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2964              		.loc 1 1928 12
 2965 0008 0123     		movs	r3, #1
 2966 000a FB60     		str	r3, [r7, #12]
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable interrupts */
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2967              		.loc 1 1931 3
 2968 000c 7B68     		ldr	r3, [r7, #4]
 2969 000e 1B68     		ldr	r3, [r3]
 2970 0010 1A68     		ldr	r2, [r3]
 2971 0012 7B68     		ldr	r3, [r7, #4]
 2972 0014 1B68     		ldr	r3, [r3]
 2973 0016 5349     		ldr	r1, .L157
 2974 0018 0A40     		ands	r2, r1
 2975 001a 1A60     		str	r2, [r3]
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2976              		.loc 1 1932 3
 2977 001c 7B68     		ldr	r3, [r7, #4]
 2978 001e 1B68     		ldr	r3, [r3]
 2979 0020 9A68     		ldr	r2, [r3, #8]
 2980 0022 7B68     		ldr	r3, [r7, #4]
 2981 0024 1B68     		ldr	r3, [r3]
 2982 0026 0121     		movs	r1, #1
 2983 0028 8A43     		bics	r2, r1
 2984 002a 9A60     		str	r2, [r3, #8]
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      before any call to DMA Abort functions */
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 2985              		.loc 1 1937 12
 2986 002c 7B68     		ldr	r3, [r7, #4]
 2987 002e 9B6E     		ldr	r3, [r3, #104]
 2988              		.loc 1 1937 6
 2989 0030 002B     		cmp	r3, #0
 2990 0032 0FD0     		beq	.L147
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Otherwise, set it to NULL */
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2991              		.loc 1 1941 9
 2992 0034 7B68     		ldr	r3, [r7, #4]
 2993 0036 1B68     		ldr	r3, [r3]
 2994 0038 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccTcPcT8.s 			page 87


 2995 003a 8022     		movs	r2, #128
 2996 003c 1340     		ands	r3, r2
 2997              		.loc 1 1941 8
 2998 003e 802B     		cmp	r3, #128
 2999 0040 04D1     		bne	.L148
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 3000              		.loc 1 1943 12
 3001 0042 7B68     		ldr	r3, [r7, #4]
 3002 0044 9B6E     		ldr	r3, [r3, #104]
 3003              		.loc 1 1943 40
 3004 0046 484A     		ldr	r2, .L157+4
 3005 0048 5A63     		str	r2, [r3, #52]
 3006 004a 03E0     		b	.L147
 3007              	.L148:
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 3008              		.loc 1 1947 12
 3009 004c 7B68     		ldr	r3, [r7, #4]
 3010 004e 9B6E     		ldr	r3, [r3, #104]
 3011              		.loc 1 1947 40
 3012 0050 0022     		movs	r2, #0
 3013 0052 5A63     		str	r2, [r3, #52]
 3014              	.L147:
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 3015              		.loc 1 1951 12
 3016 0054 7B68     		ldr	r3, [r7, #4]
 3017 0056 DB6E     		ldr	r3, [r3, #108]
 3018              		.loc 1 1951 6
 3019 0058 002B     		cmp	r3, #0
 3020 005a 0FD0     		beq	.L149
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Otherwise, set it to NULL */
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3021              		.loc 1 1955 9
 3022 005c 7B68     		ldr	r3, [r7, #4]
 3023 005e 1B68     		ldr	r3, [r3]
 3024 0060 9B68     		ldr	r3, [r3, #8]
 3025 0062 4022     		movs	r2, #64
 3026 0064 1340     		ands	r3, r2
 3027              		.loc 1 1955 8
 3028 0066 402B     		cmp	r3, #64
 3029 0068 04D1     		bne	.L150
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 3030              		.loc 1 1957 12
 3031 006a 7B68     		ldr	r3, [r7, #4]
 3032 006c DB6E     		ldr	r3, [r3, #108]
 3033              		.loc 1 1957 40
 3034 006e 3F4A     		ldr	r2, .L157+8
 3035 0070 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/ccTcPcT8.s 			page 88


 3036 0072 03E0     		b	.L149
 3037              	.L150:
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 3038              		.loc 1 1961 12
 3039 0074 7B68     		ldr	r3, [r7, #4]
 3040 0076 DB6E     		ldr	r3, [r3, #108]
 3041              		.loc 1 1961 40
 3042 0078 0022     		movs	r2, #0
 3043 007a 5A63     		str	r2, [r3, #52]
 3044              	.L149:
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3045              		.loc 1 1966 7
 3046 007c 7B68     		ldr	r3, [r7, #4]
 3047 007e 1B68     		ldr	r3, [r3]
 3048 0080 9B68     		ldr	r3, [r3, #8]
 3049 0082 8022     		movs	r2, #128
 3050 0084 1340     		ands	r3, r2
 3051              		.loc 1 1966 6
 3052 0086 802B     		cmp	r3, #128
 3053 0088 19D1     		bne	.L151
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3054              		.loc 1 1969 5
 3055 008a 7B68     		ldr	r3, [r7, #4]
 3056 008c 1B68     		ldr	r3, [r3]
 3057 008e 9A68     		ldr	r2, [r3, #8]
 3058 0090 7B68     		ldr	r3, [r7, #4]
 3059 0092 1B68     		ldr	r3, [r3]
 3060 0094 8021     		movs	r1, #128
 3061 0096 8A43     		bics	r2, r1
 3062 0098 9A60     		str	r2, [r3, #8]
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3063              		.loc 1 1972 14
 3064 009a 7B68     		ldr	r3, [r7, #4]
 3065 009c 9B6E     		ldr	r3, [r3, #104]
 3066              		.loc 1 1972 8
 3067 009e 002B     		cmp	r3, #0
 3068 00a0 0DD0     		beq	.L151
1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA TX */
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3069              		.loc 1 1978 11
 3070 00a2 7B68     		ldr	r3, [r7, #4]
 3071 00a4 9B6E     		ldr	r3, [r3, #104]
ARM GAS  /tmp/ccTcPcT8.s 			page 89


 3072 00a6 1800     		movs	r0, r3
 3073 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3074 00ac 031E     		subs	r3, r0, #0
 3075              		.loc 1 1978 10 discriminator 1
 3076 00ae 04D0     		beq	.L152
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 3077              		.loc 1 1980 14
 3078 00b0 7B68     		ldr	r3, [r7, #4]
 3079 00b2 9B6E     		ldr	r3, [r3, #104]
 3080              		.loc 1 1980 42
 3081 00b4 0022     		movs	r2, #0
 3082 00b6 5A63     		str	r2, [r3, #52]
 3083 00b8 01E0     		b	.L151
 3084              	.L152:
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 0U;
 3085              		.loc 1 1984 19
 3086 00ba 0023     		movs	r3, #0
 3087 00bc FB60     		str	r3, [r7, #12]
 3088              	.L151:
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3089              		.loc 1 1990 7
 3090 00be 7B68     		ldr	r3, [r7, #4]
 3091 00c0 1B68     		ldr	r3, [r3]
 3092 00c2 9B68     		ldr	r3, [r3, #8]
 3093 00c4 4022     		movs	r2, #64
 3094 00c6 1340     		ands	r3, r2
 3095              		.loc 1 1990 6
 3096 00c8 402B     		cmp	r3, #64
 3097 00ca 1BD1     		bne	.L153
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3098              		.loc 1 1992 5
 3099 00cc 7B68     		ldr	r3, [r7, #4]
 3100 00ce 1B68     		ldr	r3, [r3]
 3101 00d0 9A68     		ldr	r2, [r3, #8]
 3102 00d2 7B68     		ldr	r3, [r7, #4]
 3103 00d4 1B68     		ldr	r3, [r3]
 3104 00d6 4021     		movs	r1, #64
 3105 00d8 8A43     		bics	r2, r1
 3106 00da 9A60     		str	r2, [r3, #8]
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3107              		.loc 1 1995 14
 3108 00dc 7B68     		ldr	r3, [r7, #4]
 3109 00de DB6E     		ldr	r3, [r3, #108]
 3110              		.loc 1 1995 8
 3111 00e0 002B     		cmp	r3, #0
ARM GAS  /tmp/ccTcPcT8.s 			page 90


 3112 00e2 0FD0     		beq	.L153
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA RX */
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3113              		.loc 1 2001 11
 3114 00e4 7B68     		ldr	r3, [r7, #4]
 3115 00e6 DB6E     		ldr	r3, [r3, #108]
 3116 00e8 1800     		movs	r0, r3
 3117 00ea FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3118 00ee 031E     		subs	r3, r0, #0
 3119              		.loc 1 2001 10 discriminator 1
 3120 00f0 06D0     		beq	.L154
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 3121              		.loc 1 2003 14
 3122 00f2 7B68     		ldr	r3, [r7, #4]
 3123 00f4 DB6E     		ldr	r3, [r3, #108]
 3124              		.loc 1 2003 42
 3125 00f6 0022     		movs	r2, #0
 3126 00f8 5A63     		str	r2, [r3, #52]
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 1U;
 3127              		.loc 1 2004 19
 3128 00fa 0123     		movs	r3, #1
 3129 00fc FB60     		str	r3, [r7, #12]
 3130 00fe 01E0     		b	.L153
 3131              	.L154:
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 0U;
 3132              		.loc 1 2008 19
 3133 0100 0023     		movs	r3, #0
 3134 0102 FB60     		str	r3, [r7, #12]
 3135              	.L153:
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (abortcplt == 1U)
 3136              		.loc 1 2014 6
 3137 0104 FB68     		ldr	r3, [r7, #12]
 3138 0106 012B     		cmp	r3, #1
 3139 0108 26D1     		bne	.L155
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U;
 3140              		.loc 1 2017 24
 3141 010a 7B68     		ldr	r3, [r7, #4]
 3142 010c 5222     		movs	r2, #82
 3143 010e 0021     		movs	r1, #0
 3144 0110 9952     		strh	r1, [r3, r2]
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 3145              		.loc 1 2018 24
ARM GAS  /tmp/ccTcPcT8.s 			page 91


 3146 0112 7B68     		ldr	r3, [r7, #4]
 3147 0114 5A22     		movs	r2, #90
 3148 0116 0021     		movs	r1, #0
 3149 0118 9952     		strh	r1, [r3, r2]
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear ISR function pointers */
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxISR = NULL;
 3150              		.loc 1 2021 18
 3151 011a 7B68     		ldr	r3, [r7, #4]
 3152 011c 0022     		movs	r2, #0
 3153 011e 1A66     		str	r2, [r3, #96]
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxISR = NULL;
 3154              		.loc 1 2022 18
 3155 0120 7B68     		ldr	r3, [r7, #4]
 3156 0122 0022     		movs	r2, #0
 3157 0124 5A66     		str	r2, [r3, #100]
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset errorCode */
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 3158              		.loc 1 2025 22
 3159 0126 7B68     		ldr	r3, [r7, #4]
 3160 0128 0022     		movs	r2, #0
 3161 012a DA67     		str	r2, [r3, #124]
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
 3162              		.loc 1 2028 5
 3163 012c 7B68     		ldr	r3, [r7, #4]
 3164 012e 1B68     		ldr	r3, [r3]
 3165 0130 0F22     		movs	r2, #15
 3166 0132 1A62     		str	r2, [r3, #32]
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Discard the received data */
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 3167              		.loc 1 2032 5
 3168 0134 7B68     		ldr	r3, [r7, #4]
 3169 0136 1B68     		ldr	r3, [r3]
 3170 0138 9A69     		ldr	r2, [r3, #24]
 3171 013a 7B68     		ldr	r3, [r7, #4]
 3172 013c 1B68     		ldr	r3, [r3]
 3173 013e 0821     		movs	r1, #8
 3174 0140 0A43     		orrs	r2, r1
 3175 0142 9A61     		str	r2, [r3, #24]
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 3176              		.loc 1 2035 20
 3177 0144 7B68     		ldr	r3, [r7, #4]
 3178 0146 2022     		movs	r2, #32
 3179 0148 5A67     		str	r2, [r3, #116]
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3180              		.loc 1 2036 20
 3181 014a 7B68     		ldr	r3, [r7, #4]
 3182 014c 2022     		movs	r2, #32
 3183 014e 9A67     		str	r2, [r3, #120]
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 92


2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call registered Abort complete callback */
2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 3184              		.loc 1 2044 5
 3185 0150 7B68     		ldr	r3, [r7, #4]
 3186 0152 1800     		movs	r0, r3
 3187 0154 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3188              	.L155:
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 3189              		.loc 1 2048 10
 3190 0158 0023     		movs	r3, #0
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3191              		.loc 1 2049 1
 3192 015a 1800     		movs	r0, r3
 3193 015c BD46     		mov	sp, r7
 3194 015e 04B0     		add	sp, sp, #16
 3195              		@ sp needed
 3196 0160 80BD     		pop	{r7, pc}
 3197              	.L158:
 3198 0162 C046     		.align	2
 3199              	.L157:
 3200 0164 1FFEFFFF 		.word	-481
 3201 0168 00000000 		.word	UART_DMATxAbortCallback
 3202 016c 00000000 		.word	UART_DMARxAbortCallback
 3203              		.cfi_endproc
 3204              	.LFE58:
 3206              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3207              		.align	1
 3208              		.global	HAL_UART_AbortTransmit_IT
 3209              		.syntax unified
 3210              		.code	16
 3211              		.thumb_func
 3213              	HAL_UART_AbortTransmit_IT:
 3214              	.LFB59:
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccTcPcT8.s 			page 93


2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3215              		.loc 1 2066 1
 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 8
 3218              		@ frame_needed = 1, uses_anonymous_args = 0
 3219 0000 80B5     		push	{r7, lr}
 3220              	.LCFI57:
 3221              		.cfi_def_cfa_offset 8
 3222              		.cfi_offset 7, -8
 3223              		.cfi_offset 14, -4
 3224 0002 82B0     		sub	sp, sp, #8
 3225              	.LCFI58:
 3226              		.cfi_def_cfa_offset 16
 3227 0004 00AF     		add	r7, sp, #0
 3228              	.LCFI59:
 3229              		.cfi_def_cfa_register 7
 3230 0006 7860     		str	r0, [r7, #4]
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable interrupts */
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3231              		.loc 1 2068 3
 3232 0008 7B68     		ldr	r3, [r7, #4]
 3233 000a 1B68     		ldr	r3, [r3]
 3234 000c 1A68     		ldr	r2, [r3]
 3235 000e 7B68     		ldr	r3, [r7, #4]
 3236 0010 1B68     		ldr	r3, [r3]
 3237 0012 C021     		movs	r1, #192
 3238 0014 8A43     		bics	r2, r1
 3239 0016 1A60     		str	r2, [r3]
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 3240              		.loc 1 2071 7
 3241 0018 7B68     		ldr	r3, [r7, #4]
 3242 001a 1B68     		ldr	r3, [r3]
 3243 001c 9B68     		ldr	r3, [r3, #8]
 3244 001e 8022     		movs	r2, #128
 3245 0020 1340     		ands	r3, r2
 3246              		.loc 1 2071 6
 3247 0022 802B     		cmp	r3, #128
 3248 0024 2DD1     		bne	.L160
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 3249              		.loc 1 2073 5
 3250 0026 7B68     		ldr	r3, [r7, #4]
 3251 0028 1B68     		ldr	r3, [r3]
 3252 002a 9A68     		ldr	r2, [r3, #8]
 3253 002c 7B68     		ldr	r3, [r7, #4]
 3254 002e 1B68     		ldr	r3, [r3]
 3255 0030 8021     		movs	r1, #128
 3256 0032 8A43     		bics	r2, r1
 3257 0034 9A60     		str	r2, [r3, #8]
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx != NULL)
 3258              		.loc 1 2076 14
 3259 0036 7B68     		ldr	r3, [r7, #4]
 3260 0038 9B6E     		ldr	r3, [r3, #104]
ARM GAS  /tmp/ccTcPcT8.s 			page 94


 3261              		.loc 1 2076 8
 3262 003a 002B     		cmp	r3, #0
 3263 003c 12D0     		beq	.L161
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 3264              		.loc 1 2080 12
 3265 003e 7B68     		ldr	r3, [r7, #4]
 3266 0040 9B6E     		ldr	r3, [r3, #104]
 3267              		.loc 1 2080 40
 3268 0042 194A     		ldr	r2, .L164
 3269 0044 5A63     		str	r2, [r3, #52]
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA TX */
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 3270              		.loc 1 2083 11
 3271 0046 7B68     		ldr	r3, [r7, #4]
 3272 0048 9B6E     		ldr	r3, [r3, #104]
 3273 004a 1800     		movs	r0, r3
 3274 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3275 0050 031E     		subs	r3, r0, #0
 3276              		.loc 1 2083 10 discriminator 1
 3277 0052 24D0     		beq	.L162
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 3278              		.loc 1 2086 14
 3279 0054 7B68     		ldr	r3, [r7, #4]
 3280 0056 9B6E     		ldr	r3, [r3, #104]
 3281              		.loc 1 2086 22
 3282 0058 5A6B     		ldr	r2, [r3, #52]
 3283              		.loc 1 2086 47
 3284 005a 7B68     		ldr	r3, [r7, #4]
 3285 005c 9B6E     		ldr	r3, [r3, #104]
 3286              		.loc 1 2086 9
 3287 005e 1800     		movs	r0, r3
 3288 0060 9047     		blx	r2
 3289              	.LVL0:
 3290 0062 1CE0     		b	.L162
 3291              	.L161:
2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Reset Tx transfer counter */
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount = 0U;
 3292              		.loc 1 2092 26
 3293 0064 7B68     		ldr	r3, [r7, #4]
 3294 0066 5222     		movs	r2, #82
 3295 0068 0021     		movs	r1, #0
 3296 006a 9952     		strh	r1, [r3, r2]
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear TxISR function pointers */
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxISR = NULL;
 3297              		.loc 1 2095 20
 3298 006c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 95


 3299 006e 0022     		movs	r2, #0
 3300 0070 5A66     		str	r2, [r3, #100]
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 3301              		.loc 1 2098 21
 3302 0072 7B68     		ldr	r3, [r7, #4]
 3303 0074 2022     		movs	r2, #32
 3304 0076 5A67     		str	r2, [r3, #116]
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 3305              		.loc 1 2106 7
 3306 0078 7B68     		ldr	r3, [r7, #4]
 3307 007a 1800     		movs	r0, r3
 3308 007c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3309 0080 0DE0     		b	.L162
 3310              	.L160:
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Tx transfer counter */
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U;
 3311              		.loc 1 2113 24
 3312 0082 7B68     		ldr	r3, [r7, #4]
 3313 0084 5222     		movs	r2, #82
 3314 0086 0021     		movs	r1, #0
 3315 0088 9952     		strh	r1, [r3, r2]
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear TxISR function pointers */
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxISR = NULL;
 3316              		.loc 1 2116 18
 3317 008a 7B68     		ldr	r3, [r7, #4]
 3318 008c 0022     		movs	r2, #0
 3319 008e 5A66     		str	r2, [r3, #100]
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 3320              		.loc 1 2120 19
 3321 0090 7B68     		ldr	r3, [r7, #4]
 3322 0092 2022     		movs	r2, #32
 3323 0094 5A67     		str	r2, [r3, #116]
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
ARM GAS  /tmp/ccTcPcT8.s 			page 96


2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 3324              		.loc 1 2128 5
 3325 0096 7B68     		ldr	r3, [r7, #4]
 3326 0098 1800     		movs	r0, r3
 3327 009a FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3328              	.L162:
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 3329              		.loc 1 2132 10
 3330 009e 0023     		movs	r3, #0
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3331              		.loc 1 2133 1
 3332 00a0 1800     		movs	r0, r3
 3333 00a2 BD46     		mov	sp, r7
 3334 00a4 02B0     		add	sp, sp, #8
 3335              		@ sp needed
 3336 00a6 80BD     		pop	{r7, pc}
 3337              	.L165:
 3338              		.align	2
 3339              	.L164:
 3340 00a8 00000000 		.word	UART_DMATxOnlyAbortCallback
 3341              		.cfi_endproc
 3342              	.LFE59:
 3344              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3345              		.align	1
 3346              		.global	HAL_UART_AbortReceive_IT
 3347              		.syntax unified
 3348              		.code	16
 3349              		.thumb_func
 3351              	HAL_UART_AbortReceive_IT:
 3352              	.LFB60:
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3353              		.loc 1 2150 1
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 8
 3356              		@ frame_needed = 1, uses_anonymous_args = 0
 3357 0000 80B5     		push	{r7, lr}
 3358              	.LCFI60:
 3359              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTcPcT8.s 			page 97


 3360              		.cfi_offset 7, -8
 3361              		.cfi_offset 14, -4
 3362 0002 82B0     		sub	sp, sp, #8
 3363              	.LCFI61:
 3364              		.cfi_def_cfa_offset 16
 3365 0004 00AF     		add	r7, sp, #0
 3366              	.LCFI62:
 3367              		.cfi_def_cfa_register 7
 3368 0006 7860     		str	r0, [r7, #4]
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3369              		.loc 1 2152 3
 3370 0008 7B68     		ldr	r3, [r7, #4]
 3371 000a 1B68     		ldr	r3, [r3]
 3372 000c 1A68     		ldr	r2, [r3]
 3373 000e 7B68     		ldr	r3, [r7, #4]
 3374 0010 1B68     		ldr	r3, [r3]
 3375 0012 3149     		ldr	r1, .L171
 3376 0014 0A40     		ands	r2, r1
 3377 0016 1A60     		str	r2, [r3]
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3378              		.loc 1 2153 3
 3379 0018 7B68     		ldr	r3, [r7, #4]
 3380 001a 1B68     		ldr	r3, [r3]
 3381 001c 9A68     		ldr	r2, [r3, #8]
 3382 001e 7B68     		ldr	r3, [r7, #4]
 3383 0020 1B68     		ldr	r3, [r3]
 3384 0022 0121     		movs	r1, #1
 3385 0024 8A43     		bics	r2, r1
 3386 0026 9A60     		str	r2, [r3, #8]
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3387              		.loc 1 2156 7
 3388 0028 7B68     		ldr	r3, [r7, #4]
 3389 002a 1B68     		ldr	r3, [r3]
 3390 002c 9B68     		ldr	r3, [r3, #8]
 3391 002e 4022     		movs	r2, #64
 3392 0030 1340     		ands	r3, r2
 3393              		.loc 1 2156 6
 3394 0032 402B     		cmp	r3, #64
 3395 0034 39D1     		bne	.L167
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3396              		.loc 1 2158 5
 3397 0036 7B68     		ldr	r3, [r7, #4]
 3398 0038 1B68     		ldr	r3, [r3]
 3399 003a 9A68     		ldr	r2, [r3, #8]
 3400 003c 7B68     		ldr	r3, [r7, #4]
 3401 003e 1B68     		ldr	r3, [r3]
 3402 0040 4021     		movs	r1, #64
 3403 0042 8A43     		bics	r2, r1
 3404 0044 9A60     		str	r2, [r3, #8]
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx != NULL)
 3405              		.loc 1 2161 14
ARM GAS  /tmp/ccTcPcT8.s 			page 98


 3406 0046 7B68     		ldr	r3, [r7, #4]
 3407 0048 DB6E     		ldr	r3, [r3, #108]
 3408              		.loc 1 2161 8
 3409 004a 002B     		cmp	r3, #0
 3410 004c 12D0     		beq	.L168
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 3411              		.loc 1 2165 12
 3412 004e 7B68     		ldr	r3, [r7, #4]
 3413 0050 DB6E     		ldr	r3, [r3, #108]
 3414              		.loc 1 2165 40
 3415 0052 224A     		ldr	r2, .L171+4
 3416 0054 5A63     		str	r2, [r3, #52]
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA RX */
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3417              		.loc 1 2168 11
 3418 0056 7B68     		ldr	r3, [r7, #4]
 3419 0058 DB6E     		ldr	r3, [r3, #108]
 3420 005a 1800     		movs	r0, r3
 3421 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3422 0060 031E     		subs	r3, r0, #0
 3423              		.loc 1 2168 10 discriminator 1
 3424 0062 34D0     		beq	.L169
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3425              		.loc 1 2171 14
 3426 0064 7B68     		ldr	r3, [r7, #4]
 3427 0066 DB6E     		ldr	r3, [r3, #108]
 3428              		.loc 1 2171 22
 3429 0068 5A6B     		ldr	r2, [r3, #52]
 3430              		.loc 1 2171 47
 3431 006a 7B68     		ldr	r3, [r7, #4]
 3432 006c DB6E     		ldr	r3, [r3, #108]
 3433              		.loc 1 2171 9
 3434 006e 1800     		movs	r0, r3
 3435 0070 9047     		blx	r2
 3436              	.LVL1:
 3437 0072 2CE0     		b	.L169
 3438              	.L168:
2172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Reset Rx transfer counter */
2177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxXferCount = 0U;
 3439              		.loc 1 2177 26
 3440 0074 7B68     		ldr	r3, [r7, #4]
 3441 0076 5A22     		movs	r2, #90
 3442 0078 0021     		movs	r1, #0
 3443 007a 9952     		strh	r1, [r3, r2]
2178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear RxISR function pointer */
2180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
ARM GAS  /tmp/ccTcPcT8.s 			page 99


 3444              		.loc 1 2180 25
 3445 007c 7B68     		ldr	r3, [r7, #4]
 3446 007e 0022     		movs	r2, #0
 3447 0080 5A65     		str	r2, [r3, #84]
2181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
 3448              		.loc 1 2183 7
 3449 0082 7B68     		ldr	r3, [r7, #4]
 3450 0084 1B68     		ldr	r3, [r3]
 3451 0086 0F22     		movs	r2, #15
 3452 0088 1A62     		str	r2, [r3, #32]
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Discard the received data */
2186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 3453              		.loc 1 2186 7
 3454 008a 7B68     		ldr	r3, [r7, #4]
 3455 008c 1B68     		ldr	r3, [r3]
 3456 008e 9A69     		ldr	r2, [r3, #24]
 3457 0090 7B68     		ldr	r3, [r7, #4]
 3458 0092 1B68     		ldr	r3, [r3]
 3459 0094 0821     		movs	r1, #8
 3460 0096 0A43     		orrs	r2, r1
 3461 0098 9A61     		str	r2, [r3, #24]
2187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 3462              		.loc 1 2189 22
 3463 009a 7B68     		ldr	r3, [r7, #4]
 3464 009c 2022     		movs	r2, #32
 3465 009e 9A67     		str	r2, [r3, #120]
2190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 3466              		.loc 1 2197 7
 3467 00a0 7B68     		ldr	r3, [r7, #4]
 3468 00a2 1800     		movs	r0, r3
 3469 00a4 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3470 00a8 11E0     		b	.L169
 3471              	.L167:
2198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Rx transfer counter */
2204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 3472              		.loc 1 2204 24
 3473 00aa 7B68     		ldr	r3, [r7, #4]
 3474 00ac 5A22     		movs	r2, #90
 3475 00ae 0021     		movs	r1, #0
 3476 00b0 9952     		strh	r1, [r3, r2]
ARM GAS  /tmp/ccTcPcT8.s 			page 100


2205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear RxISR function pointer */
2207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
 3477              		.loc 1 2207 23
 3478 00b2 7B68     		ldr	r3, [r7, #4]
 3479 00b4 0022     		movs	r2, #0
 3480 00b6 5A65     		str	r2, [r3, #84]
2208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
 3481              		.loc 1 2210 5
 3482 00b8 7B68     		ldr	r3, [r7, #4]
 3483 00ba 1B68     		ldr	r3, [r3]
 3484 00bc 0F22     		movs	r2, #15
 3485 00be 1A62     		str	r2, [r3, #32]
2211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3486              		.loc 1 2213 20
 3487 00c0 7B68     		ldr	r3, [r7, #4]
 3488 00c2 2022     		movs	r2, #32
 3489 00c4 9A67     		str	r2, [r3, #120]
2214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 3490              		.loc 1 2221 5
 3491 00c6 7B68     		ldr	r3, [r7, #4]
 3492 00c8 1800     		movs	r0, r3
 3493 00ca FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3494              	.L169:
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 3495              		.loc 1 2225 10
 3496 00ce 0023     		movs	r3, #0
2226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3497              		.loc 1 2226 1
 3498 00d0 1800     		movs	r0, r3
 3499 00d2 BD46     		mov	sp, r7
 3500 00d4 02B0     		add	sp, sp, #8
 3501              		@ sp needed
 3502 00d6 80BD     		pop	{r7, pc}
 3503              	.L172:
 3504              		.align	2
 3505              	.L171:
 3506 00d8 DFFEFFFF 		.word	-289
 3507 00dc 00000000 		.word	UART_DMARxOnlyAbortCallback
 3508              		.cfi_endproc
 3509              	.LFE60:
 3511              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 3512              		.align	1
ARM GAS  /tmp/ccTcPcT8.s 			page 101


 3513              		.global	HAL_UART_IRQHandler
 3514              		.syntax unified
 3515              		.code	16
 3516              		.thumb_func
 3518              	HAL_UART_IRQHandler:
 3519              	.LFB61:
2227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Handle UART interrupt request.
2230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3520              		.loc 1 2234 1
 3521              		.cfi_startproc
 3522              		@ args = 0, pretend = 0, frame = 32
 3523              		@ frame_needed = 1, uses_anonymous_args = 0
 3524 0000 80B5     		push	{r7, lr}
 3525              	.LCFI63:
 3526              		.cfi_def_cfa_offset 8
 3527              		.cfi_offset 7, -8
 3528              		.cfi_offset 14, -4
 3529 0002 88B0     		sub	sp, sp, #32
 3530              	.LCFI64:
 3531              		.cfi_def_cfa_offset 40
 3532 0004 00AF     		add	r7, sp, #0
 3533              	.LCFI65:
 3534              		.cfi_def_cfa_register 7
 3535 0006 7860     		str	r0, [r7, #4]
2235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 3536              		.loc 1 2235 25
 3537 0008 7B68     		ldr	r3, [r7, #4]
 3538 000a 1B68     		ldr	r3, [r3]
 3539              		.loc 1 2235 12
 3540 000c DB69     		ldr	r3, [r3, #28]
 3541 000e FB61     		str	r3, [r7, #28]
2236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3542              		.loc 1 2236 25
 3543 0010 7B68     		ldr	r3, [r7, #4]
 3544 0012 1B68     		ldr	r3, [r3]
 3545              		.loc 1 2236 12
 3546 0014 1B68     		ldr	r3, [r3]
 3547 0016 BB61     		str	r3, [r7, #24]
2237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 3548              		.loc 1 2237 25
 3549 0018 7B68     		ldr	r3, [r7, #4]
 3550 001a 1B68     		ldr	r3, [r3]
 3551              		.loc 1 2237 12
 3552 001c 9B68     		ldr	r3, [r3, #8]
 3553 001e 7B61     		str	r3, [r7, #20]
2238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t errorflags;
2240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t errorcode;
2241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If no error occurs */
2243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | 
ARM GAS  /tmp/ccTcPcT8.s 			page 102


 3554              		.loc 1 2243 14
 3555 0020 FB69     		ldr	r3, [r7, #28]
 3556 0022 894A     		ldr	r2, .L198
 3557 0024 1340     		ands	r3, r2
 3558 0026 3B61     		str	r3, [r7, #16]
2244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (errorflags == 0U)
 3559              		.loc 1 2244 6
 3560 0028 3B69     		ldr	r3, [r7, #16]
 3561 002a 002B     		cmp	r3, #0
 3562 002c 12D1     		bne	.L174
2245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE) != 0U)
 3563              		.loc 1 2247 20
 3564 002e FB69     		ldr	r3, [r7, #28]
 3565 0030 2022     		movs	r2, #32
 3566 0032 1340     		ands	r3, r2
 3567              		.loc 1 2247 8
 3568 0034 0ED0     		beq	.L174
2248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
 3569              		.loc 1 2248 21
 3570 0036 BB69     		ldr	r3, [r7, #24]
 3571 0038 2022     		movs	r2, #32
 3572 003a 1340     		ands	r3, r2
 3573              		.loc 1 2248 9
 3574 003c 0AD0     		beq	.L174
2249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (huart->RxISR != NULL)
 3575              		.loc 1 2250 16
 3576 003e 7B68     		ldr	r3, [r7, #4]
 3577 0040 1B6E     		ldr	r3, [r3, #96]
 3578              		.loc 1 2250 10
 3579 0042 002B     		cmp	r3, #0
 3580 0044 00D1     		bne	.LCB3015
 3581 0046 F6E0     		b	.L194	@long jump
 3582              	.LCB3015:
2251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxISR(huart);
 3583              		.loc 1 2252 14
 3584 0048 7B68     		ldr	r3, [r7, #4]
 3585 004a 1B6E     		ldr	r3, [r3, #96]
 3586              		.loc 1 2252 9
 3587 004c 7A68     		ldr	r2, [r7, #4]
 3588 004e 1000     		movs	r0, r2
 3589 0050 9847     		blx	r3
 3590              	.LVL2:
2253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
 3591              		.loc 1 2254 7
 3592 0052 F0E0     		b	.L194
 3593              	.L174:
2255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If some errors occur */
2259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((errorflags != 0U)
 3594              		.loc 1 2259 6
ARM GAS  /tmp/ccTcPcT8.s 			page 103


 3595 0054 3B69     		ldr	r3, [r7, #16]
 3596 0056 002B     		cmp	r3, #0
 3597 0058 00D1     		bne	.LCB3027
 3598 005a CDE0     		b	.L177	@long jump
 3599              	.LCB3027:
2260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
 3600              		.loc 1 2260 20
 3601 005c 7B69     		ldr	r3, [r7, #20]
 3602 005e 0122     		movs	r2, #1
 3603 0060 1340     		ands	r3, r2
 3604              		.loc 1 2260 7
 3605 0062 05D1     		bne	.L178
2261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 3606              		.loc 1 2261 23
 3607 0064 BA69     		ldr	r2, [r7, #24]
 3608 0066 9023     		movs	r3, #144
 3609 0068 5B00     		lsls	r3, r3, #1
 3610 006a 1340     		ands	r3, r2
 3611              		.loc 1 2261 11
 3612 006c 00D1     		bne	.LCB3038
 3613 006e C3E0     		b	.L177	@long jump
 3614              	.LCB3038:
 3615              	.L178:
2262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 3616              		.loc 1 2264 20
 3617 0070 FB69     		ldr	r3, [r7, #28]
 3618 0072 0122     		movs	r2, #1
 3619 0074 1340     		ands	r3, r2
 3620              		.loc 1 2264 8
 3621 0076 0ED0     		beq	.L179
 3622              		.loc 1 2264 55 discriminator 1
 3623 0078 BA69     		ldr	r2, [r7, #24]
 3624 007a 8023     		movs	r3, #128
 3625 007c 5B00     		lsls	r3, r3, #1
 3626 007e 1340     		ands	r3, r2
 3627              		.loc 1 2264 43 discriminator 1
 3628 0080 09D0     		beq	.L179
2265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 3629              		.loc 1 2266 7
 3630 0082 7B68     		ldr	r3, [r7, #4]
 3631 0084 1B68     		ldr	r3, [r3]
 3632 0086 0122     		movs	r2, #1
 3633 0088 1A62     		str	r2, [r3, #32]
2267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3634              		.loc 1 2268 12
 3635 008a 7B68     		ldr	r3, [r7, #4]
 3636 008c DB6F     		ldr	r3, [r3, #124]
 3637              		.loc 1 2268 24
 3638 008e 0122     		movs	r2, #1
 3639 0090 1A43     		orrs	r2, r3
 3640 0092 7B68     		ldr	r3, [r7, #4]
 3641 0094 DA67     		str	r2, [r3, #124]
 3642              	.L179:
ARM GAS  /tmp/ccTcPcT8.s 			page 104


2269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 3643              		.loc 1 2272 20
 3644 0096 FB69     		ldr	r3, [r7, #28]
 3645 0098 0222     		movs	r2, #2
 3646 009a 1340     		ands	r3, r2
 3647              		.loc 1 2272 8
 3648 009c 0DD0     		beq	.L180
 3649              		.loc 1 2272 55 discriminator 1
 3650 009e 7B69     		ldr	r3, [r7, #20]
 3651 00a0 0122     		movs	r2, #1
 3652 00a2 1340     		ands	r3, r2
 3653              		.loc 1 2272 43 discriminator 1
 3654 00a4 09D0     		beq	.L180
2273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 3655              		.loc 1 2274 7
 3656 00a6 7B68     		ldr	r3, [r7, #4]
 3657 00a8 1B68     		ldr	r3, [r3]
 3658 00aa 0222     		movs	r2, #2
 3659 00ac 1A62     		str	r2, [r3, #32]
2275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3660              		.loc 1 2276 12
 3661 00ae 7B68     		ldr	r3, [r7, #4]
 3662 00b0 DB6F     		ldr	r3, [r3, #124]
 3663              		.loc 1 2276 24
 3664 00b2 0422     		movs	r2, #4
 3665 00b4 1A43     		orrs	r2, r3
 3666 00b6 7B68     		ldr	r3, [r7, #4]
 3667 00b8 DA67     		str	r2, [r3, #124]
 3668              	.L180:
2277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 3669              		.loc 1 2280 20
 3670 00ba FB69     		ldr	r3, [r7, #28]
 3671 00bc 0422     		movs	r2, #4
 3672 00be 1340     		ands	r3, r2
 3673              		.loc 1 2280 8
 3674 00c0 0DD0     		beq	.L181
 3675              		.loc 1 2280 55 discriminator 1
 3676 00c2 7B69     		ldr	r3, [r7, #20]
 3677 00c4 0122     		movs	r2, #1
 3678 00c6 1340     		ands	r3, r2
 3679              		.loc 1 2280 43 discriminator 1
 3680 00c8 09D0     		beq	.L181
2281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 3681              		.loc 1 2282 7
 3682 00ca 7B68     		ldr	r3, [r7, #4]
 3683 00cc 1B68     		ldr	r3, [r3]
 3684 00ce 0422     		movs	r2, #4
 3685 00d0 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccTcPcT8.s 			page 105


2283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3686              		.loc 1 2284 12
 3687 00d2 7B68     		ldr	r3, [r7, #4]
 3688 00d4 DB6F     		ldr	r3, [r3, #124]
 3689              		.loc 1 2284 24
 3690 00d6 0222     		movs	r2, #2
 3691 00d8 1A43     		orrs	r2, r3
 3692 00da 7B68     		ldr	r3, [r7, #4]
 3693 00dc DA67     		str	r2, [r3, #124]
 3694              	.L181:
2285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
2288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
 3695              		.loc 1 2288 20
 3696 00de FB69     		ldr	r3, [r7, #28]
 3697 00e0 0822     		movs	r2, #8
 3698 00e2 1340     		ands	r3, r2
 3699              		.loc 1 2288 8
 3700 00e4 11D0     		beq	.L182
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 3701              		.loc 1 2289 22
 3702 00e6 BB69     		ldr	r3, [r7, #24]
 3703 00e8 2022     		movs	r2, #32
 3704 00ea 1340     		ands	r3, r2
 3705              		.loc 1 2289 9
 3706 00ec 03D1     		bne	.L183
2290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 3707              		.loc 1 2290 22
 3708 00ee 7B69     		ldr	r3, [r7, #20]
 3709 00f0 0122     		movs	r2, #1
 3710 00f2 1340     		ands	r3, r2
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 3711              		.loc 1 2289 49 discriminator 1
 3712 00f4 09D0     		beq	.L182
 3713              	.L183:
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 3714              		.loc 1 2292 7
 3715 00f6 7B68     		ldr	r3, [r7, #4]
 3716 00f8 1B68     		ldr	r3, [r3]
 3717 00fa 0822     		movs	r2, #8
 3718 00fc 1A62     		str	r2, [r3, #32]
2293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3719              		.loc 1 2294 12
 3720 00fe 7B68     		ldr	r3, [r7, #4]
 3721 0100 DB6F     		ldr	r3, [r3, #124]
 3722              		.loc 1 2294 24
 3723 0102 0822     		movs	r2, #8
 3724 0104 1A43     		orrs	r2, r3
 3725 0106 7B68     		ldr	r3, [r7, #4]
 3726 0108 DA67     		str	r2, [r3, #124]
 3727              	.L182:
2295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccTcPcT8.s 			page 106


2297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART Receiver Timeout interrupt occurred ---------------------------------*/
2298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 3728              		.loc 1 2298 20
 3729 010a FA69     		ldr	r2, [r7, #28]
 3730 010c 8023     		movs	r3, #128
 3731 010e 1B01     		lsls	r3, r3, #4
 3732 0110 1340     		ands	r3, r2
 3733              		.loc 1 2298 8
 3734 0112 0FD0     		beq	.L184
 3735              		.loc 1 2298 57 discriminator 1
 3736 0114 BA69     		ldr	r2, [r7, #24]
 3737 0116 8023     		movs	r3, #128
 3738 0118 DB04     		lsls	r3, r3, #19
 3739 011a 1340     		ands	r3, r2
 3740              		.loc 1 2298 45 discriminator 1
 3741 011c 0AD0     		beq	.L184
2299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 3742              		.loc 1 2300 7
 3743 011e 7B68     		ldr	r3, [r7, #4]
 3744 0120 1B68     		ldr	r3, [r3]
 3745 0122 8022     		movs	r2, #128
 3746 0124 1201     		lsls	r2, r2, #4
 3747 0126 1A62     		str	r2, [r3, #32]
2301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_RTO;
 3748              		.loc 1 2302 12
 3749 0128 7B68     		ldr	r3, [r7, #4]
 3750 012a DB6F     		ldr	r3, [r3, #124]
 3751              		.loc 1 2302 24
 3752 012c 2022     		movs	r2, #32
 3753 012e 1A43     		orrs	r2, r3
 3754 0130 7B68     		ldr	r3, [r7, #4]
 3755 0132 DA67     		str	r2, [r3, #124]
 3756              	.L184:
2303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call UART Error Call back function if need be ----------------------------*/
2306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 3757              		.loc 1 2306 14
 3758 0134 7B68     		ldr	r3, [r7, #4]
 3759 0136 DB6F     		ldr	r3, [r3, #124]
 3760              		.loc 1 2306 8
 3761 0138 002B     		cmp	r3, #0
 3762 013a 00D1     		bne	.LCB3163
 3763 013c 7DE0     		b	.L195	@long jump
 3764              	.LCB3163:
2307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART in mode Receiver --------------------------------------------------*/
2309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE) != 0U)
 3765              		.loc 1 2309 22
 3766 013e FB69     		ldr	r3, [r7, #28]
 3767 0140 2022     		movs	r2, #32
 3768 0142 1340     		ands	r3, r2
 3769              		.loc 1 2309 10
 3770 0144 0CD0     		beq	.L186
2310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
ARM GAS  /tmp/ccTcPcT8.s 			page 107


 3771              		.loc 1 2310 23
 3772 0146 BB69     		ldr	r3, [r7, #24]
 3773 0148 2022     		movs	r2, #32
 3774 014a 1340     		ands	r3, r2
 3775              		.loc 1 2310 11
 3776 014c 08D0     		beq	.L186
2311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (huart->RxISR != NULL)
 3777              		.loc 1 2312 18
 3778 014e 7B68     		ldr	r3, [r7, #4]
 3779 0150 1B6E     		ldr	r3, [r3, #96]
 3780              		.loc 1 2312 12
 3781 0152 002B     		cmp	r3, #0
 3782 0154 04D0     		beq	.L186
2313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
2314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->RxISR(huart);
 3783              		.loc 1 2314 16
 3784 0156 7B68     		ldr	r3, [r7, #4]
 3785 0158 1B6E     		ldr	r3, [r3, #96]
 3786              		.loc 1 2314 11
 3787 015a 7A68     		ldr	r2, [r7, #4]
 3788 015c 1000     		movs	r0, r2
 3789 015e 9847     		blx	r3
 3790              	.LVL3:
 3791              	.L186:
2315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
2316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* If Error is to be considered as blocking :
2319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           - Receiver Timeout error in Reception
2320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           - Overrun error in Reception
2321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           - any error occurs in DMA mode reception
2322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       */
2323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       errorcode = huart->ErrorCode;
 3792              		.loc 1 2323 17
 3793 0160 7B68     		ldr	r3, [r7, #4]
 3794 0162 DB6F     		ldr	r3, [r3, #124]
 3795 0164 FB60     		str	r3, [r7, #12]
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 3796              		.loc 1 2324 12
 3797 0166 7B68     		ldr	r3, [r7, #4]
 3798 0168 1B68     		ldr	r3, [r3]
 3799 016a 9B68     		ldr	r3, [r3, #8]
 3800 016c 4022     		movs	r2, #64
 3801 016e 1340     		ands	r3, r2
 3802              		.loc 1 2324 10
 3803 0170 402B     		cmp	r3, #64
 3804 0172 03D0     		beq	.L187
2325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 3805              		.loc 1 2325 23
 3806 0174 FB68     		ldr	r3, [r7, #12]
 3807 0176 2822     		movs	r2, #40
 3808 0178 1340     		ands	r3, r2
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 3809              		.loc 1 2324 66 discriminator 1
 3810 017a 33D0     		beq	.L188
 3811              	.L187:
ARM GAS  /tmp/ccTcPcT8.s 			page 108


2326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3812              		.loc 1 2330 9
 3813 017c 7B68     		ldr	r3, [r7, #4]
 3814 017e 1800     		movs	r0, r3
 3815 0180 FFF7FEFF 		bl	UART_EndRxTransfer
2331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3816              		.loc 1 2333 13
 3817 0184 7B68     		ldr	r3, [r7, #4]
 3818 0186 1B68     		ldr	r3, [r3]
 3819 0188 9B68     		ldr	r3, [r3, #8]
 3820 018a 4022     		movs	r2, #64
 3821 018c 1340     		ands	r3, r2
 3822              		.loc 1 2333 12
 3823 018e 402B     		cmp	r3, #64
 3824 0190 23D1     		bne	.L189
2334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
2335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3825              		.loc 1 2335 11
 3826 0192 7B68     		ldr	r3, [r7, #4]
 3827 0194 1B68     		ldr	r3, [r3]
 3828 0196 9A68     		ldr	r2, [r3, #8]
 3829 0198 7B68     		ldr	r3, [r7, #4]
 3830 019a 1B68     		ldr	r3, [r3]
 3831 019c 4021     		movs	r1, #64
 3832 019e 8A43     		bics	r2, r1
 3833 01a0 9A60     		str	r2, [r3, #8]
2336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           if (huart->hdmarx != NULL)
 3834              		.loc 1 2338 20
 3835 01a2 7B68     		ldr	r3, [r7, #4]
 3836 01a4 DB6E     		ldr	r3, [r3, #108]
 3837              		.loc 1 2338 14
 3838 01a6 002B     		cmp	r3, #0
 3839 01a8 12D0     		beq	.L190
2339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           {
2340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3840              		.loc 1 2342 18
 3841 01aa 7B68     		ldr	r3, [r7, #4]
 3842 01ac DB6E     		ldr	r3, [r3, #108]
 3843              		.loc 1 2342 46
 3844 01ae 274A     		ldr	r2, .L198+4
 3845 01b0 5A63     		str	r2, [r3, #52]
2343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Abort DMA RX */
2345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3846              		.loc 1 2345 17
 3847 01b2 7B68     		ldr	r3, [r7, #4]
 3848 01b4 DB6E     		ldr	r3, [r3, #108]
ARM GAS  /tmp/ccTcPcT8.s 			page 109


 3849 01b6 1800     		movs	r0, r3
 3850 01b8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3851 01bc 031E     		subs	r3, r0, #0
 3852              		.loc 1 2345 16 discriminator 1
 3853 01be 19D0     		beq	.L196
2346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             {
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3854              		.loc 1 2348 20
 3855 01c0 7B68     		ldr	r3, [r7, #4]
 3856 01c2 DB6E     		ldr	r3, [r3, #108]
 3857              		.loc 1 2348 28
 3858 01c4 5A6B     		ldr	r2, [r3, #52]
 3859              		.loc 1 2348 53
 3860 01c6 7B68     		ldr	r3, [r7, #4]
 3861 01c8 DB6E     		ldr	r3, [r3, #108]
 3862              		.loc 1 2348 15
 3863 01ca 1800     		movs	r0, r3
 3864 01cc 9047     		blx	r2
 3865              	.LVL4:
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
 3866              		.loc 1 2333 12
 3867 01ce 11E0     		b	.L196
 3868              	.L190:
2349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             }
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           }
2351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           else
2352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           {
2353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Call user error callback */
2354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /*Call registered error callback*/
2356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             huart->ErrorCallback(huart);
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /*Call legacy weak error callback*/
2359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3869              		.loc 1 2359 13
 3870 01d0 7B68     		ldr	r3, [r7, #4]
 3871 01d2 1800     		movs	r0, r3
 3872 01d4 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
 3873              		.loc 1 2333 12
 3874 01d8 0CE0     		b	.L196
 3875              	.L189:
2360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           }
2363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
2364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         else
2365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
2366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Call user error callback */
2367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /*Call registered error callback*/
2369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCallback(huart);
2370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /*Call legacy weak error callback*/
2372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3876              		.loc 1 2372 11
ARM GAS  /tmp/ccTcPcT8.s 			page 110


 3877 01da 7B68     		ldr	r3, [r7, #4]
 3878 01dc 1800     		movs	r0, r3
 3879 01de FFF7FEFF 		bl	HAL_UART_ErrorCallback
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
 3880              		.loc 1 2333 12
 3881 01e2 07E0     		b	.L196
 3882              	.L188:
2373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
2375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
2377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Error is notified to user through user error callback */
2380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /*Call registered error callback*/
2382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCallback(huart);
2383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /*Call legacy weak error callback*/
2385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3883              		.loc 1 2385 9
 3884 01e4 7B68     		ldr	r3, [r7, #4]
 3885 01e6 1800     		movs	r0, r3
 3886 01e8 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3887              		.loc 1 2387 26
 3888 01ec 7B68     		ldr	r3, [r7, #4]
 3889 01ee 0022     		movs	r2, #0
 3890 01f0 DA67     		str	r2, [r3, #124]
2388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 3891              		.loc 1 2390 5
 3892 01f2 22E0     		b	.L195
 3893              	.L196:
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
 3894              		.loc 1 2333 12
 3895 01f4 C046     		nop
 3896              		.loc 1 2390 5
 3897 01f6 20E0     		b	.L195
 3898              	.L177:
2391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   } /* End if some error occurs */
2393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
2396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
2397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
2399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART Rx state is not reset as a reception process might be ongoing.
2401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        If UART handle state fields need to be reset to READY, this could be done in Wakeup callback
2402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call registered Wakeup Callback */
2405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->WakeupCallback(huart);
ARM GAS  /tmp/ccTcPcT8.s 			page 111


2406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
2407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call legacy weak Wakeup Callback */
2408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
2409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
2411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE) != 0U)
 3899              		.loc 1 2415 18
 3900 01f8 FB69     		ldr	r3, [r7, #28]
 3901 01fa 8022     		movs	r2, #128
 3902 01fc 1340     		ands	r3, r2
 3903              		.loc 1 2415 6
 3904 01fe 0DD0     		beq	.L192
2416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
 3905              		.loc 1 2416 19
 3906 0200 BB69     		ldr	r3, [r7, #24]
 3907 0202 8022     		movs	r2, #128
 3908 0204 1340     		ands	r3, r2
 3909              		.loc 1 2416 7
 3910 0206 09D0     		beq	.L192
2417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->TxISR != NULL)
 3911              		.loc 1 2418 14
 3912 0208 7B68     		ldr	r3, [r7, #4]
 3913 020a 5B6E     		ldr	r3, [r3, #100]
 3914              		.loc 1 2418 8
 3915 020c 002B     		cmp	r3, #0
 3916 020e 16D0     		beq	.L197
2419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxISR(huart);
 3917              		.loc 1 2420 12
 3918 0210 7B68     		ldr	r3, [r7, #4]
 3919 0212 5B6E     		ldr	r3, [r3, #100]
 3920              		.loc 1 2420 7
 3921 0214 7A68     		ldr	r2, [r7, #4]
 3922 0216 1000     		movs	r0, r2
 3923 0218 9847     		blx	r3
 3924              	.LVL5:
2421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 3925              		.loc 1 2422 5
 3926 021a 10E0     		b	.L197
 3927              	.L192:
2423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 3928              		.loc 1 2426 18
 3929 021c FB69     		ldr	r3, [r7, #28]
 3930 021e 4022     		movs	r2, #64
 3931 0220 1340     		ands	r3, r2
 3932              		.loc 1 2426 6
 3933 0222 0DD0     		beq	.L173
 3934              		.loc 1 2426 53 discriminator 1
ARM GAS  /tmp/ccTcPcT8.s 			page 112


 3935 0224 BB69     		ldr	r3, [r7, #24]
 3936 0226 4022     		movs	r2, #64
 3937 0228 1340     		ands	r3, r2
 3938              		.loc 1 2426 41 discriminator 1
 3939 022a 09D0     		beq	.L173
2427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3940              		.loc 1 2428 5
 3941 022c 7B68     		ldr	r3, [r7, #4]
 3942 022e 1800     		movs	r0, r3
 3943 0230 FFF7FEFF 		bl	UART_EndTransmit_IT
2429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 3944              		.loc 1 2429 5
 3945 0234 04E0     		b	.L173
 3946              	.L194:
2254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 3947              		.loc 1 2254 7
 3948 0236 C046     		nop
 3949 0238 02E0     		b	.L173
 3950              	.L195:
2390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3951              		.loc 1 2390 5
 3952 023a C046     		nop
 3953 023c 00E0     		b	.L173
 3954              	.L197:
2422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3955              		.loc 1 2422 5
 3956 023e C046     		nop
 3957              	.L173:
2430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3958              		.loc 1 2432 1
 3959 0240 BD46     		mov	sp, r7
 3960 0242 08B0     		add	sp, sp, #32
 3961              		@ sp needed
 3962 0244 80BD     		pop	{r7, pc}
 3963              	.L199:
 3964 0246 C046     		.align	2
 3965              	.L198:
 3966 0248 0F080000 		.word	2063
 3967 024c 00000000 		.word	UART_DMAAbortOnError
 3968              		.cfi_endproc
 3969              	.LFE61:
 3971              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3972              		.align	1
 3973              		.weak	HAL_UART_TxCpltCallback
 3974              		.syntax unified
 3975              		.code	16
 3976              		.thumb_func
 3978              	HAL_UART_TxCpltCallback:
 3979              	.LFB62:
2433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccTcPcT8.s 			page 113


2438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 3980              		.loc 1 2440 1
 3981              		.cfi_startproc
 3982              		@ args = 0, pretend = 0, frame = 8
 3983              		@ frame_needed = 1, uses_anonymous_args = 0
 3984 0000 80B5     		push	{r7, lr}
 3985              	.LCFI66:
 3986              		.cfi_def_cfa_offset 8
 3987              		.cfi_offset 7, -8
 3988              		.cfi_offset 14, -4
 3989 0002 82B0     		sub	sp, sp, #8
 3990              	.LCFI67:
 3991              		.cfi_def_cfa_offset 16
 3992 0004 00AF     		add	r7, sp, #0
 3993              	.LCFI68:
 3994              		.cfi_def_cfa_register 7
 3995 0006 7860     		str	r0, [r7, #4]
2441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3996              		.loc 1 2447 1
 3997 0008 C046     		nop
 3998 000a BD46     		mov	sp, r7
 3999 000c 02B0     		add	sp, sp, #8
 4000              		@ sp needed
 4001 000e 80BD     		pop	{r7, pc}
 4002              		.cfi_endproc
 4003              	.LFE62:
 4005              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 4006              		.align	1
 4007              		.weak	HAL_UART_TxHalfCpltCallback
 4008              		.syntax unified
 4009              		.code	16
 4010              		.thumb_func
 4012              	HAL_UART_TxHalfCpltCallback:
 4013              	.LFB63:
2448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4014              		.loc 1 2455 1
 4015              		.cfi_startproc
 4016              		@ args = 0, pretend = 0, frame = 8
 4017              		@ frame_needed = 1, uses_anonymous_args = 0
 4018 0000 80B5     		push	{r7, lr}
 4019              	.LCFI69:
 4020              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTcPcT8.s 			page 114


 4021              		.cfi_offset 7, -8
 4022              		.cfi_offset 14, -4
 4023 0002 82B0     		sub	sp, sp, #8
 4024              	.LCFI70:
 4025              		.cfi_def_cfa_offset 16
 4026 0004 00AF     		add	r7, sp, #0
 4027              	.LCFI71:
 4028              		.cfi_def_cfa_register 7
 4029 0006 7860     		str	r0, [r7, #4]
2456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4030              		.loc 1 2462 1
 4031 0008 C046     		nop
 4032 000a BD46     		mov	sp, r7
 4033 000c 02B0     		add	sp, sp, #8
 4034              		@ sp needed
 4035 000e 80BD     		pop	{r7, pc}
 4036              		.cfi_endproc
 4037              	.LFE63:
 4039              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 4040              		.align	1
 4041              		.weak	HAL_UART_RxCpltCallback
 4042              		.syntax unified
 4043              		.code	16
 4044              		.thumb_func
 4046              	HAL_UART_RxCpltCallback:
 4047              	.LFB64:
2463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4048              		.loc 1 2470 1
 4049              		.cfi_startproc
 4050              		@ args = 0, pretend = 0, frame = 8
 4051              		@ frame_needed = 1, uses_anonymous_args = 0
 4052 0000 80B5     		push	{r7, lr}
 4053              	.LCFI72:
 4054              		.cfi_def_cfa_offset 8
 4055              		.cfi_offset 7, -8
 4056              		.cfi_offset 14, -4
 4057 0002 82B0     		sub	sp, sp, #8
 4058              	.LCFI73:
 4059              		.cfi_def_cfa_offset 16
 4060 0004 00AF     		add	r7, sp, #0
 4061              	.LCFI74:
 4062              		.cfi_def_cfa_register 7
 4063 0006 7860     		str	r0, [r7, #4]
2471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccTcPcT8.s 			page 115


2472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4064              		.loc 1 2477 1
 4065 0008 C046     		nop
 4066 000a BD46     		mov	sp, r7
 4067 000c 02B0     		add	sp, sp, #8
 4068              		@ sp needed
 4069 000e 80BD     		pop	{r7, pc}
 4070              		.cfi_endproc
 4071              	.LFE64:
 4073              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 4074              		.align	1
 4075              		.weak	HAL_UART_RxHalfCpltCallback
 4076              		.syntax unified
 4077              		.code	16
 4078              		.thumb_func
 4080              	HAL_UART_RxHalfCpltCallback:
 4081              	.LFB65:
2478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4082              		.loc 1 2485 1
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 8
 4085              		@ frame_needed = 1, uses_anonymous_args = 0
 4086 0000 80B5     		push	{r7, lr}
 4087              	.LCFI75:
 4088              		.cfi_def_cfa_offset 8
 4089              		.cfi_offset 7, -8
 4090              		.cfi_offset 14, -4
 4091 0002 82B0     		sub	sp, sp, #8
 4092              	.LCFI76:
 4093              		.cfi_def_cfa_offset 16
 4094 0004 00AF     		add	r7, sp, #0
 4095              	.LCFI77:
 4096              		.cfi_def_cfa_register 7
 4097 0006 7860     		str	r0, [r7, #4]
2486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4098              		.loc 1 2492 1
 4099 0008 C046     		nop
 4100 000a BD46     		mov	sp, r7
 4101 000c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccTcPcT8.s 			page 116


 4102              		@ sp needed
 4103 000e 80BD     		pop	{r7, pc}
 4104              		.cfi_endproc
 4105              	.LFE65:
 4107              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 4108              		.align	1
 4109              		.weak	HAL_UART_ErrorCallback
 4110              		.syntax unified
 4111              		.code	16
 4112              		.thumb_func
 4114              	HAL_UART_ErrorCallback:
 4115              	.LFB66:
2493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART error callback.
2496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4116              		.loc 1 2500 1
 4117              		.cfi_startproc
 4118              		@ args = 0, pretend = 0, frame = 8
 4119              		@ frame_needed = 1, uses_anonymous_args = 0
 4120 0000 80B5     		push	{r7, lr}
 4121              	.LCFI78:
 4122              		.cfi_def_cfa_offset 8
 4123              		.cfi_offset 7, -8
 4124              		.cfi_offset 14, -4
 4125 0002 82B0     		sub	sp, sp, #8
 4126              	.LCFI79:
 4127              		.cfi_def_cfa_offset 16
 4128 0004 00AF     		add	r7, sp, #0
 4129              	.LCFI80:
 4130              		.cfi_def_cfa_register 7
 4131 0006 7860     		str	r0, [r7, #4]
2501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4132              		.loc 1 2507 1
 4133 0008 C046     		nop
 4134 000a BD46     		mov	sp, r7
 4135 000c 02B0     		add	sp, sp, #8
 4136              		@ sp needed
 4137 000e 80BD     		pop	{r7, pc}
 4138              		.cfi_endproc
 4139              	.LFE66:
 4141              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 4142              		.align	1
 4143              		.weak	HAL_UART_AbortCpltCallback
 4144              		.syntax unified
 4145              		.code	16
 4146              		.thumb_func
ARM GAS  /tmp/ccTcPcT8.s 			page 117


 4148              	HAL_UART_AbortCpltCallback:
 4149              	.LFB67:
2508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4150              		.loc 1 2515 1
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 8
 4153              		@ frame_needed = 1, uses_anonymous_args = 0
 4154 0000 80B5     		push	{r7, lr}
 4155              	.LCFI81:
 4156              		.cfi_def_cfa_offset 8
 4157              		.cfi_offset 7, -8
 4158              		.cfi_offset 14, -4
 4159 0002 82B0     		sub	sp, sp, #8
 4160              	.LCFI82:
 4161              		.cfi_def_cfa_offset 16
 4162 0004 00AF     		add	r7, sp, #0
 4163              	.LCFI83:
 4164              		.cfi_def_cfa_register 7
 4165 0006 7860     		str	r0, [r7, #4]
2516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4166              		.loc 1 2522 1
 4167 0008 C046     		nop
 4168 000a BD46     		mov	sp, r7
 4169 000c 02B0     		add	sp, sp, #8
 4170              		@ sp needed
 4171 000e 80BD     		pop	{r7, pc}
 4172              		.cfi_endproc
 4173              	.LFE67:
 4175              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 4176              		.align	1
 4177              		.weak	HAL_UART_AbortTransmitCpltCallback
 4178              		.syntax unified
 4179              		.code	16
 4180              		.thumb_func
 4182              	HAL_UART_AbortTransmitCpltCallback:
 4183              	.LFB68:
2523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
ARM GAS  /tmp/ccTcPcT8.s 			page 118


 4184              		.loc 1 2530 1
 4185              		.cfi_startproc
 4186              		@ args = 0, pretend = 0, frame = 8
 4187              		@ frame_needed = 1, uses_anonymous_args = 0
 4188 0000 80B5     		push	{r7, lr}
 4189              	.LCFI84:
 4190              		.cfi_def_cfa_offset 8
 4191              		.cfi_offset 7, -8
 4192              		.cfi_offset 14, -4
 4193 0002 82B0     		sub	sp, sp, #8
 4194              	.LCFI85:
 4195              		.cfi_def_cfa_offset 16
 4196 0004 00AF     		add	r7, sp, #0
 4197              	.LCFI86:
 4198              		.cfi_def_cfa_register 7
 4199 0006 7860     		str	r0, [r7, #4]
2531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4200              		.loc 1 2537 1
 4201 0008 C046     		nop
 4202 000a BD46     		mov	sp, r7
 4203 000c 02B0     		add	sp, sp, #8
 4204              		@ sp needed
 4205 000e 80BD     		pop	{r7, pc}
 4206              		.cfi_endproc
 4207              	.LFE68:
 4209              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 4210              		.align	1
 4211              		.weak	HAL_UART_AbortReceiveCpltCallback
 4212              		.syntax unified
 4213              		.code	16
 4214              		.thumb_func
 4216              	HAL_UART_AbortReceiveCpltCallback:
 4217              	.LFB69:
2538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4218              		.loc 1 2545 1
 4219              		.cfi_startproc
 4220              		@ args = 0, pretend = 0, frame = 8
 4221              		@ frame_needed = 1, uses_anonymous_args = 0
 4222 0000 80B5     		push	{r7, lr}
 4223              	.LCFI87:
 4224              		.cfi_def_cfa_offset 8
 4225              		.cfi_offset 7, -8
 4226              		.cfi_offset 14, -4
 4227 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccTcPcT8.s 			page 119


 4228              	.LCFI88:
 4229              		.cfi_def_cfa_offset 16
 4230 0004 00AF     		add	r7, sp, #0
 4231              	.LCFI89:
 4232              		.cfi_def_cfa_register 7
 4233 0006 7860     		str	r0, [r7, #4]
2546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
2548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
2552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4234              		.loc 1 2552 1
 4235 0008 C046     		nop
 4236 000a BD46     		mov	sp, r7
 4237 000c 02B0     		add	sp, sp, #8
 4238              		@ sp needed
 4239 000e 80BD     		pop	{r7, pc}
 4240              		.cfi_endproc
 4241              	.LFE69:
 4243              		.section	.text.HAL_UART_ReceiverTimeout_Config,"ax",%progbits
 4244              		.align	1
 4245              		.global	HAL_UART_ReceiverTimeout_Config
 4246              		.syntax unified
 4247              		.code	16
 4248              		.thumb_func
 4250              	HAL_UART_ReceiverTimeout_Config:
 4251              	.LFB70:
2553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief   UART control functions
2560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
2561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
2562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
2563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
2565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
2566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on th
2568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
2569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
2570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
2580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
ARM GAS  /tmp/ccTcPcT8.s 			page 120


2581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Update on the fly the receiver timeout value in RTOR register.
2585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
2588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                     value must be less or equal to 0x0FFFFFFFF.
2589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
2592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4252              		.loc 1 2592 1
 4253              		.cfi_startproc
 4254              		@ args = 0, pretend = 0, frame = 8
 4255              		@ frame_needed = 1, uses_anonymous_args = 0
 4256 0000 80B5     		push	{r7, lr}
 4257              	.LCFI90:
 4258              		.cfi_def_cfa_offset 8
 4259              		.cfi_offset 7, -8
 4260              		.cfi_offset 14, -4
 4261 0002 82B0     		sub	sp, sp, #8
 4262              	.LCFI91:
 4263              		.cfi_def_cfa_offset 16
 4264 0004 00AF     		add	r7, sp, #0
 4265              	.LCFI92:
 4266              		.cfi_def_cfa_register 7
 4267 0006 7860     		str	r0, [r7, #4]
 4268 0008 3960     		str	r1, [r7]
2593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
2594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 4269              		.loc 1 2594 3
 4270 000a 7B68     		ldr	r3, [r7, #4]
 4271 000c 1B68     		ldr	r3, [r3]
 4272 000e 5B69     		ldr	r3, [r3, #20]
 4273 0010 1B0E     		lsrs	r3, r3, #24
 4274 0012 1906     		lsls	r1, r3, #24
 4275 0014 7B68     		ldr	r3, [r7, #4]
 4276 0016 1B68     		ldr	r3, [r3]
 4277 0018 3A68     		ldr	r2, [r7]
 4278 001a 0A43     		orrs	r2, r1
 4279 001c 5A61     		str	r2, [r3, #20]
2595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4280              		.loc 1 2595 1
 4281 001e C046     		nop
 4282 0020 BD46     		mov	sp, r7
 4283 0022 02B0     		add	sp, sp, #8
 4284              		@ sp needed
 4285 0024 80BD     		pop	{r7, pc}
 4286              		.cfi_endproc
 4287              	.LFE70:
 4289              		.section	.text.HAL_UART_EnableReceiverTimeout,"ax",%progbits
 4290              		.align	1
 4291              		.global	HAL_UART_EnableReceiverTimeout
 4292              		.syntax unified
 4293              		.code	16
 4294              		.thumb_func
ARM GAS  /tmp/ccTcPcT8.s 			page 121


 4296              	HAL_UART_EnableReceiverTimeout:
 4297              	.LFB71:
2596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART receiver timeout feature.
2599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
2604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4298              		.loc 1 2604 1
 4299              		.cfi_startproc
 4300              		@ args = 0, pretend = 0, frame = 8
 4301              		@ frame_needed = 1, uses_anonymous_args = 0
 4302 0000 80B5     		push	{r7, lr}
 4303              	.LCFI93:
 4304              		.cfi_def_cfa_offset 8
 4305              		.cfi_offset 7, -8
 4306              		.cfi_offset 14, -4
 4307 0002 82B0     		sub	sp, sp, #8
 4308              	.LCFI94:
 4309              		.cfi_def_cfa_offset 16
 4310 0004 00AF     		add	r7, sp, #0
 4311              	.LCFI95:
 4312              		.cfi_def_cfa_register 7
 4313 0006 7860     		str	r0, [r7, #4]
2605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 4314              		.loc 1 2605 12
 4315 0008 7B68     		ldr	r3, [r7, #4]
 4316 000a 5B6F     		ldr	r3, [r3, #116]
 4317              		.loc 1 2605 6
 4318 000c 202B     		cmp	r3, #32
 4319 000e 1FD1     		bne	.L210
2606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
2608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 4320              		.loc 1 2608 5
 4321 0010 7B68     		ldr	r3, [r7, #4]
 4322 0012 7022     		movs	r2, #112
 4323 0014 9B5C     		ldrb	r3, [r3, r2]
 4324 0016 012B     		cmp	r3, #1
 4325 0018 01D1     		bne	.L211
 4326              		.loc 1 2608 5 is_stmt 0 discriminator 1
 4327 001a 0223     		movs	r3, #2
 4328              		.loc 1 2608 5
 4329 001c 19E0     		b	.L212
 4330              	.L211:
 4331              		.loc 1 2608 5 discriminator 2
 4332 001e 7B68     		ldr	r3, [r7, #4]
 4333 0020 7022     		movs	r2, #112
 4334 0022 0121     		movs	r1, #1
 4335 0024 9954     		strb	r1, [r3, r2]
2609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
 4336              		.loc 1 2610 19 is_stmt 1
 4337 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 122


 4338 0028 2422     		movs	r2, #36
 4339 002a 5A67     		str	r2, [r3, #116]
2611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the USART RTOEN bit */
2613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 4340              		.loc 1 2613 5
 4341 002c 7B68     		ldr	r3, [r7, #4]
 4342 002e 1B68     		ldr	r3, [r3]
 4343 0030 5A68     		ldr	r2, [r3, #4]
 4344 0032 7B68     		ldr	r3, [r7, #4]
 4345 0034 1B68     		ldr	r3, [r3]
 4346 0036 8021     		movs	r1, #128
 4347 0038 0904     		lsls	r1, r1, #16
 4348 003a 0A43     		orrs	r2, r1
 4349 003c 5A60     		str	r2, [r3, #4]
2614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4350              		.loc 1 2615 19
 4351 003e 7B68     		ldr	r3, [r7, #4]
 4352 0040 2022     		movs	r2, #32
 4353 0042 5A67     		str	r2, [r3, #116]
2616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
2618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 4354              		.loc 1 2618 5
 4355 0044 7B68     		ldr	r3, [r7, #4]
 4356 0046 7022     		movs	r2, #112
 4357 0048 0021     		movs	r1, #0
 4358 004a 9954     		strb	r1, [r3, r2]
2619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 4359              		.loc 1 2620 12
 4360 004c 0023     		movs	r3, #0
 4361 004e 00E0     		b	.L212
 4362              	.L210:
2621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4363              		.loc 1 2624 12
 4364 0050 0223     		movs	r3, #2
 4365              	.L212:
2625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4366              		.loc 1 2626 1
 4367 0052 1800     		movs	r0, r3
 4368 0054 BD46     		mov	sp, r7
 4369 0056 02B0     		add	sp, sp, #8
 4370              		@ sp needed
 4371 0058 80BD     		pop	{r7, pc}
 4372              		.cfi_endproc
 4373              	.LFE71:
 4375              		.section	.text.HAL_UART_DisableReceiverTimeout,"ax",%progbits
 4376              		.align	1
 4377              		.global	HAL_UART_DisableReceiverTimeout
 4378              		.syntax unified
 4379              		.code	16
ARM GAS  /tmp/ccTcPcT8.s 			page 123


 4380              		.thumb_func
 4382              	HAL_UART_DisableReceiverTimeout:
 4383              	.LFB72:
2627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Disable the UART receiver timeout feature.
2630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
2635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4384              		.loc 1 2635 1
 4385              		.cfi_startproc
 4386              		@ args = 0, pretend = 0, frame = 8
 4387              		@ frame_needed = 1, uses_anonymous_args = 0
 4388 0000 80B5     		push	{r7, lr}
 4389              	.LCFI96:
 4390              		.cfi_def_cfa_offset 8
 4391              		.cfi_offset 7, -8
 4392              		.cfi_offset 14, -4
 4393 0002 82B0     		sub	sp, sp, #8
 4394              	.LCFI97:
 4395              		.cfi_def_cfa_offset 16
 4396 0004 00AF     		add	r7, sp, #0
 4397              	.LCFI98:
 4398              		.cfi_def_cfa_register 7
 4399 0006 7860     		str	r0, [r7, #4]
2636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 4400              		.loc 1 2636 12
 4401 0008 7B68     		ldr	r3, [r7, #4]
 4402 000a 5B6F     		ldr	r3, [r3, #116]
 4403              		.loc 1 2636 6
 4404 000c 202B     		cmp	r3, #32
 4405 000e 1ED1     		bne	.L214
2637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
2639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 4406              		.loc 1 2639 5
 4407 0010 7B68     		ldr	r3, [r7, #4]
 4408 0012 7022     		movs	r2, #112
 4409 0014 9B5C     		ldrb	r3, [r3, r2]
 4410 0016 012B     		cmp	r3, #1
 4411 0018 01D1     		bne	.L215
 4412              		.loc 1 2639 5 is_stmt 0 discriminator 1
 4413 001a 0223     		movs	r3, #2
 4414              		.loc 1 2639 5
 4415 001c 18E0     		b	.L216
 4416              	.L215:
 4417              		.loc 1 2639 5 discriminator 2
 4418 001e 7B68     		ldr	r3, [r7, #4]
 4419 0020 7022     		movs	r2, #112
 4420 0022 0121     		movs	r1, #1
 4421 0024 9954     		strb	r1, [r3, r2]
2640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
 4422              		.loc 1 2641 19 is_stmt 1
ARM GAS  /tmp/ccTcPcT8.s 			page 124


 4423 0026 7B68     		ldr	r3, [r7, #4]
 4424 0028 2422     		movs	r2, #36
 4425 002a 5A67     		str	r2, [r3, #116]
2642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the USART RTOEN bit */
2644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 4426              		.loc 1 2644 5
 4427 002c 7B68     		ldr	r3, [r7, #4]
 4428 002e 1B68     		ldr	r3, [r3]
 4429 0030 5A68     		ldr	r2, [r3, #4]
 4430 0032 7B68     		ldr	r3, [r7, #4]
 4431 0034 1B68     		ldr	r3, [r3]
 4432 0036 0849     		ldr	r1, .L217
 4433 0038 0A40     		ands	r2, r1
 4434 003a 5A60     		str	r2, [r3, #4]
2645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 4435              		.loc 1 2646 19
 4436 003c 7B68     		ldr	r3, [r7, #4]
 4437 003e 2022     		movs	r2, #32
 4438 0040 5A67     		str	r2, [r3, #116]
2647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
2649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 4439              		.loc 1 2649 5
 4440 0042 7B68     		ldr	r3, [r7, #4]
 4441 0044 7022     		movs	r2, #112
 4442 0046 0021     		movs	r1, #0
 4443 0048 9954     		strb	r1, [r3, r2]
2650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 4444              		.loc 1 2651 12
 4445 004a 0023     		movs	r3, #0
 4446 004c 00E0     		b	.L216
 4447              	.L214:
2652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4448              		.loc 1 2655 12
 4449 004e 0223     		movs	r3, #2
 4450              	.L216:
2656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4451              		.loc 1 2657 1
 4452 0050 1800     		movs	r0, r3
 4453 0052 BD46     		mov	sp, r7
 4454 0054 02B0     		add	sp, sp, #8
 4455              		@ sp needed
 4456 0056 80BD     		pop	{r7, pc}
 4457              	.L218:
 4458              		.align	2
 4459              	.L217:
 4460 0058 FFFF7FFF 		.word	-8388609
 4461              		.cfi_endproc
 4462              	.LFE72:
 4464              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
ARM GAS  /tmp/ccTcPcT8.s 			page 125


 4465              		.align	1
 4466              		.global	HAL_MultiProcessor_EnableMuteMode
 4467              		.syntax unified
 4468              		.code	16
 4469              		.thumb_func
 4471              	HAL_MultiProcessor_EnableMuteMode:
 4472              	.LFB73:
2658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4473              		.loc 1 2666 1
 4474              		.cfi_startproc
 4475              		@ args = 0, pretend = 0, frame = 8
 4476              		@ frame_needed = 1, uses_anonymous_args = 0
 4477 0000 80B5     		push	{r7, lr}
 4478              	.LCFI99:
 4479              		.cfi_def_cfa_offset 8
 4480              		.cfi_offset 7, -8
 4481              		.cfi_offset 14, -4
 4482 0002 82B0     		sub	sp, sp, #8
 4483              	.LCFI100:
 4484              		.cfi_def_cfa_offset 16
 4485 0004 00AF     		add	r7, sp, #0
 4486              	.LCFI101:
 4487              		.cfi_def_cfa_register 7
 4488 0006 7860     		str	r0, [r7, #4]
2667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 4489              		.loc 1 2667 3
 4490 0008 7B68     		ldr	r3, [r7, #4]
 4491 000a 7022     		movs	r2, #112
 4492 000c 9B5C     		ldrb	r3, [r3, r2]
 4493 000e 012B     		cmp	r3, #1
 4494 0010 01D1     		bne	.L220
 4495              		.loc 1 2667 3 is_stmt 0 discriminator 1
 4496 0012 0223     		movs	r3, #2
 4497              		.loc 1 2667 3
 4498 0014 17E0     		b	.L221
 4499              	.L220:
 4500              		.loc 1 2667 3 discriminator 2
 4501 0016 7B68     		ldr	r3, [r7, #4]
 4502 0018 7022     		movs	r2, #112
 4503 001a 0121     		movs	r1, #1
 4504 001c 9954     		strb	r1, [r3, r2]
2668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4505              		.loc 1 2669 17 is_stmt 1
 4506 001e 7B68     		ldr	r3, [r7, #4]
 4507 0020 2422     		movs	r2, #36
 4508 0022 5A67     		str	r2, [r3, #116]
2670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
ARM GAS  /tmp/ccTcPcT8.s 			page 126


2672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 4509              		.loc 1 2672 3
 4510 0024 7B68     		ldr	r3, [r7, #4]
 4511 0026 1B68     		ldr	r3, [r3]
 4512 0028 1A68     		ldr	r2, [r3]
 4513 002a 7B68     		ldr	r3, [r7, #4]
 4514 002c 1B68     		ldr	r3, [r3]
 4515 002e 8021     		movs	r1, #128
 4516 0030 8901     		lsls	r1, r1, #6
 4517 0032 0A43     		orrs	r2, r1
 4518 0034 1A60     		str	r2, [r3]
2673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4519              		.loc 1 2674 17
 4520 0036 7B68     		ldr	r3, [r7, #4]
 4521 0038 2022     		movs	r2, #32
 4522 003a 5A67     		str	r2, [r3, #116]
2675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 4523              		.loc 1 2676 11
 4524 003c 7B68     		ldr	r3, [r7, #4]
 4525 003e 1800     		movs	r0, r3
 4526 0040 FFF7FEFF 		bl	UART_CheckIdleState
 4527 0044 0300     		movs	r3, r0
 4528              	.L221:
2677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4529              		.loc 1 2677 1
 4530 0046 1800     		movs	r0, r3
 4531 0048 BD46     		mov	sp, r7
 4532 004a 02B0     		add	sp, sp, #8
 4533              		@ sp needed
 4534 004c 80BD     		pop	{r7, pc}
 4535              		.cfi_endproc
 4536              	.LFE73:
 4538              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 4539              		.align	1
 4540              		.global	HAL_MultiProcessor_DisableMuteMode
 4541              		.syntax unified
 4542              		.code	16
 4543              		.thumb_func
 4545              	HAL_MultiProcessor_DisableMuteMode:
 4546              	.LFB74:
2678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4547              		.loc 1 2686 1
 4548              		.cfi_startproc
 4549              		@ args = 0, pretend = 0, frame = 8
 4550              		@ frame_needed = 1, uses_anonymous_args = 0
 4551 0000 80B5     		push	{r7, lr}
 4552              	.LCFI102:
ARM GAS  /tmp/ccTcPcT8.s 			page 127


 4553              		.cfi_def_cfa_offset 8
 4554              		.cfi_offset 7, -8
 4555              		.cfi_offset 14, -4
 4556 0002 82B0     		sub	sp, sp, #8
 4557              	.LCFI103:
 4558              		.cfi_def_cfa_offset 16
 4559 0004 00AF     		add	r7, sp, #0
 4560              	.LCFI104:
 4561              		.cfi_def_cfa_register 7
 4562 0006 7860     		str	r0, [r7, #4]
2687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 4563              		.loc 1 2687 3
 4564 0008 7B68     		ldr	r3, [r7, #4]
 4565 000a 7022     		movs	r2, #112
 4566 000c 9B5C     		ldrb	r3, [r3, r2]
 4567 000e 012B     		cmp	r3, #1
 4568 0010 01D1     		bne	.L223
 4569              		.loc 1 2687 3 is_stmt 0 discriminator 1
 4570 0012 0223     		movs	r3, #2
 4571              		.loc 1 2687 3
 4572 0014 16E0     		b	.L224
 4573              	.L223:
 4574              		.loc 1 2687 3 discriminator 2
 4575 0016 7B68     		ldr	r3, [r7, #4]
 4576 0018 7022     		movs	r2, #112
 4577 001a 0121     		movs	r1, #1
 4578 001c 9954     		strb	r1, [r3, r2]
2688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4579              		.loc 1 2689 17 is_stmt 1
 4580 001e 7B68     		ldr	r3, [r7, #4]
 4581 0020 2422     		movs	r2, #36
 4582 0022 5A67     		str	r2, [r3, #116]
2690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 4583              		.loc 1 2692 3
 4584 0024 7B68     		ldr	r3, [r7, #4]
 4585 0026 1B68     		ldr	r3, [r3]
 4586 0028 1A68     		ldr	r2, [r3]
 4587 002a 7B68     		ldr	r3, [r7, #4]
 4588 002c 1B68     		ldr	r3, [r3]
 4589 002e 0749     		ldr	r1, .L225
 4590 0030 0A40     		ands	r2, r1
 4591 0032 1A60     		str	r2, [r3]
2693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4592              		.loc 1 2694 17
 4593 0034 7B68     		ldr	r3, [r7, #4]
 4594 0036 2022     		movs	r2, #32
 4595 0038 5A67     		str	r2, [r3, #116]
2695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 4596              		.loc 1 2696 11
 4597 003a 7B68     		ldr	r3, [r7, #4]
 4598 003c 1800     		movs	r0, r3
 4599 003e FFF7FEFF 		bl	UART_CheckIdleState
ARM GAS  /tmp/ccTcPcT8.s 			page 128


 4600 0042 0300     		movs	r3, r0
 4601              	.L224:
2697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4602              		.loc 1 2697 1
 4603 0044 1800     		movs	r0, r3
 4604 0046 BD46     		mov	sp, r7
 4605 0048 02B0     		add	sp, sp, #8
 4606              		@ sp needed
 4607 004a 80BD     		pop	{r7, pc}
 4608              	.L226:
 4609              		.align	2
 4610              	.L225:
 4611 004c FFDFFFFF 		.word	-8193
 4612              		.cfi_endproc
 4613              	.LFE74:
 4615              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 4616              		.align	1
 4617              		.global	HAL_MultiProcessor_EnterMuteMode
 4618              		.syntax unified
 4619              		.code	16
 4620              		.thumb_func
 4622              	HAL_MultiProcessor_EnterMuteMode:
 4623              	.LFB75:
2698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4624              		.loc 1 2706 1
 4625              		.cfi_startproc
 4626              		@ args = 0, pretend = 0, frame = 8
 4627              		@ frame_needed = 1, uses_anonymous_args = 0
 4628 0000 80B5     		push	{r7, lr}
 4629              	.LCFI105:
 4630              		.cfi_def_cfa_offset 8
 4631              		.cfi_offset 7, -8
 4632              		.cfi_offset 14, -4
 4633 0002 82B0     		sub	sp, sp, #8
 4634              	.LCFI106:
 4635              		.cfi_def_cfa_offset 16
 4636 0004 00AF     		add	r7, sp, #0
 4637              	.LCFI107:
 4638              		.cfi_def_cfa_register 7
 4639 0006 7860     		str	r0, [r7, #4]
2707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 4640              		.loc 1 2707 3
 4641 0008 7B68     		ldr	r3, [r7, #4]
 4642 000a 1B68     		ldr	r3, [r3]
 4643 000c 9A69     		ldr	r2, [r3, #24]
 4644 000e 7B68     		ldr	r3, [r7, #4]
 4645 0010 1B68     		ldr	r3, [r3]
 4646 0012 0421     		movs	r1, #4
 4647 0014 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccTcPcT8.s 			page 129


 4648 0016 9A61     		str	r2, [r3, #24]
2708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4649              		.loc 1 2708 1
 4650 0018 C046     		nop
 4651 001a BD46     		mov	sp, r7
 4652 001c 02B0     		add	sp, sp, #8
 4653              		@ sp needed
 4654 001e 80BD     		pop	{r7, pc}
 4655              		.cfi_endproc
 4656              	.LFE75:
 4658              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 4659              		.align	1
 4660              		.global	HAL_HalfDuplex_EnableTransmitter
 4661              		.syntax unified
 4662              		.code	16
 4663              		.thumb_func
 4665              	HAL_HalfDuplex_EnableTransmitter:
 4666              	.LFB76:
2709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4667              		.loc 1 2716 1
 4668              		.cfi_startproc
 4669              		@ args = 0, pretend = 0, frame = 8
 4670              		@ frame_needed = 1, uses_anonymous_args = 0
 4671 0000 80B5     		push	{r7, lr}
 4672              	.LCFI108:
 4673              		.cfi_def_cfa_offset 8
 4674              		.cfi_offset 7, -8
 4675              		.cfi_offset 14, -4
 4676 0002 82B0     		sub	sp, sp, #8
 4677              	.LCFI109:
 4678              		.cfi_def_cfa_offset 16
 4679 0004 00AF     		add	r7, sp, #0
 4680              	.LCFI110:
 4681              		.cfi_def_cfa_register 7
 4682 0006 7860     		str	r0, [r7, #4]
2717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 4683              		.loc 1 2717 3
 4684 0008 7B68     		ldr	r3, [r7, #4]
 4685 000a 7022     		movs	r2, #112
 4686 000c 9B5C     		ldrb	r3, [r3, r2]
 4687 000e 012B     		cmp	r3, #1
 4688 0010 01D1     		bne	.L229
 4689              		.loc 1 2717 3 is_stmt 0 discriminator 1
 4690 0012 0223     		movs	r3, #2
 4691              		.loc 1 2717 3
 4692 0014 1EE0     		b	.L230
 4693              	.L229:
 4694              		.loc 1 2717 3 discriminator 2
 4695 0016 7B68     		ldr	r3, [r7, #4]
 4696 0018 7022     		movs	r2, #112
ARM GAS  /tmp/ccTcPcT8.s 			page 130


 4697 001a 0121     		movs	r1, #1
 4698 001c 9954     		strb	r1, [r3, r2]
2718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4699              		.loc 1 2718 17 is_stmt 1
 4700 001e 7B68     		ldr	r3, [r7, #4]
 4701 0020 2422     		movs	r2, #36
 4702 0022 5A67     		str	r2, [r3, #116]
2719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
2721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 4703              		.loc 1 2721 3
 4704 0024 7B68     		ldr	r3, [r7, #4]
 4705 0026 1B68     		ldr	r3, [r3]
 4706 0028 1A68     		ldr	r2, [r3]
 4707 002a 7B68     		ldr	r3, [r7, #4]
 4708 002c 1B68     		ldr	r3, [r3]
 4709 002e 0C21     		movs	r1, #12
 4710 0030 8A43     		bics	r2, r1
 4711 0032 1A60     		str	r2, [r3]
2722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 4712              		.loc 1 2724 3
 4713 0034 7B68     		ldr	r3, [r7, #4]
 4714 0036 1B68     		ldr	r3, [r3]
 4715 0038 1A68     		ldr	r2, [r3]
 4716 003a 7B68     		ldr	r3, [r7, #4]
 4717 003c 1B68     		ldr	r3, [r3]
 4718 003e 0821     		movs	r1, #8
 4719 0040 0A43     		orrs	r2, r1
 4720 0042 1A60     		str	r2, [r3]
2725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4721              		.loc 1 2726 17
 4722 0044 7B68     		ldr	r3, [r7, #4]
 4723 0046 2022     		movs	r2, #32
 4724 0048 5A67     		str	r2, [r3, #116]
2727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4725              		.loc 1 2728 3
 4726 004a 7B68     		ldr	r3, [r7, #4]
 4727 004c 7022     		movs	r2, #112
 4728 004e 0021     		movs	r1, #0
 4729 0050 9954     		strb	r1, [r3, r2]
2729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 4730              		.loc 1 2730 10
 4731 0052 0023     		movs	r3, #0
 4732              	.L230:
2731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4733              		.loc 1 2731 1
 4734 0054 1800     		movs	r0, r3
 4735 0056 BD46     		mov	sp, r7
 4736 0058 02B0     		add	sp, sp, #8
 4737              		@ sp needed
 4738 005a 80BD     		pop	{r7, pc}
 4739              		.cfi_endproc
ARM GAS  /tmp/ccTcPcT8.s 			page 131


 4740              	.LFE76:
 4742              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 4743              		.align	1
 4744              		.global	HAL_HalfDuplex_EnableReceiver
 4745              		.syntax unified
 4746              		.code	16
 4747              		.thumb_func
 4749              	HAL_HalfDuplex_EnableReceiver:
 4750              	.LFB77:
2732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status.
2737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4751              		.loc 1 2739 1
 4752              		.cfi_startproc
 4753              		@ args = 0, pretend = 0, frame = 8
 4754              		@ frame_needed = 1, uses_anonymous_args = 0
 4755 0000 80B5     		push	{r7, lr}
 4756              	.LCFI111:
 4757              		.cfi_def_cfa_offset 8
 4758              		.cfi_offset 7, -8
 4759              		.cfi_offset 14, -4
 4760 0002 82B0     		sub	sp, sp, #8
 4761              	.LCFI112:
 4762              		.cfi_def_cfa_offset 16
 4763 0004 00AF     		add	r7, sp, #0
 4764              	.LCFI113:
 4765              		.cfi_def_cfa_register 7
 4766 0006 7860     		str	r0, [r7, #4]
2740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
 4767              		.loc 1 2740 3
 4768 0008 7B68     		ldr	r3, [r7, #4]
 4769 000a 7022     		movs	r2, #112
 4770 000c 9B5C     		ldrb	r3, [r3, r2]
 4771 000e 012B     		cmp	r3, #1
 4772 0010 01D1     		bne	.L232
 4773              		.loc 1 2740 3 is_stmt 0 discriminator 1
 4774 0012 0223     		movs	r3, #2
 4775              		.loc 1 2740 3
 4776 0014 1EE0     		b	.L233
 4777              	.L232:
 4778              		.loc 1 2740 3 discriminator 2
 4779 0016 7B68     		ldr	r3, [r7, #4]
 4780 0018 7022     		movs	r2, #112
 4781 001a 0121     		movs	r1, #1
 4782 001c 9954     		strb	r1, [r3, r2]
2741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4783              		.loc 1 2741 17 is_stmt 1
 4784 001e 7B68     		ldr	r3, [r7, #4]
 4785 0020 2422     		movs	r2, #36
 4786 0022 5A67     		str	r2, [r3, #116]
2742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
ARM GAS  /tmp/ccTcPcT8.s 			page 132


2744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 4787              		.loc 1 2744 3
 4788 0024 7B68     		ldr	r3, [r7, #4]
 4789 0026 1B68     		ldr	r3, [r3]
 4790 0028 1A68     		ldr	r2, [r3]
 4791 002a 7B68     		ldr	r3, [r7, #4]
 4792 002c 1B68     		ldr	r3, [r3]
 4793 002e 0C21     		movs	r1, #12
 4794 0030 8A43     		bics	r2, r1
 4795 0032 1A60     		str	r2, [r3]
2745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 4796              		.loc 1 2747 3
 4797 0034 7B68     		ldr	r3, [r7, #4]
 4798 0036 1B68     		ldr	r3, [r3]
 4799 0038 1A68     		ldr	r2, [r3]
 4800 003a 7B68     		ldr	r3, [r7, #4]
 4801 003c 1B68     		ldr	r3, [r3]
 4802 003e 0421     		movs	r1, #4
 4803 0040 0A43     		orrs	r2, r1
 4804 0042 1A60     		str	r2, [r3]
2748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4805              		.loc 1 2749 17
 4806 0044 7B68     		ldr	r3, [r7, #4]
 4807 0046 2022     		movs	r2, #32
 4808 0048 5A67     		str	r2, [r3, #116]
2750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4809              		.loc 1 2751 3
 4810 004a 7B68     		ldr	r3, [r7, #4]
 4811 004c 7022     		movs	r2, #112
 4812 004e 0021     		movs	r1, #0
 4813 0050 9954     		strb	r1, [r3, r2]
2752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 4814              		.loc 1 2753 10
 4815 0052 0023     		movs	r3, #0
 4816              	.L233:
2754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4817              		.loc 1 2754 1
 4818 0054 1800     		movs	r0, r3
 4819 0056 BD46     		mov	sp, r7
 4820 0058 02B0     		add	sp, sp, #8
 4821              		@ sp needed
 4822 005a 80BD     		pop	{r7, pc}
 4823              		.cfi_endproc
 4824              	.LFE77:
 4826              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4827              		.align	1
 4828              		.global	HAL_UART_GetState
 4829              		.syntax unified
 4830              		.code	16
 4831              		.thumb_func
 4833              	HAL_UART_GetState:
 4834              	.LFB78:
ARM GAS  /tmp/ccTcPcT8.s 			page 133


2755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if   defined(USART_CR2_LINEN)
2758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Transmit break characters.
2760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
2766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
2769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Send break characters */
2773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
2774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR2_LINEN */
2782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief   UART Peripheral State functions
2789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
2790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
2791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
2792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
2794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
2795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides functions allowing to :
2796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle state.
2797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle error code
2798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
2800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
2801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Return the UART handle state.
2805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
2807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL state
2808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4835              		.loc 1 2810 1
ARM GAS  /tmp/ccTcPcT8.s 			page 134


 4836              		.cfi_startproc
 4837              		@ args = 0, pretend = 0, frame = 16
 4838              		@ frame_needed = 1, uses_anonymous_args = 0
 4839 0000 80B5     		push	{r7, lr}
 4840              	.LCFI114:
 4841              		.cfi_def_cfa_offset 8
 4842              		.cfi_offset 7, -8
 4843              		.cfi_offset 14, -4
 4844 0002 84B0     		sub	sp, sp, #16
 4845              	.LCFI115:
 4846              		.cfi_def_cfa_offset 24
 4847 0004 00AF     		add	r7, sp, #0
 4848              	.LCFI116:
 4849              		.cfi_def_cfa_register 7
 4850 0006 7860     		str	r0, [r7, #4]
2811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t temp1;
2812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t temp2;
2813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp1 = huart->gState;
 4851              		.loc 1 2813 9
 4852 0008 7B68     		ldr	r3, [r7, #4]
 4853 000a 5B6F     		ldr	r3, [r3, #116]
 4854 000c FB60     		str	r3, [r7, #12]
2814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp2 = huart->RxState;
 4855              		.loc 1 2814 9
 4856 000e 7B68     		ldr	r3, [r7, #4]
 4857 0010 9B6F     		ldr	r3, [r3, #120]
 4858 0012 BB60     		str	r3, [r7, #8]
2815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4859              		.loc 1 2816 10
 4860 0014 FA68     		ldr	r2, [r7, #12]
 4861 0016 BB68     		ldr	r3, [r7, #8]
 4862 0018 1343     		orrs	r3, r2
2817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4863              		.loc 1 2817 1
 4864 001a 1800     		movs	r0, r3
 4865 001c BD46     		mov	sp, r7
 4866 001e 04B0     		add	sp, sp, #16
 4867              		@ sp needed
 4868 0020 80BD     		pop	{r7, pc}
 4869              		.cfi_endproc
 4870              	.LFE78:
 4872              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4873              		.align	1
 4874              		.global	HAL_UART_GetError
 4875              		.syntax unified
 4876              		.code	16
 4877              		.thumb_func
 4879              	HAL_UART_GetError:
 4880              	.LFB79:
2818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
2823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval UART Error Code
2824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
ARM GAS  /tmp/ccTcPcT8.s 			page 135


2825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4881              		.loc 1 2826 1
 4882              		.cfi_startproc
 4883              		@ args = 0, pretend = 0, frame = 8
 4884              		@ frame_needed = 1, uses_anonymous_args = 0
 4885 0000 80B5     		push	{r7, lr}
 4886              	.LCFI117:
 4887              		.cfi_def_cfa_offset 8
 4888              		.cfi_offset 7, -8
 4889              		.cfi_offset 14, -4
 4890 0002 82B0     		sub	sp, sp, #8
 4891              	.LCFI118:
 4892              		.cfi_def_cfa_offset 16
 4893 0004 00AF     		add	r7, sp, #0
 4894              	.LCFI119:
 4895              		.cfi_def_cfa_register 7
 4896 0006 7860     		str	r0, [r7, #4]
2827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return huart->ErrorCode;
 4897              		.loc 1 2827 15
 4898 0008 7B68     		ldr	r3, [r7, #4]
 4899 000a DB6F     		ldr	r3, [r3, #124]
2828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4900              		.loc 1 2828 1
 4901 000c 1800     		movs	r0, r3
 4902 000e BD46     		mov	sp, r7
 4903 0010 02B0     		add	sp, sp, #8
 4904              		@ sp needed
 4905 0012 80BD     		pop	{r7, pc}
 4906              		.cfi_endproc
 4907              	.LFE79:
 4909              		.section	.text.UART_SetConfig,"ax",%progbits
 4910              		.align	1
 4911              		.global	UART_SetConfig
 4912              		.syntax unified
 4913              		.code	16
 4914              		.thumb_func
 4916              	UART_SetConfig:
 4917              	.LFB80:
2829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
2839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval none
2845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccTcPcT8.s 			page 136


2847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Init the UART Callback settings */
2850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallb
2860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4918              		.loc 1 2871 1
 4919              		.cfi_startproc
 4920              		@ args = 0, pretend = 0, frame = 32
 4921              		@ frame_needed = 1, uses_anonymous_args = 0
 4922 0000 80B5     		push	{r7, lr}
 4923              	.LCFI120:
 4924              		.cfi_def_cfa_offset 8
 4925              		.cfi_offset 7, -8
 4926              		.cfi_offset 14, -4
 4927 0002 88B0     		sub	sp, sp, #32
 4928              	.LCFI121:
 4929              		.cfi_def_cfa_offset 40
 4930 0004 00AF     		add	r7, sp, #0
 4931              	.LCFI122:
 4932              		.cfi_def_cfa_register 7
 4933 0006 7860     		str	r0, [r7, #4]
2872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tmpreg;
2873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t brrtemp;
2874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t usartdiv                   = 0x00000000U;
 4934              		.loc 1 2875 12
 4935 0008 0023     		movs	r3, #0
 4936 000a BB61     		str	r3, [r7, #24]
2876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 4937              		.loc 1 2876 21
 4938 000c 1723     		movs	r3, #23
 4939 000e FB18     		adds	r3, r7, r3
 4940 0010 0022     		movs	r2, #0
 4941 0012 1A70     		strb	r2, [r3]
2877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t pclk;
2878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
ARM GAS  /tmp/ccTcPcT8.s 			page 137


2880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
2895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 4942              		.loc 1 2897 33
 4943 0014 7B68     		ldr	r3, [r7, #4]
 4944 0016 9A68     		ldr	r2, [r3, #8]
 4945              		.loc 1 2897 58
 4946 0018 7B68     		ldr	r3, [r7, #4]
 4947 001a 1B69     		ldr	r3, [r3, #16]
 4948              		.loc 1 2897 45
 4949 001c 1A43     		orrs	r2, r3
 4950              		.loc 1 2897 79
 4951 001e 7B68     		ldr	r3, [r7, #4]
 4952 0020 5B69     		ldr	r3, [r3, #20]
 4953              		.loc 1 2897 66
 4954 0022 1A43     		orrs	r2, r3
 4955              		.loc 1 2897 98
 4956 0024 7B68     		ldr	r3, [r7, #4]
 4957 0026 DB69     		ldr	r3, [r3, #28]
 4958              		.loc 1 2897 10
 4959 0028 1343     		orrs	r3, r2
 4960 002a 3B61     		str	r3, [r7, #16]
2898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 4961              		.loc 1 2898 3
 4962 002c 7B68     		ldr	r3, [r7, #4]
 4963 002e 1B68     		ldr	r3, [r3]
 4964 0030 1B68     		ldr	r3, [r3]
 4965 0032 A54A     		ldr	r2, .L263
 4966 0034 1340     		ands	r3, r2
 4967 0036 1900     		movs	r1, r3
 4968 0038 7B68     		ldr	r3, [r7, #4]
 4969 003a 1B68     		ldr	r3, [r3]
 4970 003c 3A69     		ldr	r2, [r7, #16]
 4971 003e 0A43     		orrs	r2, r1
 4972 0040 1A60     		str	r2, [r3]
2899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * to huart->Init.StopBits value */
2903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 4973              		.loc 1 2903 3
 4974 0042 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 138


 4975 0044 1B68     		ldr	r3, [r3]
 4976 0046 5B68     		ldr	r3, [r3, #4]
 4977 0048 A04A     		ldr	r2, .L263+4
 4978 004a 1340     		ands	r3, r2
 4979 004c 1900     		movs	r1, r3
 4980 004e 7B68     		ldr	r3, [r7, #4]
 4981 0050 DA68     		ldr	r2, [r3, #12]
 4982 0052 7B68     		ldr	r3, [r7, #4]
 4983 0054 1B68     		ldr	r3, [r3]
 4984 0056 0A43     		orrs	r2, r1
 4985 0058 5A60     		str	r2, [r3, #4]
2904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure
2907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 4986              		.loc 1 2911 10
 4987 005a 7B68     		ldr	r3, [r7, #4]
 4988 005c 9B69     		ldr	r3, [r3, #24]
 4989 005e 3B61     		str	r3, [r7, #16]
2912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg |= huart->Init.OneBitSampling;
 4990              		.loc 1 2913 24
 4991 0060 7B68     		ldr	r3, [r7, #4]
 4992 0062 1B6A     		ldr	r3, [r3, #32]
 4993              		.loc 1 2913 10
 4994 0064 3A69     		ldr	r2, [r7, #16]
 4995 0066 1343     		orrs	r3, r2
 4996 0068 3B61     		str	r3, [r7, #16]
2914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 4997              		.loc 1 2914 3
 4998 006a 7B68     		ldr	r3, [r7, #4]
 4999 006c 1B68     		ldr	r3, [r3]
 5000 006e 9B68     		ldr	r3, [r3, #8]
 5001 0070 974A     		ldr	r2, .L263+8
 5002 0072 1340     		ands	r3, r2
 5003 0074 1900     		movs	r1, r3
 5004 0076 7B68     		ldr	r3, [r7, #4]
 5005 0078 1B68     		ldr	r3, [r3]
 5006 007a 3A69     		ldr	r2, [r7, #16]
 5007 007c 0A43     		orrs	r2, r1
 5008 007e 9A60     		str	r2, [r3, #8]
2915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 5009              		.loc 1 2918 3
 5010 0080 944B     		ldr	r3, .L263+12
 5011 0082 1B6B     		ldr	r3, [r3, #48]
 5012 0084 0322     		movs	r2, #3
 5013 0086 1340     		ands	r3, r2
 5014 0088 032B     		cmp	r3, #3
 5015 008a 0DD0     		beq	.L239
 5016 008c 1BD8     		bhi	.L240
ARM GAS  /tmp/ccTcPcT8.s 			page 139


 5017 008e 022B     		cmp	r3, #2
 5018 0090 14D0     		beq	.L241
 5019 0092 18D8     		bhi	.L240
 5020 0094 002B     		cmp	r3, #0
 5021 0096 02D0     		beq	.L242
 5022 0098 012B     		cmp	r3, #1
 5023 009a 0AD0     		beq	.L243
 5024 009c 13E0     		b	.L240
 5025              	.L242:
 5026              		.loc 1 2918 3 is_stmt 0 discriminator 2
 5027 009e 1F23     		movs	r3, #31
 5028 00a0 FB18     		adds	r3, r7, r3
 5029 00a2 0022     		movs	r2, #0
 5030 00a4 1A70     		strb	r2, [r3]
 5031              		.loc 1 2918 3
 5032 00a6 12E0     		b	.L244
 5033              	.L239:
 5034              		.loc 1 2918 3 discriminator 5
 5035 00a8 1F23     		movs	r3, #31
 5036 00aa FB18     		adds	r3, r7, r3
 5037 00ac 0222     		movs	r2, #2
 5038 00ae 1A70     		strb	r2, [r3]
 5039              		.loc 1 2918 3
 5040 00b0 0DE0     		b	.L244
 5041              	.L243:
 5042              		.loc 1 2918 3 discriminator 3
 5043 00b2 1F23     		movs	r3, #31
 5044 00b4 FB18     		adds	r3, r7, r3
 5045 00b6 0422     		movs	r2, #4
 5046 00b8 1A70     		strb	r2, [r3]
 5047              		.loc 1 2918 3
 5048 00ba 08E0     		b	.L244
 5049              	.L241:
 5050              		.loc 1 2918 3 discriminator 4
 5051 00bc 1F23     		movs	r3, #31
 5052 00be FB18     		adds	r3, r7, r3
 5053 00c0 0822     		movs	r2, #8
 5054 00c2 1A70     		strb	r2, [r3]
 5055              		.loc 1 2918 3
 5056 00c4 03E0     		b	.L244
 5057              	.L240:
 5058              		.loc 1 2918 3 discriminator 1
 5059 00c6 1F23     		movs	r3, #31
 5060 00c8 FB18     		adds	r3, r7, r3
 5061 00ca 1022     		movs	r2, #16
 5062 00cc 1A70     		strb	r2, [r3]
 5063              	.L244:
2919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 5064              		.loc 1 2920 18 is_stmt 1
 5065 00ce 7B68     		ldr	r3, [r7, #4]
 5066 00d0 DA69     		ldr	r2, [r3, #28]
 5067              		.loc 1 2920 6
 5068 00d2 8023     		movs	r3, #128
 5069 00d4 1B02     		lsls	r3, r3, #8
 5070 00d6 9A42     		cmp	r2, r3
 5071 00d8 00D0     		beq	.LCB4260
ARM GAS  /tmp/ccTcPcT8.s 			page 140


 5072 00da 7EE0     		b	.L245	@long jump
 5073              	.LCB4260:
2921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
 5074              		.loc 1 2922 5
 5075 00dc 1F23     		movs	r3, #31
 5076 00de FB18     		adds	r3, r7, r3
 5077 00e0 1B78     		ldrb	r3, [r3]
 5078 00e2 082B     		cmp	r3, #8
 5079 00e4 3FD0     		beq	.L246
 5080 00e6 4EDC     		bgt	.L247
 5081 00e8 042B     		cmp	r3, #4
 5082 00ea 28D0     		beq	.L248
 5083 00ec 4BDC     		bgt	.L247
 5084 00ee 002B     		cmp	r3, #0
 5085 00f0 02D0     		beq	.L249
 5086 00f2 022B     		cmp	r3, #2
 5087 00f4 14D0     		beq	.L250
 5088 00f6 46E0     		b	.L247
 5089              	.L249:
2923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
 5090              		.loc 1 2925 16
 5091 00f8 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5092 00fc 0300     		movs	r3, r0
 5093 00fe FB60     		str	r3, [r7, #12]
2926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 5094              		.loc 1 2926 31
 5095 0100 FB68     		ldr	r3, [r7, #12]
 5096 0102 5A00     		lsls	r2, r3, #1
 5097 0104 7B68     		ldr	r3, [r7, #4]
 5098 0106 5B68     		ldr	r3, [r3, #4]
 5099 0108 5B08     		lsrs	r3, r3, #1
 5100 010a D218     		adds	r2, r2, r3
 5101 010c 7B68     		ldr	r3, [r7, #4]
 5102 010e 5B68     		ldr	r3, [r3, #4]
 5103 0110 1900     		movs	r1, r3
 5104 0112 1000     		movs	r0, r2
 5105 0114 FFF7FEFF 		bl	__aeabi_uidiv
 5106 0118 0300     		movs	r3, r0
 5107              		.loc 1 2926 20
 5108 011a 9BB2     		uxth	r3, r3
 5109              		.loc 1 2926 18
 5110 011c BB61     		str	r3, [r7, #24]
2927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5111              		.loc 1 2927 9
 5112 011e 37E0     		b	.L251
 5113              	.L250:
2928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 5114              		.loc 1 2929 31
 5115 0120 7B68     		ldr	r3, [r7, #4]
 5116 0122 5B68     		ldr	r3, [r3, #4]
 5117 0124 5B08     		lsrs	r3, r3, #1
 5118 0126 6C4A     		ldr	r2, .L263+16
 5119 0128 9A18     		adds	r2, r3, r2
ARM GAS  /tmp/ccTcPcT8.s 			page 141


 5120 012a 7B68     		ldr	r3, [r7, #4]
 5121 012c 5B68     		ldr	r3, [r3, #4]
 5122 012e 1900     		movs	r1, r3
 5123 0130 1000     		movs	r0, r2
 5124 0132 FFF7FEFF 		bl	__aeabi_uidiv
 5125 0136 0300     		movs	r3, r0
 5126              		.loc 1 2929 20
 5127 0138 9BB2     		uxth	r3, r3
 5128              		.loc 1 2929 18
 5129 013a BB61     		str	r3, [r7, #24]
2930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5130              		.loc 1 2930 9
 5131 013c 28E0     		b	.L251
 5132              	.L248:
2931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
 5133              		.loc 1 2932 16
 5134 013e FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 5135 0142 0300     		movs	r3, r0
 5136 0144 FB60     		str	r3, [r7, #12]
2933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 5137              		.loc 1 2933 31
 5138 0146 FB68     		ldr	r3, [r7, #12]
 5139 0148 5A00     		lsls	r2, r3, #1
 5140 014a 7B68     		ldr	r3, [r7, #4]
 5141 014c 5B68     		ldr	r3, [r3, #4]
 5142 014e 5B08     		lsrs	r3, r3, #1
 5143 0150 D218     		adds	r2, r2, r3
 5144 0152 7B68     		ldr	r3, [r7, #4]
 5145 0154 5B68     		ldr	r3, [r3, #4]
 5146 0156 1900     		movs	r1, r3
 5147 0158 1000     		movs	r0, r2
 5148 015a FFF7FEFF 		bl	__aeabi_uidiv
 5149 015e 0300     		movs	r3, r0
 5150              		.loc 1 2933 20
 5151 0160 9BB2     		uxth	r3, r3
 5152              		.loc 1 2933 18
 5153 0162 BB61     		str	r3, [r7, #24]
2934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5154              		.loc 1 2934 9
 5155 0164 14E0     		b	.L251
 5156              	.L246:
2935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 5157              		.loc 1 2936 31
 5158 0166 7B68     		ldr	r3, [r7, #4]
 5159 0168 5B68     		ldr	r3, [r3, #4]
 5160 016a 5B08     		lsrs	r3, r3, #1
 5161 016c 8022     		movs	r2, #128
 5162 016e 5202     		lsls	r2, r2, #9
 5163 0170 9A18     		adds	r2, r3, r2
 5164 0172 7B68     		ldr	r3, [r7, #4]
 5165 0174 5B68     		ldr	r3, [r3, #4]
 5166 0176 1900     		movs	r1, r3
 5167 0178 1000     		movs	r0, r2
 5168 017a FFF7FEFF 		bl	__aeabi_uidiv
 5169 017e 0300     		movs	r3, r0
ARM GAS  /tmp/ccTcPcT8.s 			page 142


 5170              		.loc 1 2936 20
 5171 0180 9BB2     		uxth	r3, r3
 5172              		.loc 1 2936 18
 5173 0182 BB61     		str	r3, [r7, #24]
2937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5174              		.loc 1 2937 9
 5175 0184 04E0     		b	.L251
 5176              	.L247:
2938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
2939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
 5177              		.loc 1 2939 13
 5178 0186 1723     		movs	r3, #23
 5179 0188 FB18     		adds	r3, r7, r3
 5180 018a 0122     		movs	r2, #1
 5181 018c 1A70     		strb	r2, [r3]
2940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5182              		.loc 1 2940 9
 5183 018e C046     		nop
 5184              	.L251:
2941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5185              		.loc 1 2944 8
 5186 0190 BB69     		ldr	r3, [r7, #24]
 5187 0192 0F2B     		cmp	r3, #15
 5188 0194 1CD9     		bls	.L252
 5189              		.loc 1 2944 36 discriminator 1
 5190 0196 BA69     		ldr	r2, [r7, #24]
 5191 0198 8023     		movs	r3, #128
 5192 019a 5B02     		lsls	r3, r3, #9
 5193 019c 9A42     		cmp	r2, r3
 5194 019e 17D2     		bcs	.L252
2945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 5195              		.loc 1 2946 17
 5196 01a0 BB69     		ldr	r3, [r7, #24]
 5197 01a2 9AB2     		uxth	r2, r3
 5198              		.loc 1 2946 15
 5199 01a4 0A20     		movs	r0, #10
 5200 01a6 3B18     		adds	r3, r7, r0
 5201 01a8 0F21     		movs	r1, #15
 5202 01aa 8A43     		bics	r2, r1
 5203 01ac 1A80     		strh	r2, [r3]
2947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 5204              		.loc 1 2947 60
 5205 01ae BB69     		ldr	r3, [r7, #24]
 5206 01b0 5B08     		lsrs	r3, r3, #1
 5207              		.loc 1 2947 18
 5208 01b2 9BB2     		uxth	r3, r3
 5209 01b4 0722     		movs	r2, #7
 5210 01b6 1340     		ands	r3, r2
 5211 01b8 99B2     		uxth	r1, r3
 5212              		.loc 1 2947 15
 5213 01ba 3B18     		adds	r3, r7, r0
 5214 01bc 3A18     		adds	r2, r7, r0
 5215 01be 1288     		ldrh	r2, [r2]
ARM GAS  /tmp/ccTcPcT8.s 			page 143


 5216 01c0 0A43     		orrs	r2, r1
 5217 01c2 1A80     		strh	r2, [r3]
2948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->Instance->BRR = brrtemp;
 5218              		.loc 1 2948 12
 5219 01c4 7B68     		ldr	r3, [r7, #4]
 5220 01c6 1B68     		ldr	r3, [r3]
 5221              		.loc 1 2948 28
 5222 01c8 3A18     		adds	r2, r7, r0
 5223 01ca 1288     		ldrh	r2, [r2]
 5224 01cc DA60     		str	r2, [r3, #12]
 5225 01ce 6DE0     		b	.L254
 5226              	.L252:
2949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       ret = HAL_ERROR;
 5227              		.loc 1 2952 11
 5228 01d0 1723     		movs	r3, #23
 5229 01d2 FB18     		adds	r3, r7, r3
 5230 01d4 0122     		movs	r2, #1
 5231 01d6 1A70     		strb	r2, [r3]
 5232 01d8 68E0     		b	.L254
 5233              	.L245:
2953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
 5234              		.loc 1 2957 5
 5235 01da 1F23     		movs	r3, #31
 5236 01dc FB18     		adds	r3, r7, r3
 5237 01de 1B78     		ldrb	r3, [r3]
 5238 01e0 082B     		cmp	r3, #8
 5239 01e2 3DD0     		beq	.L255
 5240 01e4 4CDC     		bgt	.L256
 5241 01e6 042B     		cmp	r3, #4
 5242 01e8 27D0     		beq	.L257
 5243 01ea 49DC     		bgt	.L256
 5244 01ec 002B     		cmp	r3, #0
 5245 01ee 02D0     		beq	.L258
 5246 01f0 022B     		cmp	r3, #2
 5247 01f2 13D0     		beq	.L259
 5248 01f4 44E0     		b	.L256
 5249              	.L258:
2958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
 5250              		.loc 1 2960 16
 5251 01f6 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5252 01fa 0300     		movs	r3, r0
 5253 01fc FB60     		str	r3, [r7, #12]
2961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 5254              		.loc 1 2961 31
 5255 01fe 7B68     		ldr	r3, [r7, #4]
 5256 0200 5B68     		ldr	r3, [r3, #4]
 5257 0202 5A08     		lsrs	r2, r3, #1
 5258 0204 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 144


 5259 0206 D218     		adds	r2, r2, r3
 5260 0208 7B68     		ldr	r3, [r7, #4]
 5261 020a 5B68     		ldr	r3, [r3, #4]
 5262 020c 1900     		movs	r1, r3
 5263 020e 1000     		movs	r0, r2
 5264 0210 FFF7FEFF 		bl	__aeabi_uidiv
 5265 0214 0300     		movs	r3, r0
 5266              		.loc 1 2961 20
 5267 0216 9BB2     		uxth	r3, r3
 5268              		.loc 1 2961 18
 5269 0218 BB61     		str	r3, [r7, #24]
2962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5270              		.loc 1 2962 9
 5271 021a 36E0     		b	.L260
 5272              	.L259:
2963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 5273              		.loc 1 2964 31
 5274 021c 7B68     		ldr	r3, [r7, #4]
 5275 021e 5B68     		ldr	r3, [r3, #4]
 5276 0220 5B08     		lsrs	r3, r3, #1
 5277 0222 2E4A     		ldr	r2, .L263+20
 5278 0224 9A18     		adds	r2, r3, r2
 5279 0226 7B68     		ldr	r3, [r7, #4]
 5280 0228 5B68     		ldr	r3, [r3, #4]
 5281 022a 1900     		movs	r1, r3
 5282 022c 1000     		movs	r0, r2
 5283 022e FFF7FEFF 		bl	__aeabi_uidiv
 5284 0232 0300     		movs	r3, r0
 5285              		.loc 1 2964 20
 5286 0234 9BB2     		uxth	r3, r3
 5287              		.loc 1 2964 18
 5288 0236 BB61     		str	r3, [r7, #24]
2965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5289              		.loc 1 2965 9
 5290 0238 27E0     		b	.L260
 5291              	.L257:
2966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
 5292              		.loc 1 2967 16
 5293 023a FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 5294 023e 0300     		movs	r3, r0
 5295 0240 FB60     		str	r3, [r7, #12]
2968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 5296              		.loc 1 2968 31
 5297 0242 7B68     		ldr	r3, [r7, #4]
 5298 0244 5B68     		ldr	r3, [r3, #4]
 5299 0246 5A08     		lsrs	r2, r3, #1
 5300 0248 FB68     		ldr	r3, [r7, #12]
 5301 024a D218     		adds	r2, r2, r3
 5302 024c 7B68     		ldr	r3, [r7, #4]
 5303 024e 5B68     		ldr	r3, [r3, #4]
 5304 0250 1900     		movs	r1, r3
 5305 0252 1000     		movs	r0, r2
 5306 0254 FFF7FEFF 		bl	__aeabi_uidiv
 5307 0258 0300     		movs	r3, r0
 5308              		.loc 1 2968 20
ARM GAS  /tmp/ccTcPcT8.s 			page 145


 5309 025a 9BB2     		uxth	r3, r3
 5310              		.loc 1 2968 18
 5311 025c BB61     		str	r3, [r7, #24]
2969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5312              		.loc 1 2969 9
 5313 025e 14E0     		b	.L260
 5314              	.L255:
2970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 5315              		.loc 1 2971 31
 5316 0260 7B68     		ldr	r3, [r7, #4]
 5317 0262 5B68     		ldr	r3, [r3, #4]
 5318 0264 5B08     		lsrs	r3, r3, #1
 5319 0266 8022     		movs	r2, #128
 5320 0268 1202     		lsls	r2, r2, #8
 5321 026a 9A18     		adds	r2, r3, r2
 5322 026c 7B68     		ldr	r3, [r7, #4]
 5323 026e 5B68     		ldr	r3, [r3, #4]
 5324 0270 1900     		movs	r1, r3
 5325 0272 1000     		movs	r0, r2
 5326 0274 FFF7FEFF 		bl	__aeabi_uidiv
 5327 0278 0300     		movs	r3, r0
 5328              		.loc 1 2971 20
 5329 027a 9BB2     		uxth	r3, r3
 5330              		.loc 1 2971 18
 5331 027c BB61     		str	r3, [r7, #24]
2972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5332              		.loc 1 2972 9
 5333 027e 04E0     		b	.L260
 5334              	.L256:
2973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
2974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
 5335              		.loc 1 2974 13
 5336 0280 1723     		movs	r3, #23
 5337 0282 FB18     		adds	r3, r7, r3
 5338 0284 0122     		movs	r2, #1
 5339 0286 1A70     		strb	r2, [r3]
2975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 5340              		.loc 1 2975 9
 5341 0288 C046     		nop
 5342              	.L260:
2976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5343              		.loc 1 2979 8
 5344 028a BB69     		ldr	r3, [r7, #24]
 5345 028c 0F2B     		cmp	r3, #15
 5346 028e 09D9     		bls	.L261
 5347              		.loc 1 2979 36 discriminator 1
 5348 0290 BA69     		ldr	r2, [r7, #24]
 5349 0292 8023     		movs	r3, #128
 5350 0294 5B02     		lsls	r3, r3, #9
 5351 0296 9A42     		cmp	r2, r3
 5352 0298 04D2     		bcs	.L261
2980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->Instance->BRR = usartdiv;
ARM GAS  /tmp/ccTcPcT8.s 			page 146


 5353              		.loc 1 2981 12
 5354 029a 7B68     		ldr	r3, [r7, #4]
 5355 029c 1B68     		ldr	r3, [r3]
 5356              		.loc 1 2981 28
 5357 029e BA69     		ldr	r2, [r7, #24]
 5358 02a0 DA60     		str	r2, [r3, #12]
 5359 02a2 03E0     		b	.L254
 5360              	.L261:
2982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       ret = HAL_ERROR;
 5361              		.loc 1 2985 11
 5362 02a4 1723     		movs	r3, #23
 5363 02a6 FB18     		adds	r3, r7, r3
 5364 02a8 0122     		movs	r2, #1
 5365 02aa 1A70     		strb	r2, [r3]
 5366              	.L254:
2986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear ISR function pointers */
2991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxISR = NULL;
 5367              		.loc 1 2991 16
 5368 02ac 7B68     		ldr	r3, [r7, #4]
 5369 02ae 0022     		movs	r2, #0
 5370 02b0 1A66     		str	r2, [r3, #96]
2992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxISR = NULL;
 5371              		.loc 1 2992 16
 5372 02b2 7B68     		ldr	r3, [r7, #4]
 5373 02b4 0022     		movs	r2, #0
 5374 02b6 5A66     		str	r2, [r3, #100]
2993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return ret;
 5375              		.loc 1 2994 10
 5376 02b8 1723     		movs	r3, #23
 5377 02ba FB18     		adds	r3, r7, r3
 5378 02bc 1B78     		ldrb	r3, [r3]
2995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 5379              		.loc 1 2995 1
 5380 02be 1800     		movs	r0, r3
 5381 02c0 BD46     		mov	sp, r7
 5382 02c2 08B0     		add	sp, sp, #32
 5383              		@ sp needed
 5384 02c4 80BD     		pop	{r7, pc}
 5385              	.L264:
 5386 02c6 C046     		.align	2
 5387              	.L263:
 5388 02c8 F369FFFF 		.word	-38413
 5389 02cc FFCFFFFF 		.word	-12289
 5390 02d0 FFF4FFFF 		.word	-2817
 5391 02d4 00100240 		.word	1073876992
 5392 02d8 0024F400 		.word	16000000
 5393 02dc 00127A00 		.word	8000000
 5394              		.cfi_endproc
 5395              	.LFE80:
ARM GAS  /tmp/ccTcPcT8.s 			page 147


 5397              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 5398              		.align	1
 5399              		.global	UART_AdvFeatureConfig
 5400              		.syntax unified
 5401              		.code	16
 5402              		.thumb_func
 5404              	UART_AdvFeatureConfig:
 5405              	.LFB81:
2996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
2999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
3003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 5406              		.loc 1 3003 1
 5407              		.cfi_startproc
 5408              		@ args = 0, pretend = 0, frame = 8
 5409              		@ frame_needed = 1, uses_anonymous_args = 0
 5410 0000 80B5     		push	{r7, lr}
 5411              	.LCFI123:
 5412              		.cfi_def_cfa_offset 8
 5413              		.cfi_offset 7, -8
 5414              		.cfi_offset 14, -4
 5415 0002 82B0     		sub	sp, sp, #8
 5416              	.LCFI124:
 5417              		.cfi_def_cfa_offset 16
 5418 0004 00AF     		add	r7, sp, #0
 5419              	.LCFI125:
 5420              		.cfi_def_cfa_register 7
 5421 0006 7860     		str	r0, [r7, #4]
3004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
3005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
3008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 5422              		.loc 1 3008 7
 5423 0008 7B68     		ldr	r3, [r7, #4]
 5424 000a 5B6A     		ldr	r3, [r3, #36]
 5425 000c 0122     		movs	r2, #1
 5426 000e 1340     		ands	r3, r2
 5427              		.loc 1 3008 6
 5428 0010 0BD0     		beq	.L266
3009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 5429              		.loc 1 3011 5
 5430 0012 7B68     		ldr	r3, [r7, #4]
 5431 0014 1B68     		ldr	r3, [r3]
 5432 0016 5B68     		ldr	r3, [r3, #4]
 5433 0018 4A4A     		ldr	r2, .L275
 5434 001a 1340     		ands	r3, r2
 5435 001c 1900     		movs	r1, r3
 5436 001e 7B68     		ldr	r3, [r7, #4]
 5437 0020 9A6A     		ldr	r2, [r3, #40]
 5438 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 148


 5439 0024 1B68     		ldr	r3, [r3]
 5440 0026 0A43     		orrs	r2, r1
 5441 0028 5A60     		str	r2, [r3, #4]
 5442              	.L266:
3012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
3015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 5443              		.loc 1 3015 7
 5444 002a 7B68     		ldr	r3, [r7, #4]
 5445 002c 5B6A     		ldr	r3, [r3, #36]
 5446 002e 0222     		movs	r2, #2
 5447 0030 1340     		ands	r3, r2
 5448              		.loc 1 3015 6
 5449 0032 0BD0     		beq	.L267
3016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 5450              		.loc 1 3018 5
 5451 0034 7B68     		ldr	r3, [r7, #4]
 5452 0036 1B68     		ldr	r3, [r3]
 5453 0038 5B68     		ldr	r3, [r3, #4]
 5454 003a 434A     		ldr	r2, .L275+4
 5455 003c 1340     		ands	r3, r2
 5456 003e 1900     		movs	r1, r3
 5457 0040 7B68     		ldr	r3, [r7, #4]
 5458 0042 DA6A     		ldr	r2, [r3, #44]
 5459 0044 7B68     		ldr	r3, [r7, #4]
 5460 0046 1B68     		ldr	r3, [r3]
 5461 0048 0A43     		orrs	r2, r1
 5462 004a 5A60     		str	r2, [r3, #4]
 5463              	.L267:
3019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure data inversion */
3022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 5464              		.loc 1 3022 7
 5465 004c 7B68     		ldr	r3, [r7, #4]
 5466 004e 5B6A     		ldr	r3, [r3, #36]
 5467 0050 0422     		movs	r2, #4
 5468 0052 1340     		ands	r3, r2
 5469              		.loc 1 3022 6
 5470 0054 0BD0     		beq	.L268
3023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 5471              		.loc 1 3025 5
 5472 0056 7B68     		ldr	r3, [r7, #4]
 5473 0058 1B68     		ldr	r3, [r3]
 5474 005a 5B68     		ldr	r3, [r3, #4]
 5475 005c 3B4A     		ldr	r2, .L275+8
 5476 005e 1340     		ands	r3, r2
 5477 0060 1900     		movs	r1, r3
 5478 0062 7B68     		ldr	r3, [r7, #4]
 5479 0064 1A6B     		ldr	r2, [r3, #48]
 5480 0066 7B68     		ldr	r3, [r7, #4]
 5481 0068 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 149


 5482 006a 0A43     		orrs	r2, r1
 5483 006c 5A60     		str	r2, [r3, #4]
 5484              	.L268:
3026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
3029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 5485              		.loc 1 3029 7
 5486 006e 7B68     		ldr	r3, [r7, #4]
 5487 0070 5B6A     		ldr	r3, [r3, #36]
 5488 0072 0822     		movs	r2, #8
 5489 0074 1340     		ands	r3, r2
 5490              		.loc 1 3029 6
 5491 0076 0BD0     		beq	.L269
3030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 5492              		.loc 1 3032 5
 5493 0078 7B68     		ldr	r3, [r7, #4]
 5494 007a 1B68     		ldr	r3, [r3]
 5495 007c 5B68     		ldr	r3, [r3, #4]
 5496 007e 344A     		ldr	r2, .L275+12
 5497 0080 1340     		ands	r3, r2
 5498 0082 1900     		movs	r1, r3
 5499 0084 7B68     		ldr	r3, [r7, #4]
 5500 0086 5A6B     		ldr	r2, [r3, #52]
 5501 0088 7B68     		ldr	r3, [r7, #4]
 5502 008a 1B68     		ldr	r3, [r3]
 5503 008c 0A43     		orrs	r2, r1
 5504 008e 5A60     		str	r2, [r3, #4]
 5505              	.L269:
3033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
3036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 5506              		.loc 1 3036 7
 5507 0090 7B68     		ldr	r3, [r7, #4]
 5508 0092 5B6A     		ldr	r3, [r3, #36]
 5509 0094 1022     		movs	r2, #16
 5510 0096 1340     		ands	r3, r2
 5511              		.loc 1 3036 6
 5512 0098 0BD0     		beq	.L270
3037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 5513              		.loc 1 3039 5
 5514 009a 7B68     		ldr	r3, [r7, #4]
 5515 009c 1B68     		ldr	r3, [r3]
 5516 009e 9B68     		ldr	r3, [r3, #8]
 5517 00a0 2C4A     		ldr	r2, .L275+16
 5518 00a2 1340     		ands	r3, r2
 5519 00a4 1900     		movs	r1, r3
 5520 00a6 7B68     		ldr	r3, [r7, #4]
 5521 00a8 9A6B     		ldr	r2, [r3, #56]
 5522 00aa 7B68     		ldr	r3, [r7, #4]
 5523 00ac 1B68     		ldr	r3, [r3]
 5524 00ae 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccTcPcT8.s 			page 150


 5525 00b0 9A60     		str	r2, [r3, #8]
 5526              	.L270:
3040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
3043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 5527              		.loc 1 3043 7
 5528 00b2 7B68     		ldr	r3, [r7, #4]
 5529 00b4 5B6A     		ldr	r3, [r3, #36]
 5530 00b6 2022     		movs	r2, #32
 5531 00b8 1340     		ands	r3, r2
 5532              		.loc 1 3043 6
 5533 00ba 0BD0     		beq	.L271
3044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 5534              		.loc 1 3046 5
 5535 00bc 7B68     		ldr	r3, [r7, #4]
 5536 00be 1B68     		ldr	r3, [r3]
 5537 00c0 9B68     		ldr	r3, [r3, #8]
 5538 00c2 254A     		ldr	r2, .L275+20
 5539 00c4 1340     		ands	r3, r2
 5540 00c6 1900     		movs	r1, r3
 5541 00c8 7B68     		ldr	r3, [r7, #4]
 5542 00ca DA6B     		ldr	r2, [r3, #60]
 5543 00cc 7B68     		ldr	r3, [r7, #4]
 5544 00ce 1B68     		ldr	r3, [r3]
 5545 00d0 0A43     		orrs	r2, r1
 5546 00d2 9A60     		str	r2, [r3, #8]
 5547              	.L271:
3047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
3050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 5548              		.loc 1 3050 7
 5549 00d4 7B68     		ldr	r3, [r7, #4]
 5550 00d6 5B6A     		ldr	r3, [r3, #36]
 5551 00d8 4022     		movs	r2, #64
 5552 00da 1340     		ands	r3, r2
 5553              		.loc 1 3050 6
 5554 00dc 1DD0     		beq	.L272
3051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 5555              		.loc 1 3054 5
 5556 00de 7B68     		ldr	r3, [r7, #4]
 5557 00e0 1B68     		ldr	r3, [r3]
 5558 00e2 5B68     		ldr	r3, [r3, #4]
 5559 00e4 1D4A     		ldr	r2, .L275+24
 5560 00e6 1340     		ands	r3, r2
 5561 00e8 1900     		movs	r1, r3
 5562 00ea 7B68     		ldr	r3, [r7, #4]
 5563 00ec 1A6C     		ldr	r2, [r3, #64]
 5564 00ee 7B68     		ldr	r3, [r7, #4]
 5565 00f0 1B68     		ldr	r3, [r3]
 5566 00f2 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccTcPcT8.s 			page 151


 5567 00f4 5A60     		str	r2, [r3, #4]
3055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
3056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 5568              		.loc 1 3056 28
 5569 00f6 7B68     		ldr	r3, [r7, #4]
 5570 00f8 1A6C     		ldr	r2, [r3, #64]
 5571              		.loc 1 3056 8
 5572 00fa 8023     		movs	r3, #128
 5573 00fc 5B03     		lsls	r3, r3, #13
 5574 00fe 9A42     		cmp	r2, r3
 5575 0100 0BD1     		bne	.L272
3057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 5576              		.loc 1 3059 7
 5577 0102 7B68     		ldr	r3, [r7, #4]
 5578 0104 1B68     		ldr	r3, [r3]
 5579 0106 5B68     		ldr	r3, [r3, #4]
 5580 0108 154A     		ldr	r2, .L275+28
 5581 010a 1340     		ands	r3, r2
 5582 010c 1900     		movs	r1, r3
 5583 010e 7B68     		ldr	r3, [r7, #4]
 5584 0110 5A6C     		ldr	r2, [r3, #68]
 5585 0112 7B68     		ldr	r3, [r7, #4]
 5586 0114 1B68     		ldr	r3, [r3]
 5587 0116 0A43     		orrs	r2, r1
 5588 0118 5A60     		str	r2, [r3, #4]
 5589              	.L272:
3060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
3064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 5590              		.loc 1 3064 7
 5591 011a 7B68     		ldr	r3, [r7, #4]
 5592 011c 5B6A     		ldr	r3, [r3, #36]
 5593 011e 8022     		movs	r2, #128
 5594 0120 1340     		ands	r3, r2
 5595              		.loc 1 3064 6
 5596 0122 0BD0     		beq	.L274
3065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 5597              		.loc 1 3067 5
 5598 0124 7B68     		ldr	r3, [r7, #4]
 5599 0126 1B68     		ldr	r3, [r3]
 5600 0128 5B68     		ldr	r3, [r3, #4]
 5601 012a 0E4A     		ldr	r2, .L275+32
 5602 012c 1340     		ands	r3, r2
 5603 012e 1900     		movs	r1, r3
 5604 0130 7B68     		ldr	r3, [r7, #4]
 5605 0132 9A6C     		ldr	r2, [r3, #72]
 5606 0134 7B68     		ldr	r3, [r7, #4]
 5607 0136 1B68     		ldr	r3, [r3]
 5608 0138 0A43     		orrs	r2, r1
 5609 013a 5A60     		str	r2, [r3, #4]
 5610              	.L274:
ARM GAS  /tmp/ccTcPcT8.s 			page 152


3068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 5611              		.loc 1 3069 1
 5612 013c C046     		nop
 5613 013e BD46     		mov	sp, r7
 5614 0140 02B0     		add	sp, sp, #8
 5615              		@ sp needed
 5616 0142 80BD     		pop	{r7, pc}
 5617              	.L276:
 5618              		.align	2
 5619              	.L275:
 5620 0144 FFFFFDFF 		.word	-131073
 5621 0148 FFFFFEFF 		.word	-65537
 5622 014c FFFFFBFF 		.word	-262145
 5623 0150 FF7FFFFF 		.word	-32769
 5624 0154 FFEFFFFF 		.word	-4097
 5625 0158 FFDFFFFF 		.word	-8193
 5626 015c FFFFEFFF 		.word	-1048577
 5627 0160 FFFF9FFF 		.word	-6291457
 5628 0164 FFFFF7FF 		.word	-524289
 5629              		.cfi_endproc
 5630              	.LFE81:
 5632              		.section	.text.UART_CheckIdleState,"ax",%progbits
 5633              		.align	1
 5634              		.global	UART_CheckIdleState
 5635              		.syntax unified
 5636              		.code	16
 5637              		.thumb_func
 5639              	UART_CheckIdleState:
 5640              	.LFB82:
3070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Check the UART Idle State.
3073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
3075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
3077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 5641              		.loc 1 3077 1
 5642              		.cfi_startproc
 5643              		@ args = 0, pretend = 0, frame = 16
 5644              		@ frame_needed = 1, uses_anonymous_args = 0
 5645 0000 80B5     		push	{r7, lr}
 5646              	.LCFI126:
 5647              		.cfi_def_cfa_offset 8
 5648              		.cfi_offset 7, -8
 5649              		.cfi_offset 14, -4
 5650 0002 86B0     		sub	sp, sp, #24
 5651              	.LCFI127:
 5652              		.cfi_def_cfa_offset 32
 5653 0004 02AF     		add	r7, sp, #8
 5654              	.LCFI128:
 5655              		.cfi_def_cfa 7, 24
 5656 0006 7860     		str	r0, [r7, #4]
3078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart;
3079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
ARM GAS  /tmp/ccTcPcT8.s 			page 153


3081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5657              		.loc 1 3081 20
 5658 0008 7B68     		ldr	r3, [r7, #4]
 5659 000a 0022     		movs	r2, #0
 5660 000c DA67     		str	r2, [r3, #124]
3082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
3084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tickstart = HAL_GetTick();
 5661              		.loc 1 3084 15
 5662 000e FFF7FEFF 		bl	HAL_GetTick
 5663 0012 0300     		movs	r3, r0
 5664 0014 FB60     		str	r3, [r7, #12]
3085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
3087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 5665              		.loc 1 3087 13
 5666 0016 7B68     		ldr	r3, [r7, #4]
 5667 0018 1B68     		ldr	r3, [r3]
 5668              		.loc 1 3087 23
 5669 001a 1B68     		ldr	r3, [r3]
 5670              		.loc 1 3087 29
 5671 001c 0822     		movs	r2, #8
 5672 001e 1340     		ands	r3, r2
 5673              		.loc 1 3087 6
 5674 0020 082B     		cmp	r3, #8
 5675 0022 0CD1     		bne	.L278
3088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Wait until TEACK flag is set */
3090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
 5676              		.loc 1 3090 9
 5677 0024 FB68     		ldr	r3, [r7, #12]
 5678 0026 8022     		movs	r2, #128
 5679 0028 9103     		lsls	r1, r2, #14
 5680 002a 7868     		ldr	r0, [r7, #4]
 5681 002c 154A     		ldr	r2, .L281
 5682 002e 0092     		str	r2, [sp]
 5683 0030 0022     		movs	r2, #0
 5684 0032 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5685 0036 031E     		subs	r3, r0, #0
 5686              		.loc 1 3090 8 discriminator 1
 5687 0038 01D0     		beq	.L278
3091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Timeout occurred */
3093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_TIMEOUT;
 5688              		.loc 1 3093 14
 5689 003a 0323     		movs	r3, #3
 5690 003c 1EE0     		b	.L279
 5691              	.L278:
3094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if the Receiver is enabled */
3098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 5692              		.loc 1 3098 13
 5693 003e 7B68     		ldr	r3, [r7, #4]
 5694 0040 1B68     		ldr	r3, [r3]
 5695              		.loc 1 3098 23
ARM GAS  /tmp/ccTcPcT8.s 			page 154


 5696 0042 1B68     		ldr	r3, [r3]
 5697              		.loc 1 3098 29
 5698 0044 0422     		movs	r2, #4
 5699 0046 1340     		ands	r3, r2
 5700              		.loc 1 3098 6
 5701 0048 042B     		cmp	r3, #4
 5702 004a 0CD1     		bne	.L280
3099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Wait until REACK flag is set */
3101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
 5703              		.loc 1 3101 9
 5704 004c FB68     		ldr	r3, [r7, #12]
 5705 004e 8022     		movs	r2, #128
 5706 0050 D103     		lsls	r1, r2, #15
 5707 0052 7868     		ldr	r0, [r7, #4]
 5708 0054 0B4A     		ldr	r2, .L281
 5709 0056 0092     		str	r2, [sp]
 5710 0058 0022     		movs	r2, #0
 5711 005a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5712 005e 031E     		subs	r3, r0, #0
 5713              		.loc 1 3101 8 discriminator 1
 5714 0060 01D0     		beq	.L280
3102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Timeout occurred */
3104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_TIMEOUT;
 5715              		.loc 1 3104 14
 5716 0062 0323     		movs	r3, #3
 5717 0064 0AE0     		b	.L279
 5718              	.L280:
3105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART State */
3109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5719              		.loc 1 3109 17
 5720 0066 7B68     		ldr	r3, [r7, #4]
 5721 0068 2022     		movs	r2, #32
 5722 006a 5A67     		str	r2, [r3, #116]
3110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5723              		.loc 1 3110 18
 5724 006c 7B68     		ldr	r3, [r7, #4]
 5725 006e 2022     		movs	r2, #32
 5726 0070 9A67     		str	r2, [r3, #120]
3111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 5727              		.loc 1 3112 3
 5728 0072 7B68     		ldr	r3, [r7, #4]
 5729 0074 7022     		movs	r2, #112
 5730 0076 0021     		movs	r1, #0
 5731 0078 9954     		strb	r1, [r3, r2]
3113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 5732              		.loc 1 3114 10
 5733 007a 0023     		movs	r3, #0
 5734              	.L279:
3115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 5735              		.loc 1 3115 1
ARM GAS  /tmp/ccTcPcT8.s 			page 155


 5736 007c 1800     		movs	r0, r3
 5737 007e BD46     		mov	sp, r7
 5738 0080 04B0     		add	sp, sp, #16
 5739              		@ sp needed
 5740 0082 80BD     		pop	{r7, pc}
 5741              	.L282:
 5742              		.align	2
 5743              	.L281:
 5744 0084 FFFFFF01 		.word	33554431
 5745              		.cfi_endproc
 5746              	.LFE82:
 5748              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5749              		.align	1
 5750              		.global	UART_WaitOnFlagUntilTimeout
 5751              		.syntax unified
 5752              		.code	16
 5753              		.thumb_func
 5755              	UART_WaitOnFlagUntilTimeout:
 5756              	.LFB83:
3116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
3119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart     UART handle.
3120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
3121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
3122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Tickstart Tick start value
3123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout   Timeout duration
3124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
3125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
3127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                                               uint32_t Tickstart, uint32_t Timeout)
3128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 5757              		.loc 1 3128 1
 5758              		.cfi_startproc
 5759              		@ args = 4, pretend = 0, frame = 16
 5760              		@ frame_needed = 1, uses_anonymous_args = 0
 5761 0000 80B5     		push	{r7, lr}
 5762              	.LCFI129:
 5763              		.cfi_def_cfa_offset 8
 5764              		.cfi_offset 7, -8
 5765              		.cfi_offset 14, -4
 5766 0002 84B0     		sub	sp, sp, #16
 5767              	.LCFI130:
 5768              		.cfi_def_cfa_offset 24
 5769 0004 00AF     		add	r7, sp, #0
 5770              	.LCFI131:
 5771              		.cfi_def_cfa_register 7
 5772 0006 F860     		str	r0, [r7, #12]
 5773 0008 B960     		str	r1, [r7, #8]
 5774 000a 3B60     		str	r3, [r7]
 5775 000c FB1D     		adds	r3, r7, #7
 5776 000e 1A70     		strb	r2, [r3]
3129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Wait until flag is set */
3130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5777              		.loc 1 3130 9
 5778 0010 5DE0     		b	.L285
 5779              	.L290:
ARM GAS  /tmp/ccTcPcT8.s 			page 156


3131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check for the Timeout */
3133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
 5780              		.loc 1 3133 8
 5781 0012 BB69     		ldr	r3, [r7, #24]
 5782 0014 0133     		adds	r3, r3, #1
 5783 0016 5AD0     		beq	.L285
3134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 5784              		.loc 1 3135 13
 5785 0018 FFF7FEFF 		bl	HAL_GetTick
 5786 001c 0200     		movs	r2, r0
 5787              		.loc 1 3135 27 discriminator 1
 5788 001e 3B68     		ldr	r3, [r7]
 5789 0020 D31A     		subs	r3, r2, r3
 5790              		.loc 1 3135 10 discriminator 1
 5791 0022 BA69     		ldr	r2, [r7, #24]
 5792 0024 9A42     		cmp	r2, r3
 5793 0026 02D3     		bcc	.L286
 5794              		.loc 1 3135 51 discriminator 1
 5795 0028 BB69     		ldr	r3, [r7, #24]
 5796 002a 002B     		cmp	r3, #0
 5797 002c 1BD1     		bne	.L287
 5798              	.L286:
3136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
3137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5799              		.loc 1 3138 9
 5800 002e FB68     		ldr	r3, [r7, #12]
 5801 0030 1B68     		ldr	r3, [r3]
 5802 0032 1A68     		ldr	r2, [r3]
 5803 0034 FB68     		ldr	r3, [r7, #12]
 5804 0036 1B68     		ldr	r3, [r3]
 5805 0038 2F49     		ldr	r1, .L292
 5806 003a 0A40     		ands	r2, r1
 5807 003c 1A60     		str	r2, [r3]
3139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5808              		.loc 1 3139 9
 5809 003e FB68     		ldr	r3, [r7, #12]
 5810 0040 1B68     		ldr	r3, [r3]
 5811 0042 9A68     		ldr	r2, [r3, #8]
 5812 0044 FB68     		ldr	r3, [r7, #12]
 5813 0046 1B68     		ldr	r3, [r3]
 5814 0048 0121     		movs	r1, #1
 5815 004a 8A43     		bics	r2, r1
 5816 004c 9A60     		str	r2, [r3, #8]
3140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
 5817              		.loc 1 3141 23
 5818 004e FB68     		ldr	r3, [r7, #12]
 5819 0050 2022     		movs	r2, #32
 5820 0052 5A67     		str	r2, [r3, #116]
3142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5821              		.loc 1 3142 24
 5822 0054 FB68     		ldr	r3, [r7, #12]
 5823 0056 2022     		movs	r2, #32
 5824 0058 9A67     		str	r2, [r3, #120]
ARM GAS  /tmp/ccTcPcT8.s 			page 157


3143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 5825              		.loc 1 3144 9
 5826 005a FB68     		ldr	r3, [r7, #12]
 5827 005c 7022     		movs	r2, #112
 5828 005e 0021     		movs	r1, #0
 5829 0060 9954     		strb	r1, [r3, r2]
3145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 5830              		.loc 1 3146 16
 5831 0062 0323     		movs	r3, #3
 5832 0064 43E0     		b	.L288
 5833              	.L287:
3147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
3148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 5834              		.loc 1 3149 11
 5835 0066 FB68     		ldr	r3, [r7, #12]
 5836 0068 1B68     		ldr	r3, [r3]
 5837 006a 1B68     		ldr	r3, [r3]
 5838 006c 0422     		movs	r2, #4
 5839 006e 1340     		ands	r3, r2
 5840              		.loc 1 3149 10
 5841 0070 2DD0     		beq	.L285
3150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
3151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 5842              		.loc 1 3151 13
 5843 0072 FB68     		ldr	r3, [r7, #12]
 5844 0074 1B68     		ldr	r3, [r3]
 5845 0076 DA69     		ldr	r2, [r3, #28]
 5846 0078 8023     		movs	r3, #128
 5847 007a 1B01     		lsls	r3, r3, #4
 5848 007c 1A40     		ands	r2, r3
 5849              		.loc 1 3151 12
 5850 007e 8023     		movs	r3, #128
 5851 0080 1B01     		lsls	r3, r3, #4
 5852 0082 9A42     		cmp	r2, r3
 5853 0084 23D1     		bne	.L285
3152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
3153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Clear Receiver Timeout flag*/
3154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 5854              		.loc 1 3154 11
 5855 0086 FB68     		ldr	r3, [r7, #12]
 5856 0088 1B68     		ldr	r3, [r3]
 5857 008a 8022     		movs	r2, #128
 5858 008c 1201     		lsls	r2, r2, #4
 5859 008e 1A62     		str	r2, [r3, #32]
3155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           
3156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
3157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5860              		.loc 1 3157 11
 5861 0090 FB68     		ldr	r3, [r7, #12]
 5862 0092 1B68     		ldr	r3, [r3]
 5863 0094 1A68     		ldr	r2, [r3]
 5864 0096 FB68     		ldr	r3, [r7, #12]
 5865 0098 1B68     		ldr	r3, [r3]
 5866 009a 1749     		ldr	r1, .L292
ARM GAS  /tmp/ccTcPcT8.s 			page 158


 5867 009c 0A40     		ands	r2, r1
 5868 009e 1A60     		str	r2, [r3]
3158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5869              		.loc 1 3158 11
 5870 00a0 FB68     		ldr	r3, [r7, #12]
 5871 00a2 1B68     		ldr	r3, [r3]
 5872 00a4 9A68     		ldr	r2, [r3, #8]
 5873 00a6 FB68     		ldr	r3, [r7, #12]
 5874 00a8 1B68     		ldr	r3, [r3]
 5875 00aa 0121     		movs	r1, #1
 5876 00ac 8A43     		bics	r2, r1
 5877 00ae 9A60     		str	r2, [r3, #8]
3159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
 5878              		.loc 1 3160 25
 5879 00b0 FB68     		ldr	r3, [r7, #12]
 5880 00b2 2022     		movs	r2, #32
 5881 00b4 5A67     		str	r2, [r3, #116]
3161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 5882              		.loc 1 3161 26
 5883 00b6 FB68     		ldr	r3, [r7, #12]
 5884 00b8 2022     		movs	r2, #32
 5885 00ba 9A67     		str	r2, [r3, #120]
3162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
 5886              		.loc 1 3162 28
 5887 00bc FB68     		ldr	r3, [r7, #12]
 5888 00be 2022     		movs	r2, #32
 5889 00c0 DA67     		str	r2, [r3, #124]
3163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           
3164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Process Unlocked */
3165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           __HAL_UNLOCK(huart);
 5890              		.loc 1 3165 11
 5891 00c2 FB68     		ldr	r3, [r7, #12]
 5892 00c4 7022     		movs	r2, #112
 5893 00c6 0021     		movs	r1, #0
 5894 00c8 9954     		strb	r1, [r3, r2]
3166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           
3167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           return HAL_TIMEOUT;
 5895              		.loc 1 3167 18
 5896 00ca 0323     		movs	r3, #3
 5897 00cc 0FE0     		b	.L288
 5898              	.L285:
3130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 5899              		.loc 1 3130 11
 5900 00ce FB68     		ldr	r3, [r7, #12]
 5901 00d0 1B68     		ldr	r3, [r3]
 5902 00d2 DB69     		ldr	r3, [r3, #28]
 5903 00d4 BA68     		ldr	r2, [r7, #8]
 5904 00d6 1340     		ands	r3, r2
3130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 5905              		.loc 1 3130 50
 5906 00d8 BA68     		ldr	r2, [r7, #8]
 5907 00da D31A     		subs	r3, r2, r3
 5908 00dc 5A42     		rsbs	r2, r3, #0
 5909 00de 5341     		adcs	r3, r3, r2
 5910 00e0 DBB2     		uxtb	r3, r3
 5911 00e2 1A00     		movs	r2, r3
ARM GAS  /tmp/ccTcPcT8.s 			page 159


3130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 5912              		.loc 1 3130 59
 5913 00e4 FB1D     		adds	r3, r7, #7
 5914 00e6 1B78     		ldrb	r3, [r3]
 5915 00e8 9A42     		cmp	r2, r3
 5916 00ea 92D0     		beq	.L290
3168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
3169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
3170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 5917              		.loc 1 3172 10
 5918 00ec 0023     		movs	r3, #0
 5919              	.L288:
3173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 5920              		.loc 1 3173 1
 5921 00ee 1800     		movs	r0, r3
 5922 00f0 BD46     		mov	sp, r7
 5923 00f2 04B0     		add	sp, sp, #16
 5924              		@ sp needed
 5925 00f4 80BD     		pop	{r7, pc}
 5926              	.L293:
 5927 00f6 C046     		.align	2
 5928              	.L292:
 5929 00f8 5FFEFFFF 		.word	-417
 5930              		.cfi_endproc
 5931              	.LFE83:
 5933              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 5934              		.align	1
 5935              		.syntax unified
 5936              		.code	16
 5937              		.thumb_func
 5939              	UART_EndTxTransfer:
 5940              	.LFB84:
3174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
3179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 5941              		.loc 1 3182 1
 5942              		.cfi_startproc
 5943              		@ args = 0, pretend = 0, frame = 8
 5944              		@ frame_needed = 1, uses_anonymous_args = 0
 5945 0000 80B5     		push	{r7, lr}
 5946              	.LCFI132:
 5947              		.cfi_def_cfa_offset 8
 5948              		.cfi_offset 7, -8
 5949              		.cfi_offset 14, -4
 5950 0002 82B0     		sub	sp, sp, #8
 5951              	.LCFI133:
 5952              		.cfi_def_cfa_offset 16
 5953 0004 00AF     		add	r7, sp, #0
 5954              	.LCFI134:
ARM GAS  /tmp/ccTcPcT8.s 			page 160


 5955              		.cfi_def_cfa_register 7
 5956 0006 7860     		str	r0, [r7, #4]
3183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5957              		.loc 1 3184 3
 5958 0008 7B68     		ldr	r3, [r7, #4]
 5959 000a 1B68     		ldr	r3, [r3]
 5960 000c 1A68     		ldr	r2, [r3]
 5961 000e 7B68     		ldr	r3, [r7, #4]
 5962 0010 1B68     		ldr	r3, [r3]
 5963 0012 C021     		movs	r1, #192
 5964 0014 8A43     		bics	r2, r1
 5965 0016 1A60     		str	r2, [r3]
3185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5966              		.loc 1 3187 17
 5967 0018 7B68     		ldr	r3, [r7, #4]
 5968 001a 2022     		movs	r2, #32
 5969 001c 5A67     		str	r2, [r3, #116]
3188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 5970              		.loc 1 3188 1
 5971 001e C046     		nop
 5972 0020 BD46     		mov	sp, r7
 5973 0022 02B0     		add	sp, sp, #8
 5974              		@ sp needed
 5975 0024 80BD     		pop	{r7, pc}
 5976              		.cfi_endproc
 5977              	.LFE84:
 5979              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 5980              		.align	1
 5981              		.syntax unified
 5982              		.code	16
 5983              		.thumb_func
 5985              	UART_EndRxTransfer:
 5986              	.LFB85:
3189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
3194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 5987              		.loc 1 3197 1
 5988              		.cfi_startproc
 5989              		@ args = 0, pretend = 0, frame = 8
 5990              		@ frame_needed = 1, uses_anonymous_args = 0
 5991 0000 80B5     		push	{r7, lr}
 5992              	.LCFI135:
 5993              		.cfi_def_cfa_offset 8
 5994              		.cfi_offset 7, -8
 5995              		.cfi_offset 14, -4
 5996 0002 82B0     		sub	sp, sp, #8
 5997              	.LCFI136:
 5998              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccTcPcT8.s 			page 161


 5999 0004 00AF     		add	r7, sp, #0
 6000              	.LCFI137:
 6001              		.cfi_def_cfa_register 7
 6002 0006 7860     		str	r0, [r7, #4]
3198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 6003              		.loc 1 3199 3
 6004 0008 7B68     		ldr	r3, [r7, #4]
 6005 000a 1B68     		ldr	r3, [r3]
 6006 000c 1A68     		ldr	r2, [r3]
 6007 000e 7B68     		ldr	r3, [r7, #4]
 6008 0010 1B68     		ldr	r3, [r3]
 6009 0012 0A49     		ldr	r1, .L296
 6010 0014 0A40     		ands	r2, r1
 6011 0016 1A60     		str	r2, [r3]
3200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6012              		.loc 1 3200 3
 6013 0018 7B68     		ldr	r3, [r7, #4]
 6014 001a 1B68     		ldr	r3, [r3]
 6015 001c 9A68     		ldr	r2, [r3, #8]
 6016 001e 7B68     		ldr	r3, [r7, #4]
 6017 0020 1B68     		ldr	r3, [r3]
 6018 0022 0121     		movs	r1, #1
 6019 0024 8A43     		bics	r2, r1
 6020 0026 9A60     		str	r2, [r3, #8]
3201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6021              		.loc 1 3203 18
 6022 0028 7B68     		ldr	r3, [r7, #4]
 6023 002a 2022     		movs	r2, #32
 6024 002c 9A67     		str	r2, [r3, #120]
3204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset RxIsr function pointer */
3206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxISR = NULL;
 6025              		.loc 1 3206 16
 6026 002e 7B68     		ldr	r3, [r7, #4]
 6027 0030 0022     		movs	r2, #0
 6028 0032 1A66     		str	r2, [r3, #96]
3207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6029              		.loc 1 3207 1
 6030 0034 C046     		nop
 6031 0036 BD46     		mov	sp, r7
 6032 0038 02B0     		add	sp, sp, #8
 6033              		@ sp needed
 6034 003a 80BD     		pop	{r7, pc}
 6035              	.L297:
 6036              		.align	2
 6037              	.L296:
 6038 003c DFFEFFFF 		.word	-289
 6039              		.cfi_endproc
 6040              	.LFE85:
 6042              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 6043              		.align	1
 6044              		.syntax unified
 6045              		.code	16
 6046              		.thumb_func
ARM GAS  /tmp/ccTcPcT8.s 			page 162


 6048              	UART_DMATransmitCplt:
 6049              	.LFB86:
3208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
3212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
3213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
3216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6050              		.loc 1 3216 1
 6051              		.cfi_startproc
 6052              		@ args = 0, pretend = 0, frame = 16
 6053              		@ frame_needed = 1, uses_anonymous_args = 0
 6054 0000 80B5     		push	{r7, lr}
 6055              	.LCFI138:
 6056              		.cfi_def_cfa_offset 8
 6057              		.cfi_offset 7, -8
 6058              		.cfi_offset 14, -4
 6059 0002 84B0     		sub	sp, sp, #16
 6060              	.LCFI139:
 6061              		.cfi_def_cfa_offset 24
 6062 0004 00AF     		add	r7, sp, #0
 6063              	.LCFI140:
 6064              		.cfi_def_cfa_register 7
 6065 0006 7860     		str	r0, [r7, #4]
3217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6066              		.loc 1 3217 23
 6067 0008 7B68     		ldr	r3, [r7, #4]
 6068 000a 5B6A     		ldr	r3, [r3, #36]
 6069 000c FB60     		str	r3, [r7, #12]
3218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
3220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
 6070              		.loc 1 3220 17
 6071 000e 7B68     		ldr	r3, [r7, #4]
 6072 0010 9B69     		ldr	r3, [r3, #24]
 6073              		.loc 1 3220 6
 6074 0012 202B     		cmp	r3, #32
 6075 0014 14D0     		beq	.L299
3221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U;
 6076              		.loc 1 3222 24
 6077 0016 FB68     		ldr	r3, [r7, #12]
 6078 0018 5222     		movs	r2, #82
 6079 001a 0021     		movs	r1, #0
 6080 001c 9952     		strh	r1, [r3, r2]
3223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
3225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
3226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 6081              		.loc 1 3226 5
 6082 001e FB68     		ldr	r3, [r7, #12]
 6083 0020 1B68     		ldr	r3, [r3]
 6084 0022 9A68     		ldr	r2, [r3, #8]
 6085 0024 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 163


 6086 0026 1B68     		ldr	r3, [r3]
 6087 0028 8021     		movs	r1, #128
 6088 002a 8A43     		bics	r2, r1
 6089 002c 9A60     		str	r2, [r3, #8]
3227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 6090              		.loc 1 3229 5
 6091 002e FB68     		ldr	r3, [r7, #12]
 6092 0030 1B68     		ldr	r3, [r3]
 6093 0032 1A68     		ldr	r2, [r3]
 6094 0034 FB68     		ldr	r3, [r7, #12]
 6095 0036 1B68     		ldr	r3, [r3]
 6096 0038 4021     		movs	r1, #64
 6097 003a 0A43     		orrs	r2, r1
 6098 003c 1A60     		str	r2, [r3]
3230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Circular mode */
3232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
3233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6099              		.loc 1 3242 1
 6100 003e 03E0     		b	.L301
 6101              	.L299:
3239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 6102              		.loc 1 3239 5
 6103 0040 FB68     		ldr	r3, [r7, #12]
 6104 0042 1800     		movs	r0, r3
 6105 0044 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 6106              	.L301:
 6107              		.loc 1 3242 1
 6108 0048 C046     		nop
 6109 004a BD46     		mov	sp, r7
 6110 004c 04B0     		add	sp, sp, #16
 6111              		@ sp needed
 6112 004e 80BD     		pop	{r7, pc}
 6113              		.cfi_endproc
 6114              	.LFE86:
 6116              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 6117              		.align	1
 6118              		.syntax unified
 6119              		.code	16
 6120              		.thumb_func
 6122              	UART_DMATxHalfCplt:
 6123              	.LFB87:
3243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
3246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
ARM GAS  /tmp/ccTcPcT8.s 			page 164


3247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6124              		.loc 1 3250 1
 6125              		.cfi_startproc
 6126              		@ args = 0, pretend = 0, frame = 16
 6127              		@ frame_needed = 1, uses_anonymous_args = 0
 6128 0000 80B5     		push	{r7, lr}
 6129              	.LCFI141:
 6130              		.cfi_def_cfa_offset 8
 6131              		.cfi_offset 7, -8
 6132              		.cfi_offset 14, -4
 6133 0002 84B0     		sub	sp, sp, #16
 6134              	.LCFI142:
 6135              		.cfi_def_cfa_offset 24
 6136 0004 00AF     		add	r7, sp, #0
 6137              	.LCFI143:
 6138              		.cfi_def_cfa_register 7
 6139 0006 7860     		str	r0, [r7, #4]
3251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6140              		.loc 1 3251 23
 6141 0008 7B68     		ldr	r3, [r7, #4]
 6142 000a 5B6A     		ldr	r3, [r3, #36]
 6143 000c FB60     		str	r3, [r7, #12]
3252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
3255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
3258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 6144              		.loc 1 3258 3
 6145 000e FB68     		ldr	r3, [r7, #12]
 6146 0010 1800     		movs	r0, r3
 6147 0012 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
3259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6148              		.loc 1 3260 1
 6149 0016 C046     		nop
 6150 0018 BD46     		mov	sp, r7
 6151 001a 04B0     		add	sp, sp, #16
 6152              		@ sp needed
 6153 001c 80BD     		pop	{r7, pc}
 6154              		.cfi_endproc
 6155              	.LFE87:
 6157              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 6158              		.align	1
 6159              		.syntax unified
 6160              		.code	16
 6161              		.thumb_func
 6163              	UART_DMAReceiveCplt:
 6164              	.LFB88:
3261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
3264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
ARM GAS  /tmp/ccTcPcT8.s 			page 165


3265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6165              		.loc 1 3268 1
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 16
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
 6169 0000 80B5     		push	{r7, lr}
 6170              	.LCFI144:
 6171              		.cfi_def_cfa_offset 8
 6172              		.cfi_offset 7, -8
 6173              		.cfi_offset 14, -4
 6174 0002 84B0     		sub	sp, sp, #16
 6175              	.LCFI145:
 6176              		.cfi_def_cfa_offset 24
 6177 0004 00AF     		add	r7, sp, #0
 6178              	.LCFI146:
 6179              		.cfi_def_cfa_register 7
 6180 0006 7860     		str	r0, [r7, #4]
3269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6181              		.loc 1 3269 23
 6182 0008 7B68     		ldr	r3, [r7, #4]
 6183 000a 5B6A     		ldr	r3, [r3, #36]
 6184 000c FB60     		str	r3, [r7, #12]
3270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
3272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
 6185              		.loc 1 3272 17
 6186 000e 7B68     		ldr	r3, [r7, #4]
 6187 0010 9B69     		ldr	r3, [r3, #24]
 6188              		.loc 1 3272 6
 6189 0012 202B     		cmp	r3, #32
 6190 0014 1ED0     		beq	.L304
3273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 6191              		.loc 1 3274 24
 6192 0016 FB68     		ldr	r3, [r7, #12]
 6193 0018 5A22     		movs	r2, #90
 6194 001a 0021     		movs	r1, #0
 6195 001c 9952     		strh	r1, [r3, r2]
3275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 6196              		.loc 1 3277 5
 6197 001e FB68     		ldr	r3, [r7, #12]
 6198 0020 1B68     		ldr	r3, [r3]
 6199 0022 1A68     		ldr	r2, [r3]
 6200 0024 FB68     		ldr	r3, [r7, #12]
 6201 0026 1B68     		ldr	r3, [r3]
 6202 0028 0E49     		ldr	r1, .L305
 6203 002a 0A40     		ands	r2, r1
 6204 002c 1A60     		str	r2, [r3]
3278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6205              		.loc 1 3278 5
 6206 002e FB68     		ldr	r3, [r7, #12]
 6207 0030 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 166


 6208 0032 9A68     		ldr	r2, [r3, #8]
 6209 0034 FB68     		ldr	r3, [r7, #12]
 6210 0036 1B68     		ldr	r3, [r3]
 6211 0038 0121     		movs	r1, #1
 6212 003a 8A43     		bics	r2, r1
 6213 003c 9A60     		str	r2, [r3, #8]
3279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
3282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 6214              		.loc 1 3282 5
 6215 003e FB68     		ldr	r3, [r7, #12]
 6216 0040 1B68     		ldr	r3, [r3]
 6217 0042 9A68     		ldr	r2, [r3, #8]
 6218 0044 FB68     		ldr	r3, [r7, #12]
 6219 0046 1B68     		ldr	r3, [r3]
 6220 0048 4021     		movs	r1, #64
 6221 004a 8A43     		bics	r2, r1
 6222 004c 9A60     		str	r2, [r3, #8]
3283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 6223              		.loc 1 3285 20
 6224 004e FB68     		ldr	r3, [r7, #12]
 6225 0050 2022     		movs	r2, #32
 6226 0052 9A67     		str	r2, [r3, #120]
 6227              	.L304:
3286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered Rx complete callback*/
3290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxCpltCallback(huart);
3291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
3293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 6228              		.loc 1 3293 3
 6229 0054 FB68     		ldr	r3, [r7, #12]
 6230 0056 1800     		movs	r0, r3
 6231 0058 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
3294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6232              		.loc 1 3295 1
 6233 005c C046     		nop
 6234 005e BD46     		mov	sp, r7
 6235 0060 04B0     		add	sp, sp, #16
 6236              		@ sp needed
 6237 0062 80BD     		pop	{r7, pc}
 6238              	.L306:
 6239              		.align	2
 6240              	.L305:
 6241 0064 FFFEFFFF 		.word	-257
 6242              		.cfi_endproc
 6243              	.LFE88:
 6245              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 6246              		.align	1
 6247              		.syntax unified
 6248              		.code	16
ARM GAS  /tmp/ccTcPcT8.s 			page 167


 6249              		.thumb_func
 6251              	UART_DMARxHalfCplt:
 6252              	.LFB89:
3296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
3300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6253              		.loc 1 3303 1
 6254              		.cfi_startproc
 6255              		@ args = 0, pretend = 0, frame = 16
 6256              		@ frame_needed = 1, uses_anonymous_args = 0
 6257 0000 80B5     		push	{r7, lr}
 6258              	.LCFI147:
 6259              		.cfi_def_cfa_offset 8
 6260              		.cfi_offset 7, -8
 6261              		.cfi_offset 14, -4
 6262 0002 84B0     		sub	sp, sp, #16
 6263              	.LCFI148:
 6264              		.cfi_def_cfa_offset 24
 6265 0004 00AF     		add	r7, sp, #0
 6266              	.LCFI149:
 6267              		.cfi_def_cfa_register 7
 6268 0006 7860     		str	r0, [r7, #4]
3304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6269              		.loc 1 3304 23
 6270 0008 7B68     		ldr	r3, [r7, #4]
 6271 000a 5B6A     		ldr	r3, [r3, #36]
 6272 000c FB60     		str	r3, [r7, #12]
3305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
3308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
3309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
3311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
 6273              		.loc 1 3311 3
 6274 000e FB68     		ldr	r3, [r7, #12]
 6275 0010 1800     		movs	r0, r3
 6276 0012 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
3312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6277              		.loc 1 3313 1
 6278 0016 C046     		nop
 6279 0018 BD46     		mov	sp, r7
 6280 001a 04B0     		add	sp, sp, #16
 6281              		@ sp needed
 6282 001c 80BD     		pop	{r7, pc}
 6283              		.cfi_endproc
 6284              	.LFE89:
 6286              		.section	.text.UART_DMAError,"ax",%progbits
 6287              		.align	1
 6288              		.syntax unified
 6289              		.code	16
ARM GAS  /tmp/ccTcPcT8.s 			page 168


 6290              		.thumb_func
 6292              	UART_DMAError:
 6293              	.LFB90:
3314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
3318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6294              		.loc 1 3321 1
 6295              		.cfi_startproc
 6296              		@ args = 0, pretend = 0, frame = 24
 6297              		@ frame_needed = 1, uses_anonymous_args = 0
 6298 0000 80B5     		push	{r7, lr}
 6299              	.LCFI150:
 6300              		.cfi_def_cfa_offset 8
 6301              		.cfi_offset 7, -8
 6302              		.cfi_offset 14, -4
 6303 0002 86B0     		sub	sp, sp, #24
 6304              	.LCFI151:
 6305              		.cfi_def_cfa_offset 32
 6306 0004 00AF     		add	r7, sp, #0
 6307              	.LCFI152:
 6308              		.cfi_def_cfa_register 7
 6309 0006 7860     		str	r0, [r7, #4]
3322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6310              		.loc 1 3322 23
 6311 0008 7B68     		ldr	r3, [r7, #4]
 6312 000a 5B6A     		ldr	r3, [r3, #36]
 6313 000c 7B61     		str	r3, [r7, #20]
3323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 6314              		.loc 1 3324 31
 6315 000e 7B69     		ldr	r3, [r7, #20]
 6316 0010 5B6F     		ldr	r3, [r3, #116]
 6317 0012 3B61     		str	r3, [r7, #16]
3325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 6318              		.loc 1 3325 31
 6319 0014 7B69     		ldr	r3, [r7, #20]
 6320 0016 9B6F     		ldr	r3, [r3, #120]
 6321 0018 FB60     		str	r3, [r7, #12]
3326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 6322              		.loc 1 3328 8
 6323 001a 7B69     		ldr	r3, [r7, #20]
 6324 001c 1B68     		ldr	r3, [r3]
 6325 001e 9B68     		ldr	r3, [r3, #8]
 6326 0020 8022     		movs	r2, #128
 6327 0022 1340     		ands	r3, r2
 6328              		.loc 1 3328 6
 6329 0024 802B     		cmp	r3, #128
 6330 0026 0AD1     		bne	.L309
 6331              		.loc 1 3328 62 discriminator 1
 6332 0028 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccTcPcT8.s 			page 169


 6333 002a 212B     		cmp	r3, #33
 6334 002c 07D1     		bne	.L309
3329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U;
 6335              		.loc 1 3331 24
 6336 002e 7B69     		ldr	r3, [r7, #20]
 6337 0030 5222     		movs	r2, #82
 6338 0032 0021     		movs	r1, #0
 6339 0034 9952     		strh	r1, [r3, r2]
3332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 6340              		.loc 1 3332 5
 6341 0036 7B69     		ldr	r3, [r7, #20]
 6342 0038 1800     		movs	r0, r3
 6343 003a FFF7FEFF 		bl	UART_EndTxTransfer
 6344              	.L309:
3333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 6345              		.loc 1 3336 8
 6346 003e 7B69     		ldr	r3, [r7, #20]
 6347 0040 1B68     		ldr	r3, [r3]
 6348 0042 9B68     		ldr	r3, [r3, #8]
 6349 0044 4022     		movs	r2, #64
 6350 0046 1340     		ands	r3, r2
 6351              		.loc 1 3336 6
 6352 0048 402B     		cmp	r3, #64
 6353 004a 0AD1     		bne	.L310
 6354              		.loc 1 3336 62 discriminator 1
 6355 004c FB68     		ldr	r3, [r7, #12]
 6356 004e 222B     		cmp	r3, #34
 6357 0050 07D1     		bne	.L310
3337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 6358              		.loc 1 3339 24
 6359 0052 7B69     		ldr	r3, [r7, #20]
 6360 0054 5A22     		movs	r2, #90
 6361 0056 0021     		movs	r1, #0
 6362 0058 9952     		strh	r1, [r3, r2]
3340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 6363              		.loc 1 3340 5
 6364 005a 7B69     		ldr	r3, [r7, #20]
 6365 005c 1800     		movs	r0, r3
 6366 005e FFF7FEFF 		bl	UART_EndRxTransfer
 6367              	.L310:
3341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 6368              		.loc 1 3343 8
 6369 0062 7B69     		ldr	r3, [r7, #20]
 6370 0064 DB6F     		ldr	r3, [r3, #124]
 6371              		.loc 1 3343 20
 6372 0066 1022     		movs	r2, #16
 6373 0068 1A43     		orrs	r2, r3
 6374 006a 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccTcPcT8.s 			page 170


 6375 006c DA67     		str	r2, [r3, #124]
3344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered error callback*/
3347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCallback(huart);
3348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak error callback*/
3350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 6376              		.loc 1 3350 3
 6377 006e 7B69     		ldr	r3, [r7, #20]
 6378 0070 1800     		movs	r0, r3
 6379 0072 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6380              		.loc 1 3352 1
 6381 0076 C046     		nop
 6382 0078 BD46     		mov	sp, r7
 6383 007a 06B0     		add	sp, sp, #24
 6384              		@ sp needed
 6385 007c 80BD     		pop	{r7, pc}
 6386              		.cfi_endproc
 6387              	.LFE90:
 6389              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 6390              		.align	1
 6391              		.syntax unified
 6392              		.code	16
 6393              		.thumb_func
 6395              	UART_DMAAbortOnError:
 6396              	.LFB91:
3353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
3358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6397              		.loc 1 3361 1
 6398              		.cfi_startproc
 6399              		@ args = 0, pretend = 0, frame = 16
 6400              		@ frame_needed = 1, uses_anonymous_args = 0
 6401 0000 80B5     		push	{r7, lr}
 6402              	.LCFI153:
 6403              		.cfi_def_cfa_offset 8
 6404              		.cfi_offset 7, -8
 6405              		.cfi_offset 14, -4
 6406 0002 84B0     		sub	sp, sp, #16
 6407              	.LCFI154:
 6408              		.cfi_def_cfa_offset 24
 6409 0004 00AF     		add	r7, sp, #0
 6410              	.LCFI155:
 6411              		.cfi_def_cfa_register 7
 6412 0006 7860     		str	r0, [r7, #4]
3362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6413              		.loc 1 3362 23
 6414 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 171


 6415 000a 5B6A     		ldr	r3, [r3, #36]
 6416 000c FB60     		str	r3, [r7, #12]
3363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 6417              		.loc 1 3363 22
 6418 000e FB68     		ldr	r3, [r7, #12]
 6419 0010 5A22     		movs	r2, #90
 6420 0012 0021     		movs	r1, #0
 6421 0014 9952     		strh	r1, [r3, r2]
3364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 6422              		.loc 1 3364 22
 6423 0016 FB68     		ldr	r3, [r7, #12]
 6424 0018 5222     		movs	r2, #82
 6425 001a 0021     		movs	r1, #0
 6426 001c 9952     		strh	r1, [r3, r2]
3365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered error callback*/
3368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCallback(huart);
3369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak error callback*/
3371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 6427              		.loc 1 3371 3
 6428 001e FB68     		ldr	r3, [r7, #12]
 6429 0020 1800     		movs	r0, r3
 6430 0022 FFF7FEFF 		bl	HAL_UART_ErrorCallback
3372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6431              		.loc 1 3373 1
 6432 0026 C046     		nop
 6433 0028 BD46     		mov	sp, r7
 6434 002a 04B0     		add	sp, sp, #16
 6435              		@ sp needed
 6436 002c 80BD     		pop	{r7, pc}
 6437              		.cfi_endproc
 6438              	.LFE91:
 6440              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 6441              		.align	1
 6442              		.syntax unified
 6443              		.code	16
 6444              		.thumb_func
 6446              	UART_DMATxAbortCallback:
 6447              	.LFB92:
3374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
3381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6448              		.loc 1 3384 1
 6449              		.cfi_startproc
 6450              		@ args = 0, pretend = 0, frame = 16
 6451              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccTcPcT8.s 			page 172


 6452 0000 80B5     		push	{r7, lr}
 6453              	.LCFI156:
 6454              		.cfi_def_cfa_offset 8
 6455              		.cfi_offset 7, -8
 6456              		.cfi_offset 14, -4
 6457 0002 84B0     		sub	sp, sp, #16
 6458              	.LCFI157:
 6459              		.cfi_def_cfa_offset 24
 6460 0004 00AF     		add	r7, sp, #0
 6461              	.LCFI158:
 6462              		.cfi_def_cfa_register 7
 6463 0006 7860     		str	r0, [r7, #4]
3385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6464              		.loc 1 3385 23
 6465 0008 7B68     		ldr	r3, [r7, #4]
 6466 000a 5B6A     		ldr	r3, [r3, #36]
 6467 000c FB60     		str	r3, [r7, #12]
3386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 6468              		.loc 1 3387 8
 6469 000e FB68     		ldr	r3, [r7, #12]
 6470 0010 9B6E     		ldr	r3, [r3, #104]
 6471              		.loc 1 3387 36
 6472 0012 0022     		movs	r2, #0
 6473 0014 5A63     		str	r2, [r3, #52]
3388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->hdmarx != NULL)
 6474              		.loc 1 3390 12
 6475 0016 FB68     		ldr	r3, [r7, #12]
 6476 0018 DB6E     		ldr	r3, [r3, #108]
 6477              		.loc 1 3390 6
 6478 001a 002B     		cmp	r3, #0
 6479 001c 04D0     		beq	.L313
3391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
 6480              		.loc 1 3392 14
 6481 001e FB68     		ldr	r3, [r7, #12]
 6482 0020 DB6E     		ldr	r3, [r3, #108]
 6483              		.loc 1 3392 22
 6484 0022 5B6B     		ldr	r3, [r3, #52]
 6485              		.loc 1 3392 8
 6486 0024 002B     		cmp	r3, #0
 6487 0026 19D1     		bne	.L315
 6488              	.L313:
3393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
3395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 6489              		.loc 1 3399 22
 6490 0028 FB68     		ldr	r3, [r7, #12]
 6491 002a 5222     		movs	r2, #82
 6492 002c 0021     		movs	r1, #0
 6493 002e 9952     		strh	r1, [r3, r2]
ARM GAS  /tmp/ccTcPcT8.s 			page 173


3400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 6494              		.loc 1 3400 22
 6495 0030 FB68     		ldr	r3, [r7, #12]
 6496 0032 5A22     		movs	r2, #90
 6497 0034 0021     		movs	r1, #0
 6498 0036 9952     		strh	r1, [r3, r2]
3401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset errorCode */
3403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6499              		.loc 1 3403 20
 6500 0038 FB68     		ldr	r3, [r7, #12]
 6501 003a 0022     		movs	r2, #0
 6502 003c DA67     		str	r2, [r3, #124]
3404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 6503              		.loc 1 3406 3
 6504 003e FB68     		ldr	r3, [r7, #12]
 6505 0040 1B68     		ldr	r3, [r3]
 6506 0042 0F22     		movs	r2, #15
 6507 0044 1A62     		str	r2, [r3, #32]
3407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 6508              		.loc 1 3410 18
 6509 0046 FB68     		ldr	r3, [r7, #12]
 6510 0048 2022     		movs	r2, #32
 6511 004a 5A67     		str	r2, [r3, #116]
3411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6512              		.loc 1 3411 18
 6513 004c FB68     		ldr	r3, [r7, #12]
 6514 004e 2022     		movs	r2, #32
 6515 0050 9A67     		str	r2, [r3, #120]
3412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
3414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call registered Abort complete callback */
3416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6516              		.loc 1 3419 3
 6517 0052 FB68     		ldr	r3, [r7, #12]
 6518 0054 1800     		movs	r0, r3
 6519 0056 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6520 005a 00E0     		b	.L312
 6521              	.L315:
3394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6522              		.loc 1 3394 7
 6523 005c C046     		nop
 6524              	.L312:
3420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6525              		.loc 1 3421 1
 6526 005e BD46     		mov	sp, r7
 6527 0060 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccTcPcT8.s 			page 174


 6528              		@ sp needed
 6529 0062 80BD     		pop	{r7, pc}
 6530              		.cfi_endproc
 6531              	.LFE92:
 6533              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 6534              		.align	1
 6535              		.syntax unified
 6536              		.code	16
 6537              		.thumb_func
 6539              	UART_DMARxAbortCallback:
 6540              	.LFB93:
3422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
3430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6541              		.loc 1 3433 1
 6542              		.cfi_startproc
 6543              		@ args = 0, pretend = 0, frame = 16
 6544              		@ frame_needed = 1, uses_anonymous_args = 0
 6545 0000 80B5     		push	{r7, lr}
 6546              	.LCFI159:
 6547              		.cfi_def_cfa_offset 8
 6548              		.cfi_offset 7, -8
 6549              		.cfi_offset 14, -4
 6550 0002 84B0     		sub	sp, sp, #16
 6551              	.LCFI160:
 6552              		.cfi_def_cfa_offset 24
 6553 0004 00AF     		add	r7, sp, #0
 6554              	.LCFI161:
 6555              		.cfi_def_cfa_register 7
 6556 0006 7860     		str	r0, [r7, #4]
3434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6557              		.loc 1 3434 23
 6558 0008 7B68     		ldr	r3, [r7, #4]
 6559 000a 5B6A     		ldr	r3, [r3, #36]
 6560 000c FB60     		str	r3, [r7, #12]
3435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 6561              		.loc 1 3436 8
 6562 000e FB68     		ldr	r3, [r7, #12]
 6563 0010 DB6E     		ldr	r3, [r3, #108]
 6564              		.loc 1 3436 36
 6565 0012 0022     		movs	r2, #0
 6566 0014 5A63     		str	r2, [r3, #52]
3437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->hdmatx != NULL)
 6567              		.loc 1 3439 12
 6568 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccTcPcT8.s 			page 175


 6569 0018 9B6E     		ldr	r3, [r3, #104]
 6570              		.loc 1 3439 6
 6571 001a 002B     		cmp	r3, #0
 6572 001c 04D0     		beq	.L317
3440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
 6573              		.loc 1 3441 14
 6574 001e FB68     		ldr	r3, [r7, #12]
 6575 0020 9B6E     		ldr	r3, [r3, #104]
 6576              		.loc 1 3441 22
 6577 0022 5B6B     		ldr	r3, [r3, #52]
 6578              		.loc 1 3441 8
 6579 0024 002B     		cmp	r3, #0
 6580 0026 21D1     		bne	.L319
 6581              	.L317:
3442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
3444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 6582              		.loc 1 3448 22
 6583 0028 FB68     		ldr	r3, [r7, #12]
 6584 002a 5222     		movs	r2, #82
 6585 002c 0021     		movs	r1, #0
 6586 002e 9952     		strh	r1, [r3, r2]
3449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 6587              		.loc 1 3449 22
 6588 0030 FB68     		ldr	r3, [r7, #12]
 6589 0032 5A22     		movs	r2, #90
 6590 0034 0021     		movs	r1, #0
 6591 0036 9952     		strh	r1, [r3, r2]
3450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset errorCode */
3452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 6592              		.loc 1 3452 20
 6593 0038 FB68     		ldr	r3, [r7, #12]
 6594 003a 0022     		movs	r2, #0
 6595 003c DA67     		str	r2, [r3, #124]
3453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 6596              		.loc 1 3455 3
 6597 003e FB68     		ldr	r3, [r7, #12]
 6598 0040 1B68     		ldr	r3, [r3]
 6599 0042 0F22     		movs	r2, #15
 6600 0044 1A62     		str	r2, [r3, #32]
3456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Discard the received data */
3458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 6601              		.loc 1 3458 3
 6602 0046 FB68     		ldr	r3, [r7, #12]
 6603 0048 1B68     		ldr	r3, [r3]
 6604 004a 9A69     		ldr	r2, [r3, #24]
 6605 004c FB68     		ldr	r3, [r7, #12]
 6606 004e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 176


 6607 0050 0821     		movs	r1, #8
 6608 0052 0A43     		orrs	r2, r1
 6609 0054 9A61     		str	r2, [r3, #24]
3459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 6610              		.loc 1 3461 18
 6611 0056 FB68     		ldr	r3, [r7, #12]
 6612 0058 2022     		movs	r2, #32
 6613 005a 5A67     		str	r2, [r3, #116]
3462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6614              		.loc 1 3462 18
 6615 005c FB68     		ldr	r3, [r7, #12]
 6616 005e 2022     		movs	r2, #32
 6617 0060 9A67     		str	r2, [r3, #120]
3463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
3465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call registered Abort complete callback */
3467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 6618              		.loc 1 3470 3
 6619 0062 FB68     		ldr	r3, [r7, #12]
 6620 0064 1800     		movs	r0, r3
 6621 0066 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 6622 006a 00E0     		b	.L316
 6623              	.L319:
3443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6624              		.loc 1 3443 7
 6625 006c C046     		nop
 6626              	.L316:
3471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6627              		.loc 1 3472 1
 6628 006e BD46     		mov	sp, r7
 6629 0070 04B0     		add	sp, sp, #16
 6630              		@ sp needed
 6631 0072 80BD     		pop	{r7, pc}
 6632              		.cfi_endproc
 6633              	.LFE93:
 6635              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 6636              		.align	1
 6637              		.syntax unified
 6638              		.code	16
 6639              		.thumb_func
 6641              	UART_DMATxOnlyAbortCallback:
 6642              	.LFB94:
3473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
ARM GAS  /tmp/ccTcPcT8.s 			page 177


3481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6643              		.loc 1 3484 1
 6644              		.cfi_startproc
 6645              		@ args = 0, pretend = 0, frame = 16
 6646              		@ frame_needed = 1, uses_anonymous_args = 0
 6647 0000 80B5     		push	{r7, lr}
 6648              	.LCFI162:
 6649              		.cfi_def_cfa_offset 8
 6650              		.cfi_offset 7, -8
 6651              		.cfi_offset 14, -4
 6652 0002 84B0     		sub	sp, sp, #16
 6653              	.LCFI163:
 6654              		.cfi_def_cfa_offset 24
 6655 0004 00AF     		add	r7, sp, #0
 6656              	.LCFI164:
 6657              		.cfi_def_cfa_register 7
 6658 0006 7860     		str	r0, [r7, #4]
3485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 6659              		.loc 1 3485 23
 6660 0008 7B68     		ldr	r3, [r7, #4]
 6661 000a 5B6A     		ldr	r3, [r3, #36]
 6662 000c FB60     		str	r3, [r7, #12]
3486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 6663              		.loc 1 3487 22
 6664 000e FB68     		ldr	r3, [r7, #12]
 6665 0010 5222     		movs	r2, #82
 6666 0012 0021     		movs	r1, #0
 6667 0014 9952     		strh	r1, [r3, r2]
3488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6668              		.loc 1 3491 17
 6669 0016 FB68     		ldr	r3, [r7, #12]
 6670 0018 2022     		movs	r2, #32
 6671 001a 5A67     		str	r2, [r3, #116]
3492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
3494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 6672              		.loc 1 3499 3
 6673 001c FB68     		ldr	r3, [r7, #12]
 6674 001e 1800     		movs	r0, r3
 6675 0020 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
3500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6676              		.loc 1 3501 1
 6677 0024 C046     		nop
 6678 0026 BD46     		mov	sp, r7
ARM GAS  /tmp/ccTcPcT8.s 			page 178


 6679 0028 04B0     		add	sp, sp, #16
 6680              		@ sp needed
 6681 002a 80BD     		pop	{r7, pc}
 6682              		.cfi_endproc
 6683              	.LFE94:
 6685              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 6686              		.align	1
 6687              		.syntax unified
 6688              		.code	16
 6689              		.thumb_func
 6691              	UART_DMARxOnlyAbortCallback:
 6692              	.LFB95:
3502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
3509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6693              		.loc 1 3512 1
 6694              		.cfi_startproc
 6695              		@ args = 0, pretend = 0, frame = 16
 6696              		@ frame_needed = 1, uses_anonymous_args = 0
 6697 0000 80B5     		push	{r7, lr}
 6698              	.LCFI165:
 6699              		.cfi_def_cfa_offset 8
 6700              		.cfi_offset 7, -8
 6701              		.cfi_offset 14, -4
 6702 0002 84B0     		sub	sp, sp, #16
 6703              	.LCFI166:
 6704              		.cfi_def_cfa_offset 24
 6705 0004 00AF     		add	r7, sp, #0
 6706              	.LCFI167:
 6707              		.cfi_def_cfa_register 7
 6708 0006 7860     		str	r0, [r7, #4]
3513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 6709              		.loc 1 3513 23
 6710 0008 7B68     		ldr	r3, [r7, #4]
 6711 000a 5B6A     		ldr	r3, [r3, #36]
 6712 000c FB60     		str	r3, [r7, #12]
3514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 6713              		.loc 1 3515 22
 6714 000e FB68     		ldr	r3, [r7, #12]
 6715 0010 5A22     		movs	r2, #90
 6716 0012 0021     		movs	r1, #0
 6717 0014 9952     		strh	r1, [r3, r2]
3516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 6718              		.loc 1 3518 3
 6719 0016 FB68     		ldr	r3, [r7, #12]
 6720 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 179


 6721 001a 0F22     		movs	r2, #15
 6722 001c 1A62     		str	r2, [r3, #32]
3519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Discard the received data */
3521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 6723              		.loc 1 3521 3
 6724 001e FB68     		ldr	r3, [r7, #12]
 6725 0020 1B68     		ldr	r3, [r3]
 6726 0022 9A69     		ldr	r2, [r3, #24]
 6727 0024 FB68     		ldr	r3, [r7, #12]
 6728 0026 1B68     		ldr	r3, [r3]
 6729 0028 0821     		movs	r1, #8
 6730 002a 0A43     		orrs	r2, r1
 6731 002c 9A61     		str	r2, [r3, #24]
3522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6732              		.loc 1 3524 18
 6733 002e FB68     		ldr	r3, [r7, #12]
 6734 0030 2022     		movs	r2, #32
 6735 0032 9A67     		str	r2, [r3, #120]
3525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
3527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 6736              		.loc 1 3532 3
 6737 0034 FB68     		ldr	r3, [r7, #12]
 6738 0036 1800     		movs	r0, r3
 6739 0038 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
3533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6740              		.loc 1 3534 1
 6741 003c C046     		nop
 6742 003e BD46     		mov	sp, r7
 6743 0040 04B0     		add	sp, sp, #16
 6744              		@ sp needed
 6745 0042 80BD     		pop	{r7, pc}
 6746              		.cfi_endproc
 6747              	.LFE95:
 6749              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
 6750              		.align	1
 6751              		.syntax unified
 6752              		.code	16
 6753              		.thumb_func
 6755              	UART_TxISR_8BIT:
 6756              	.LFB96:
3535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief TX interrrupt handler for 7 or 8 bits data word length .
3538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccTcPcT8.s 			page 180


3542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6757              		.loc 1 3544 1
 6758              		.cfi_startproc
 6759              		@ args = 0, pretend = 0, frame = 8
 6760              		@ frame_needed = 1, uses_anonymous_args = 0
 6761 0000 80B5     		push	{r7, lr}
 6762              	.LCFI168:
 6763              		.cfi_def_cfa_offset 8
 6764              		.cfi_offset 7, -8
 6765              		.cfi_offset 14, -4
 6766 0002 82B0     		sub	sp, sp, #8
 6767              	.LCFI169:
 6768              		.cfi_def_cfa_offset 16
 6769 0004 00AF     		add	r7, sp, #0
 6770              	.LCFI170:
 6771              		.cfi_def_cfa_register 7
 6772 0006 7860     		str	r0, [r7, #4]
3545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 6773              		.loc 1 3546 12
 6774 0008 7B68     		ldr	r3, [r7, #4]
 6775 000a 5B6F     		ldr	r3, [r3, #116]
 6776              		.loc 1 3546 6
 6777 000c 212B     		cmp	r3, #33
 6778 000e 2AD1     		bne	.L325
3547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 6779              		.loc 1 3548 14
 6780 0010 7B68     		ldr	r3, [r7, #4]
 6781 0012 5222     		movs	r2, #82
 6782 0014 9B5A     		ldrh	r3, [r3, r2]
 6783 0016 9BB2     		uxth	r3, r3
 6784              		.loc 1 3548 8
 6785 0018 002B     		cmp	r3, #0
 6786 001a 10D1     		bne	.L324
3549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 6787              		.loc 1 3551 7
 6788 001c 7B68     		ldr	r3, [r7, #4]
 6789 001e 1B68     		ldr	r3, [r3]
 6790 0020 1A68     		ldr	r2, [r3]
 6791 0022 7B68     		ldr	r3, [r7, #4]
 6792 0024 1B68     		ldr	r3, [r3]
 6793 0026 8021     		movs	r1, #128
 6794 0028 8A43     		bics	r2, r1
 6795 002a 1A60     		str	r2, [r3]
3552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 6796              		.loc 1 3554 7
 6797 002c 7B68     		ldr	r3, [r7, #4]
 6798 002e 1B68     		ldr	r3, [r3]
 6799 0030 1A68     		ldr	r2, [r3]
 6800 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 181


 6801 0034 1B68     		ldr	r3, [r3]
 6802 0036 4021     		movs	r1, #64
 6803 0038 0A43     		orrs	r2, r1
 6804 003a 1A60     		str	r2, [r3]
3555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
3557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
3559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr++;
3560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
3561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6805              		.loc 1 3563 1
 6806 003c 13E0     		b	.L325
 6807              	.L324:
3558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr++;
 6808              		.loc 1 3558 46
 6809 003e 7B68     		ldr	r3, [r7, #4]
 6810 0040 DB6C     		ldr	r3, [r3, #76]
3558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr++;
 6811              		.loc 1 3558 40
 6812 0042 1A78     		ldrb	r2, [r3]
3558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr++;
 6813              		.loc 1 3558 12
 6814 0044 7B68     		ldr	r3, [r7, #4]
 6815 0046 1B68     		ldr	r3, [r3]
3558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr++;
 6816              		.loc 1 3558 28
 6817 0048 1A85     		strh	r2, [r3, #40]
3559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 6818              		.loc 1 3559 12
 6819 004a 7B68     		ldr	r3, [r7, #4]
 6820 004c DB6C     		ldr	r3, [r3, #76]
3559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 6821              		.loc 1 3559 24
 6822 004e 5A1C     		adds	r2, r3, #1
 6823 0050 7B68     		ldr	r3, [r7, #4]
 6824 0052 DA64     		str	r2, [r3, #76]
3560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6825              		.loc 1 3560 12
 6826 0054 7B68     		ldr	r3, [r7, #4]
 6827 0056 5222     		movs	r2, #82
 6828 0058 9B5A     		ldrh	r3, [r3, r2]
 6829 005a 9BB2     		uxth	r3, r3
3560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6830              		.loc 1 3560 25
 6831 005c 013B     		subs	r3, r3, #1
 6832 005e 99B2     		uxth	r1, r3
 6833 0060 7B68     		ldr	r3, [r7, #4]
 6834 0062 5222     		movs	r2, #82
 6835 0064 9952     		strh	r1, [r3, r2]
 6836              	.L325:
 6837              		.loc 1 3563 1
 6838 0066 C046     		nop
 6839 0068 BD46     		mov	sp, r7
 6840 006a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccTcPcT8.s 			page 182


 6841              		@ sp needed
 6842 006c 80BD     		pop	{r7, pc}
 6843              		.cfi_endproc
 6844              	.LFE96:
 6846              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 6847              		.align	1
 6848              		.syntax unified
 6849              		.code	16
 6850              		.thumb_func
 6852              	UART_TxISR_16BIT:
 6853              	.LFB97:
3564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief TX interrrupt handler for 9 bits data word length.
3567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6854              		.loc 1 3573 1
 6855              		.cfi_startproc
 6856              		@ args = 0, pretend = 0, frame = 16
 6857              		@ frame_needed = 1, uses_anonymous_args = 0
 6858 0000 80B5     		push	{r7, lr}
 6859              	.LCFI171:
 6860              		.cfi_def_cfa_offset 8
 6861              		.cfi_offset 7, -8
 6862              		.cfi_offset 14, -4
 6863 0002 84B0     		sub	sp, sp, #16
 6864              	.LCFI172:
 6865              		.cfi_def_cfa_offset 24
 6866 0004 00AF     		add	r7, sp, #0
 6867              	.LCFI173:
 6868              		.cfi_def_cfa_register 7
 6869 0006 7860     		str	r0, [r7, #4]
3574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t *tmp;
3575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 6870              		.loc 1 3577 12
 6871 0008 7B68     		ldr	r3, [r7, #4]
 6872 000a 5B6F     		ldr	r3, [r3, #116]
 6873              		.loc 1 3577 6
 6874 000c 212B     		cmp	r3, #33
 6875 000e 2FD1     		bne	.L329
3578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 6876              		.loc 1 3579 14
 6877 0010 7B68     		ldr	r3, [r7, #4]
 6878 0012 5222     		movs	r2, #82
 6879 0014 9B5A     		ldrh	r3, [r3, r2]
 6880 0016 9BB2     		uxth	r3, r3
 6881              		.loc 1 3579 8
 6882 0018 002B     		cmp	r3, #0
 6883 001a 10D1     		bne	.L328
ARM GAS  /tmp/ccTcPcT8.s 			page 183


3580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 6884              		.loc 1 3582 7
 6885 001c 7B68     		ldr	r3, [r7, #4]
 6886 001e 1B68     		ldr	r3, [r3]
 6887 0020 1A68     		ldr	r2, [r3]
 6888 0022 7B68     		ldr	r3, [r7, #4]
 6889 0024 1B68     		ldr	r3, [r3]
 6890 0026 8021     		movs	r1, #128
 6891 0028 8A43     		bics	r2, r1
 6892 002a 1A60     		str	r2, [r3]
3583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 6893              		.loc 1 3585 7
 6894 002c 7B68     		ldr	r3, [r7, #4]
 6895 002e 1B68     		ldr	r3, [r3]
 6896 0030 1A68     		ldr	r2, [r3]
 6897 0032 7B68     		ldr	r3, [r7, #4]
 6898 0034 1B68     		ldr	r3, [r3]
 6899 0036 4021     		movs	r1, #64
 6900 0038 0A43     		orrs	r2, r1
 6901 003a 1A60     		str	r2, [r3]
3586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
3588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
3590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
3591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
3592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
3593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6902              		.loc 1 3595 1
 6903 003c 18E0     		b	.L329
 6904              	.L328:
3589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 6905              		.loc 1 3589 11
 6906 003e 7B68     		ldr	r3, [r7, #4]
 6907 0040 DB6C     		ldr	r3, [r3, #76]
 6908 0042 FB60     		str	r3, [r7, #12]
3590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6909              		.loc 1 3590 43
 6910 0044 FB68     		ldr	r3, [r7, #12]
 6911 0046 1A88     		ldrh	r2, [r3]
3590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6912              		.loc 1 3590 12
 6913 0048 7B68     		ldr	r3, [r7, #4]
 6914 004a 1B68     		ldr	r3, [r3]
3590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6915              		.loc 1 3590 50
 6916 004c D205     		lsls	r2, r2, #23
 6917 004e D20D     		lsrs	r2, r2, #23
 6918 0050 92B2     		uxth	r2, r2
3590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 6919              		.loc 1 3590 28
ARM GAS  /tmp/ccTcPcT8.s 			page 184


 6920 0052 1A85     		strh	r2, [r3, #40]
3591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 6921              		.loc 1 3591 12
 6922 0054 7B68     		ldr	r3, [r7, #4]
 6923 0056 DB6C     		ldr	r3, [r3, #76]
3591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 6924              		.loc 1 3591 25
 6925 0058 9A1C     		adds	r2, r3, #2
 6926 005a 7B68     		ldr	r3, [r7, #4]
 6927 005c DA64     		str	r2, [r3, #76]
3592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6928              		.loc 1 3592 12
 6929 005e 7B68     		ldr	r3, [r7, #4]
 6930 0060 5222     		movs	r2, #82
 6931 0062 9B5A     		ldrh	r3, [r3, r2]
 6932 0064 9BB2     		uxth	r3, r3
3592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 6933              		.loc 1 3592 25
 6934 0066 013B     		subs	r3, r3, #1
 6935 0068 99B2     		uxth	r1, r3
 6936 006a 7B68     		ldr	r3, [r7, #4]
 6937 006c 5222     		movs	r2, #82
 6938 006e 9952     		strh	r1, [r3, r2]
 6939              	.L329:
 6940              		.loc 1 3595 1
 6941 0070 C046     		nop
 6942 0072 BD46     		mov	sp, r7
 6943 0074 04B0     		add	sp, sp, #16
 6944              		@ sp needed
 6945 0076 80BD     		pop	{r7, pc}
 6946              		.cfi_endproc
 6947              	.LFE97:
 6949              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 6950              		.align	1
 6951              		.syntax unified
 6952              		.code	16
 6953              		.thumb_func
 6955              	UART_EndTransmit_IT:
 6956              	.LFB98:
3596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 6957              		.loc 1 3605 1
 6958              		.cfi_startproc
 6959              		@ args = 0, pretend = 0, frame = 8
 6960              		@ frame_needed = 1, uses_anonymous_args = 0
 6961 0000 80B5     		push	{r7, lr}
 6962              	.LCFI174:
 6963              		.cfi_def_cfa_offset 8
 6964              		.cfi_offset 7, -8
ARM GAS  /tmp/ccTcPcT8.s 			page 185


 6965              		.cfi_offset 14, -4
 6966 0002 82B0     		sub	sp, sp, #8
 6967              	.LCFI175:
 6968              		.cfi_def_cfa_offset 16
 6969 0004 00AF     		add	r7, sp, #0
 6970              	.LCFI176:
 6971              		.cfi_def_cfa_register 7
 6972 0006 7860     		str	r0, [r7, #4]
3606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 6973              		.loc 1 3607 3
 6974 0008 7B68     		ldr	r3, [r7, #4]
 6975 000a 1B68     		ldr	r3, [r3]
 6976 000c 1A68     		ldr	r2, [r3]
 6977 000e 7B68     		ldr	r3, [r7, #4]
 6978 0010 1B68     		ldr	r3, [r3]
 6979 0012 4021     		movs	r1, #64
 6980 0014 8A43     		bics	r2, r1
 6981 0016 1A60     		str	r2, [r3]
3608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 6982              		.loc 1 3610 17
 6983 0018 7B68     		ldr	r3, [r7, #4]
 6984 001a 2022     		movs	r2, #32
 6985 001c 5A67     		str	r2, [r3, #116]
3611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxISR = NULL;
 6986              		.loc 1 3613 16
 6987 001e 7B68     		ldr	r3, [r7, #4]
 6988 0020 0022     		movs	r2, #0
 6989 0022 5A66     		str	r2, [r3, #100]
3614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 6990              		.loc 1 3620 3
 6991 0024 7B68     		ldr	r3, [r7, #4]
 6992 0026 1800     		movs	r0, r3
 6993 0028 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
3621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 6994              		.loc 1 3622 1
 6995 002c C046     		nop
 6996 002e BD46     		mov	sp, r7
 6997 0030 02B0     		add	sp, sp, #8
 6998              		@ sp needed
 6999 0032 80BD     		pop	{r7, pc}
 7000              		.cfi_endproc
 7001              	.LFE98:
 7003              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 7004              		.align	1
 7005              		.syntax unified
ARM GAS  /tmp/ccTcPcT8.s 			page 186


 7006              		.code	16
 7007              		.thumb_func
 7009              	UART_RxISR_8BIT:
 7010              	.LFB99:
3623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief RX interrrupt handler for 7 or 8 bits data word length .
3626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
3630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 7011              		.loc 1 3630 1
 7012              		.cfi_startproc
 7013              		@ args = 0, pretend = 0, frame = 16
 7014              		@ frame_needed = 1, uses_anonymous_args = 0
 7015 0000 80B5     		push	{r7, lr}
 7016              	.LCFI177:
 7017              		.cfi_def_cfa_offset 8
 7018              		.cfi_offset 7, -8
 7019              		.cfi_offset 14, -4
 7020 0002 84B0     		sub	sp, sp, #16
 7021              	.LCFI178:
 7022              		.cfi_def_cfa_offset 24
 7023 0004 00AF     		add	r7, sp, #0
 7024              	.LCFI179:
 7025              		.cfi_def_cfa_register 7
 7026 0006 7860     		str	r0, [r7, #4]
3631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 7027              		.loc 1 3631 12
 7028 0008 0E20     		movs	r0, #14
 7029 000a 3B18     		adds	r3, r7, r0
 7030 000c 7A68     		ldr	r2, [r7, #4]
 7031 000e 5C21     		movs	r1, #92
 7032 0010 525A     		ldrh	r2, [r2, r1]
 7033 0012 1A80     		strh	r2, [r3]
3632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t  uhdata;
3633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 7034              		.loc 1 3635 12
 7035 0014 7B68     		ldr	r3, [r7, #4]
 7036 0016 9B6F     		ldr	r3, [r3, #120]
 7037              		.loc 1 3635 6
 7038 0018 222B     		cmp	r3, #34
 7039 001a 3FD1     		bne	.L332
3636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 7040              		.loc 1 3637 25
 7041 001c 7B68     		ldr	r3, [r7, #4]
 7042 001e 1A68     		ldr	r2, [r3]
 7043              		.loc 1 3637 12
 7044 0020 0C21     		movs	r1, #12
 7045 0022 7B18     		adds	r3, r7, r1
 7046 0024 928C     		ldrh	r2, [r2, #36]
 7047 0026 1A80     		strh	r2, [r3]
3638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
ARM GAS  /tmp/ccTcPcT8.s 			page 187


 7048              		.loc 1 3638 26
 7049 0028 7B18     		adds	r3, r7, r1
 7050 002a 1B88     		ldrh	r3, [r3]
 7051 002c DAB2     		uxtb	r2, r3
 7052              		.loc 1 3638 45
 7053 002e 3B18     		adds	r3, r7, r0
 7054 0030 1B88     		ldrh	r3, [r3]
 7055 0032 D9B2     		uxtb	r1, r3
 7056              		.loc 1 3638 11
 7057 0034 7B68     		ldr	r3, [r7, #4]
 7058 0036 5B6D     		ldr	r3, [r3, #84]
 7059              		.loc 1 3638 26
 7060 0038 0A40     		ands	r2, r1
 7061 003a D2B2     		uxtb	r2, r2
 7062              		.loc 1 3638 24
 7063 003c 1A70     		strb	r2, [r3]
3639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr++;
 7064              		.loc 1 3639 10
 7065 003e 7B68     		ldr	r3, [r7, #4]
 7066 0040 5B6D     		ldr	r3, [r3, #84]
 7067              		.loc 1 3639 22
 7068 0042 5A1C     		adds	r2, r3, #1
 7069 0044 7B68     		ldr	r3, [r7, #4]
 7070 0046 5A65     		str	r2, [r3, #84]
3640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount--;
 7071              		.loc 1 3640 10
 7072 0048 7B68     		ldr	r3, [r7, #4]
 7073 004a 5A22     		movs	r2, #90
 7074 004c 9B5A     		ldrh	r3, [r3, r2]
 7075 004e 9BB2     		uxth	r3, r3
 7076              		.loc 1 3640 23
 7077 0050 013B     		subs	r3, r3, #1
 7078 0052 99B2     		uxth	r1, r3
 7079 0054 7B68     		ldr	r3, [r7, #4]
 7080 0056 5A22     		movs	r2, #90
 7081 0058 9952     		strh	r1, [r3, r2]
3641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
 7082              		.loc 1 3642 14
 7083 005a 7B68     		ldr	r3, [r7, #4]
 7084 005c 5A22     		movs	r2, #90
 7085 005e 9B5A     		ldrh	r3, [r3, r2]
 7086 0060 9BB2     		uxth	r3, r3
 7087              		.loc 1 3642 8
 7088 0062 002B     		cmp	r3, #0
 7089 0064 22D1     		bne	.L334
3643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 7090              		.loc 1 3645 7
 7091 0066 7B68     		ldr	r3, [r7, #4]
 7092 0068 1B68     		ldr	r3, [r3]
 7093 006a 1A68     		ldr	r2, [r3]
 7094 006c 7B68     		ldr	r3, [r7, #4]
 7095 006e 1B68     		ldr	r3, [r3]
 7096 0070 1049     		ldr	r1, .L335
 7097 0072 0A40     		ands	r2, r1
ARM GAS  /tmp/ccTcPcT8.s 			page 188


 7098 0074 1A60     		str	r2, [r3]
3646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7099              		.loc 1 3648 7
 7100 0076 7B68     		ldr	r3, [r7, #4]
 7101 0078 1B68     		ldr	r3, [r3]
 7102 007a 9A68     		ldr	r2, [r3, #8]
 7103 007c 7B68     		ldr	r3, [r7, #4]
 7104 007e 1B68     		ldr	r3, [r3]
 7105 0080 0121     		movs	r1, #1
 7106 0082 8A43     		bics	r2, r1
 7107 0084 9A60     		str	r2, [r3, #8]
3649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 7108              		.loc 1 3651 22
 7109 0086 7B68     		ldr	r3, [r7, #4]
 7110 0088 2022     		movs	r2, #32
 7111 008a 9A67     		str	r2, [r3, #120]
3652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear RxISR function pointer */
3654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxISR = NULL;
 7112              		.loc 1 3654 20
 7113 008c 7B68     		ldr	r3, [r7, #4]
 7114 008e 0022     		movs	r2, #0
 7115 0090 1A66     		str	r2, [r3, #96]
3655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 7116              		.loc 1 3661 7
 7117 0092 7B68     		ldr	r3, [r7, #4]
 7118 0094 1800     		movs	r0, r3
 7119 0096 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
3662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
3666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 7120              		.loc 1 3670 1
 7121 009a 07E0     		b	.L334
 7122              	.L332:
3668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 7123              		.loc 1 3668 5
 7124 009c 7B68     		ldr	r3, [r7, #4]
 7125 009e 1B68     		ldr	r3, [r3]
 7126 00a0 9A69     		ldr	r2, [r3, #24]
 7127 00a2 7B68     		ldr	r3, [r7, #4]
 7128 00a4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccTcPcT8.s 			page 189


 7129 00a6 0821     		movs	r1, #8
 7130 00a8 0A43     		orrs	r2, r1
 7131 00aa 9A61     		str	r2, [r3, #24]
 7132              	.L334:
 7133              		.loc 1 3670 1
 7134 00ac C046     		nop
 7135 00ae BD46     		mov	sp, r7
 7136 00b0 04B0     		add	sp, sp, #16
 7137              		@ sp needed
 7138 00b2 80BD     		pop	{r7, pc}
 7139              	.L336:
 7140              		.align	2
 7141              	.L335:
 7142 00b4 DFFEFFFF 		.word	-289
 7143              		.cfi_endproc
 7144              	.LFE99:
 7146              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 7147              		.align	1
 7148              		.syntax unified
 7149              		.code	16
 7150              		.thumb_func
 7152              	UART_RxISR_16BIT:
 7153              	.LFB100:
3671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
3673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief RX interrrupt handler for 9 bits data word length .
3674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
3677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
3678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
3679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 7154              		.loc 1 3680 1
 7155              		.cfi_startproc
 7156              		@ args = 0, pretend = 0, frame = 16
 7157              		@ frame_needed = 1, uses_anonymous_args = 0
 7158 0000 80B5     		push	{r7, lr}
 7159              	.LCFI180:
 7160              		.cfi_def_cfa_offset 8
 7161              		.cfi_offset 7, -8
 7162              		.cfi_offset 14, -4
 7163 0002 84B0     		sub	sp, sp, #16
 7164              	.LCFI181:
 7165              		.cfi_def_cfa_offset 24
 7166 0004 00AF     		add	r7, sp, #0
 7167              	.LCFI182:
 7168              		.cfi_def_cfa_register 7
 7169 0006 7860     		str	r0, [r7, #4]
3681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t *tmp;
3682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 7170              		.loc 1 3682 12
 7171 0008 0E20     		movs	r0, #14
 7172 000a 3B18     		adds	r3, r7, r0
 7173 000c 7A68     		ldr	r2, [r7, #4]
 7174 000e 5C21     		movs	r1, #92
 7175 0010 525A     		ldrh	r2, [r2, r1]
ARM GAS  /tmp/ccTcPcT8.s 			page 190


 7176 0012 1A80     		strh	r2, [r3]
3683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t  uhdata;
3684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 7177              		.loc 1 3686 12
 7178 0014 7B68     		ldr	r3, [r7, #4]
 7179 0016 9B6F     		ldr	r3, [r3, #120]
 7180              		.loc 1 3686 6
 7181 0018 222B     		cmp	r3, #34
 7182 001a 3FD1     		bne	.L338
3687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 7183              		.loc 1 3688 25
 7184 001c 7B68     		ldr	r3, [r7, #4]
 7185 001e 1A68     		ldr	r2, [r3]
 7186              		.loc 1 3688 12
 7187 0020 0C21     		movs	r1, #12
 7188 0022 7B18     		adds	r3, r7, r1
 7189 0024 928C     		ldrh	r2, [r2, #36]
 7190 0026 1A80     		strh	r2, [r3]
3689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
 7191              		.loc 1 3689 9
 7192 0028 7B68     		ldr	r3, [r7, #4]
 7193 002a 5B6D     		ldr	r3, [r3, #84]
 7194 002c BB60     		str	r3, [r7, #8]
3690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 7195              		.loc 1 3690 12
 7196 002e 7B18     		adds	r3, r7, r1
 7197 0030 3A18     		adds	r2, r7, r0
 7198 0032 1B88     		ldrh	r3, [r3]
 7199 0034 1288     		ldrh	r2, [r2]
 7200 0036 1340     		ands	r3, r2
 7201 0038 9AB2     		uxth	r2, r3
 7202              		.loc 1 3690 10
 7203 003a BB68     		ldr	r3, [r7, #8]
 7204 003c 1A80     		strh	r2, [r3]
3691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 7205              		.loc 1 3691 10
 7206 003e 7B68     		ldr	r3, [r7, #4]
 7207 0040 5B6D     		ldr	r3, [r3, #84]
 7208              		.loc 1 3691 23
 7209 0042 9A1C     		adds	r2, r3, #2
 7210 0044 7B68     		ldr	r3, [r7, #4]
 7211 0046 5A65     		str	r2, [r3, #84]
3692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount--;
 7212              		.loc 1 3692 10
 7213 0048 7B68     		ldr	r3, [r7, #4]
 7214 004a 5A22     		movs	r2, #90
 7215 004c 9B5A     		ldrh	r3, [r3, r2]
 7216 004e 9BB2     		uxth	r3, r3
 7217              		.loc 1 3692 23
 7218 0050 013B     		subs	r3, r3, #1
 7219 0052 99B2     		uxth	r1, r3
 7220 0054 7B68     		ldr	r3, [r7, #4]
 7221 0056 5A22     		movs	r2, #90
 7222 0058 9952     		strh	r1, [r3, r2]
ARM GAS  /tmp/ccTcPcT8.s 			page 191


3693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
 7223              		.loc 1 3694 14
 7224 005a 7B68     		ldr	r3, [r7, #4]
 7225 005c 5A22     		movs	r2, #90
 7226 005e 9B5A     		ldrh	r3, [r3, r2]
 7227 0060 9BB2     		uxth	r3, r3
 7228              		.loc 1 3694 8
 7229 0062 002B     		cmp	r3, #0
 7230 0064 22D1     		bne	.L340
3695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
3696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 7231              		.loc 1 3697 7
 7232 0066 7B68     		ldr	r3, [r7, #4]
 7233 0068 1B68     		ldr	r3, [r3]
 7234 006a 1A68     		ldr	r2, [r3]
 7235 006c 7B68     		ldr	r3, [r7, #4]
 7236 006e 1B68     		ldr	r3, [r3]
 7237 0070 1049     		ldr	r1, .L341
 7238 0072 0A40     		ands	r2, r1
 7239 0074 1A60     		str	r2, [r3]
3698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 7240              		.loc 1 3700 7
 7241 0076 7B68     		ldr	r3, [r7, #4]
 7242 0078 1B68     		ldr	r3, [r3]
 7243 007a 9A68     		ldr	r2, [r3, #8]
 7244 007c 7B68     		ldr	r3, [r7, #4]
 7245 007e 1B68     		ldr	r3, [r3]
 7246 0080 0121     		movs	r1, #1
 7247 0082 8A43     		bics	r2, r1
 7248 0084 9A60     		str	r2, [r3, #8]
3701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 7249              		.loc 1 3703 22
 7250 0086 7B68     		ldr	r3, [r7, #4]
 7251 0088 2022     		movs	r2, #32
 7252 008a 9A67     		str	r2, [r3, #120]
3704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear RxISR function pointer */
3706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxISR = NULL;
 7253              		.loc 1 3706 20
 7254 008c 7B68     		ldr	r3, [r7, #4]
 7255 008e 0022     		movs	r2, #0
 7256 0090 1A66     		str	r2, [r3, #96]
3707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
3708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
3712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 7257              		.loc 1 3713 7
 7258 0092 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccTcPcT8.s 			page 192


 7259 0094 1800     		movs	r0, r3
 7260 0096 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
3714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
3716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
3718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
3719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
3722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 7261              		.loc 1 3722 1
 7262 009a 07E0     		b	.L340
 7263              	.L338:
3720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 7264              		.loc 1 3720 5
 7265 009c 7B68     		ldr	r3, [r7, #4]
 7266 009e 1B68     		ldr	r3, [r3]
 7267 00a0 9A69     		ldr	r2, [r3, #24]
 7268 00a2 7B68     		ldr	r3, [r7, #4]
 7269 00a4 1B68     		ldr	r3, [r3]
 7270 00a6 0821     		movs	r1, #8
 7271 00a8 0A43     		orrs	r2, r1
 7272 00aa 9A61     		str	r2, [r3, #24]
 7273              	.L340:
 7274              		.loc 1 3722 1
 7275 00ac C046     		nop
 7276 00ae BD46     		mov	sp, r7
 7277 00b0 04B0     		add	sp, sp, #16
 7278              		@ sp needed
 7279 00b2 80BD     		pop	{r7, pc}
 7280              	.L342:
 7281              		.align	2
 7282              	.L341:
 7283 00b4 DFFEFFFF 		.word	-289
 7284              		.cfi_endproc
 7285              	.LFE100:
 7287              		.text
 7288              	.Letext0:
 7289              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 7290              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 7291              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 7292              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 7293              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 7294              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 7295              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 7296              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 7297              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccTcPcT8.s 			page 193


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_hal_uart.c
     /tmp/ccTcPcT8.s:19     .text.HAL_UART_Init:00000000 $t
     /tmp/ccTcPcT8.s:25     .text.HAL_UART_Init:00000000 HAL_UART_Init
     /tmp/ccTcPcT8.s:553    .text.HAL_UART_MspInit:00000000 HAL_UART_MspInit
     /tmp/ccTcPcT8.s:4916   .text.UART_SetConfig:00000000 UART_SetConfig
     /tmp/ccTcPcT8.s:5404   .text.UART_AdvFeatureConfig:00000000 UART_AdvFeatureConfig
     /tmp/ccTcPcT8.s:5639   .text.UART_CheckIdleState:00000000 UART_CheckIdleState
     /tmp/ccTcPcT8.s:145    .text.HAL_UART_Init:000000a4 $d
     /tmp/ccTcPcT8.s:150    .text.HAL_HalfDuplex_Init:00000000 $t
     /tmp/ccTcPcT8.s:156    .text.HAL_HalfDuplex_Init:00000000 HAL_HalfDuplex_Init
     /tmp/ccTcPcT8.s:276    .text.HAL_HalfDuplex_Init:000000a4 $d
     /tmp/ccTcPcT8.s:281    .text.HAL_MultiProcessor_Init:00000000 $t
     /tmp/ccTcPcT8.s:287    .text.HAL_MultiProcessor_Init:00000000 HAL_MultiProcessor_Init
     /tmp/ccTcPcT8.s:445    .text.HAL_MultiProcessor_Init:000000e8 $d
     /tmp/ccTcPcT8.s:450    .text.HAL_UART_DeInit:00000000 $t
     /tmp/ccTcPcT8.s:456    .text.HAL_UART_DeInit:00000000 HAL_UART_DeInit
     /tmp/ccTcPcT8.s:587    .text.HAL_UART_MspDeInit:00000000 HAL_UART_MspDeInit
     /tmp/ccTcPcT8.s:547    .text.HAL_UART_MspInit:00000000 $t
     /tmp/ccTcPcT8.s:581    .text.HAL_UART_MspDeInit:00000000 $t
     /tmp/ccTcPcT8.s:615    .text.HAL_UART_Transmit:00000000 $t
     /tmp/ccTcPcT8.s:621    .text.HAL_UART_Transmit:00000000 HAL_UART_Transmit
     /tmp/ccTcPcT8.s:5755   .text.UART_WaitOnFlagUntilTimeout:00000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccTcPcT8.s:875    .text.HAL_UART_Receive:00000000 $t
     /tmp/ccTcPcT8.s:881    .text.HAL_UART_Receive:00000000 HAL_UART_Receive
     /tmp/ccTcPcT8.s:1195   .text.HAL_UART_Receive:000001ac $d
     /tmp/ccTcPcT8.s:1200   .text.HAL_UART_Transmit_IT:00000000 $t
     /tmp/ccTcPcT8.s:1206   .text.HAL_UART_Transmit_IT:00000000 HAL_UART_Transmit_IT
     /tmp/ccTcPcT8.s:1371   .text.HAL_UART_Transmit_IT:000000d4 $d
     /tmp/ccTcPcT8.s:6852   .text.UART_TxISR_16BIT:00000000 UART_TxISR_16BIT
     /tmp/ccTcPcT8.s:6755   .text.UART_TxISR_8BIT:00000000 UART_TxISR_8BIT
     /tmp/ccTcPcT8.s:1377   .text.HAL_UART_Receive_IT:00000000 $t
     /tmp/ccTcPcT8.s:1383   .text.HAL_UART_Receive_IT:00000000 HAL_UART_Receive_IT
     /tmp/ccTcPcT8.s:1616   .text.HAL_UART_Receive_IT:0000013c $d
     /tmp/ccTcPcT8.s:7152   .text.UART_RxISR_16BIT:00000000 UART_RxISR_16BIT
     /tmp/ccTcPcT8.s:7009   .text.UART_RxISR_8BIT:00000000 UART_RxISR_8BIT
     /tmp/ccTcPcT8.s:1623   .text.HAL_UART_Transmit_DMA:00000000 $t
     /tmp/ccTcPcT8.s:1629   .text.HAL_UART_Transmit_DMA:00000000 HAL_UART_Transmit_DMA
     /tmp/ccTcPcT8.s:1840   .text.HAL_UART_Transmit_DMA:00000114 $d
     /tmp/ccTcPcT8.s:6048   .text.UART_DMATransmitCplt:00000000 UART_DMATransmitCplt
     /tmp/ccTcPcT8.s:6122   .text.UART_DMATxHalfCplt:00000000 UART_DMATxHalfCplt
     /tmp/ccTcPcT8.s:6292   .text.UART_DMAError:00000000 UART_DMAError
     /tmp/ccTcPcT8.s:1847   .text.HAL_UART_Receive_DMA:00000000 $t
     /tmp/ccTcPcT8.s:1853   .text.HAL_UART_Receive_DMA:00000000 HAL_UART_Receive_DMA
     /tmp/ccTcPcT8.s:2072   .text.HAL_UART_Receive_DMA:00000124 $d
     /tmp/ccTcPcT8.s:6163   .text.UART_DMAReceiveCplt:00000000 UART_DMAReceiveCplt
     /tmp/ccTcPcT8.s:6251   .text.UART_DMARxHalfCplt:00000000 UART_DMARxHalfCplt
     /tmp/ccTcPcT8.s:2079   .text.HAL_UART_DMAPause:00000000 $t
     /tmp/ccTcPcT8.s:2085   .text.HAL_UART_DMAPause:00000000 HAL_UART_DMAPause
     /tmp/ccTcPcT8.s:2208   .text.HAL_UART_DMAPause:000000a4 $d
     /tmp/ccTcPcT8.s:2213   .text.HAL_UART_DMAResume:00000000 $t
     /tmp/ccTcPcT8.s:2219   .text.HAL_UART_DMAResume:00000000 HAL_UART_DMAResume
     /tmp/ccTcPcT8.s:2327   .text.HAL_UART_DMAStop:00000000 $t
     /tmp/ccTcPcT8.s:2333   .text.HAL_UART_DMAStop:00000000 HAL_UART_DMAStop
     /tmp/ccTcPcT8.s:5939   .text.UART_EndTxTransfer:00000000 UART_EndTxTransfer
     /tmp/ccTcPcT8.s:5985   .text.UART_EndRxTransfer:00000000 UART_EndRxTransfer
     /tmp/ccTcPcT8.s:2488   .text.HAL_UART_Abort:00000000 $t
ARM GAS  /tmp/ccTcPcT8.s 			page 194


     /tmp/ccTcPcT8.s:2494   .text.HAL_UART_Abort:00000000 HAL_UART_Abort
     /tmp/ccTcPcT8.s:2688   .text.HAL_UART_Abort:00000118 $d
     /tmp/ccTcPcT8.s:2693   .text.HAL_UART_AbortTransmit:00000000 $t
     /tmp/ccTcPcT8.s:2699   .text.HAL_UART_AbortTransmit:00000000 HAL_UART_AbortTransmit
     /tmp/ccTcPcT8.s:2803   .text.HAL_UART_AbortReceive:00000000 $t
     /tmp/ccTcPcT8.s:2809   .text.HAL_UART_AbortReceive:00000000 HAL_UART_AbortReceive
     /tmp/ccTcPcT8.s:2935   .text.HAL_UART_AbortReceive:000000b0 $d
     /tmp/ccTcPcT8.s:2940   .text.HAL_UART_Abort_IT:00000000 $t
     /tmp/ccTcPcT8.s:2946   .text.HAL_UART_Abort_IT:00000000 HAL_UART_Abort_IT
     /tmp/ccTcPcT8.s:4148   .text.HAL_UART_AbortCpltCallback:00000000 HAL_UART_AbortCpltCallback
     /tmp/ccTcPcT8.s:3200   .text.HAL_UART_Abort_IT:00000164 $d
     /tmp/ccTcPcT8.s:6446   .text.UART_DMATxAbortCallback:00000000 UART_DMATxAbortCallback
     /tmp/ccTcPcT8.s:6539   .text.UART_DMARxAbortCallback:00000000 UART_DMARxAbortCallback
     /tmp/ccTcPcT8.s:3207   .text.HAL_UART_AbortTransmit_IT:00000000 $t
     /tmp/ccTcPcT8.s:3213   .text.HAL_UART_AbortTransmit_IT:00000000 HAL_UART_AbortTransmit_IT
     /tmp/ccTcPcT8.s:4182   .text.HAL_UART_AbortTransmitCpltCallback:00000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccTcPcT8.s:3340   .text.HAL_UART_AbortTransmit_IT:000000a8 $d
     /tmp/ccTcPcT8.s:6641   .text.UART_DMATxOnlyAbortCallback:00000000 UART_DMATxOnlyAbortCallback
     /tmp/ccTcPcT8.s:3345   .text.HAL_UART_AbortReceive_IT:00000000 $t
     /tmp/ccTcPcT8.s:3351   .text.HAL_UART_AbortReceive_IT:00000000 HAL_UART_AbortReceive_IT
     /tmp/ccTcPcT8.s:4216   .text.HAL_UART_AbortReceiveCpltCallback:00000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccTcPcT8.s:3506   .text.HAL_UART_AbortReceive_IT:000000d8 $d
     /tmp/ccTcPcT8.s:6691   .text.UART_DMARxOnlyAbortCallback:00000000 UART_DMARxOnlyAbortCallback
     /tmp/ccTcPcT8.s:3512   .text.HAL_UART_IRQHandler:00000000 $t
     /tmp/ccTcPcT8.s:3518   .text.HAL_UART_IRQHandler:00000000 HAL_UART_IRQHandler
     /tmp/ccTcPcT8.s:4114   .text.HAL_UART_ErrorCallback:00000000 HAL_UART_ErrorCallback
     /tmp/ccTcPcT8.s:6955   .text.UART_EndTransmit_IT:00000000 UART_EndTransmit_IT
     /tmp/ccTcPcT8.s:3966   .text.HAL_UART_IRQHandler:00000248 $d
     /tmp/ccTcPcT8.s:6395   .text.UART_DMAAbortOnError:00000000 UART_DMAAbortOnError
     /tmp/ccTcPcT8.s:3972   .text.HAL_UART_TxCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:3978   .text.HAL_UART_TxCpltCallback:00000000 HAL_UART_TxCpltCallback
     /tmp/ccTcPcT8.s:4006   .text.HAL_UART_TxHalfCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4012   .text.HAL_UART_TxHalfCpltCallback:00000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccTcPcT8.s:4040   .text.HAL_UART_RxCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4046   .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
     /tmp/ccTcPcT8.s:4074   .text.HAL_UART_RxHalfCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4080   .text.HAL_UART_RxHalfCpltCallback:00000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccTcPcT8.s:4108   .text.HAL_UART_ErrorCallback:00000000 $t
     /tmp/ccTcPcT8.s:4142   .text.HAL_UART_AbortCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4176   .text.HAL_UART_AbortTransmitCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4210   .text.HAL_UART_AbortReceiveCpltCallback:00000000 $t
     /tmp/ccTcPcT8.s:4244   .text.HAL_UART_ReceiverTimeout_Config:00000000 $t
     /tmp/ccTcPcT8.s:4250   .text.HAL_UART_ReceiverTimeout_Config:00000000 HAL_UART_ReceiverTimeout_Config
     /tmp/ccTcPcT8.s:4290   .text.HAL_UART_EnableReceiverTimeout:00000000 $t
     /tmp/ccTcPcT8.s:4296   .text.HAL_UART_EnableReceiverTimeout:00000000 HAL_UART_EnableReceiverTimeout
     /tmp/ccTcPcT8.s:4376   .text.HAL_UART_DisableReceiverTimeout:00000000 $t
     /tmp/ccTcPcT8.s:4382   .text.HAL_UART_DisableReceiverTimeout:00000000 HAL_UART_DisableReceiverTimeout
     /tmp/ccTcPcT8.s:4460   .text.HAL_UART_DisableReceiverTimeout:00000058 $d
     /tmp/ccTcPcT8.s:4465   .text.HAL_MultiProcessor_EnableMuteMode:00000000 $t
     /tmp/ccTcPcT8.s:4471   .text.HAL_MultiProcessor_EnableMuteMode:00000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccTcPcT8.s:4539   .text.HAL_MultiProcessor_DisableMuteMode:00000000 $t
     /tmp/ccTcPcT8.s:4545   .text.HAL_MultiProcessor_DisableMuteMode:00000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccTcPcT8.s:4611   .text.HAL_MultiProcessor_DisableMuteMode:0000004c $d
     /tmp/ccTcPcT8.s:4616   .text.HAL_MultiProcessor_EnterMuteMode:00000000 $t
     /tmp/ccTcPcT8.s:4622   .text.HAL_MultiProcessor_EnterMuteMode:00000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccTcPcT8.s:4659   .text.HAL_HalfDuplex_EnableTransmitter:00000000 $t
     /tmp/ccTcPcT8.s:4665   .text.HAL_HalfDuplex_EnableTransmitter:00000000 HAL_HalfDuplex_EnableTransmitter
ARM GAS  /tmp/ccTcPcT8.s 			page 195


     /tmp/ccTcPcT8.s:4743   .text.HAL_HalfDuplex_EnableReceiver:00000000 $t
     /tmp/ccTcPcT8.s:4749   .text.HAL_HalfDuplex_EnableReceiver:00000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccTcPcT8.s:4827   .text.HAL_UART_GetState:00000000 $t
     /tmp/ccTcPcT8.s:4833   .text.HAL_UART_GetState:00000000 HAL_UART_GetState
     /tmp/ccTcPcT8.s:4873   .text.HAL_UART_GetError:00000000 $t
     /tmp/ccTcPcT8.s:4879   .text.HAL_UART_GetError:00000000 HAL_UART_GetError
     /tmp/ccTcPcT8.s:4910   .text.UART_SetConfig:00000000 $t
     /tmp/ccTcPcT8.s:5388   .text.UART_SetConfig:000002c8 $d
     /tmp/ccTcPcT8.s:5398   .text.UART_AdvFeatureConfig:00000000 $t
     /tmp/ccTcPcT8.s:5620   .text.UART_AdvFeatureConfig:00000144 $d
     /tmp/ccTcPcT8.s:5633   .text.UART_CheckIdleState:00000000 $t
     /tmp/ccTcPcT8.s:5744   .text.UART_CheckIdleState:00000084 $d
     /tmp/ccTcPcT8.s:5749   .text.UART_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccTcPcT8.s:5929   .text.UART_WaitOnFlagUntilTimeout:000000f8 $d
     /tmp/ccTcPcT8.s:5934   .text.UART_EndTxTransfer:00000000 $t
     /tmp/ccTcPcT8.s:5980   .text.UART_EndRxTransfer:00000000 $t
     /tmp/ccTcPcT8.s:6038   .text.UART_EndRxTransfer:0000003c $d
     /tmp/ccTcPcT8.s:6043   .text.UART_DMATransmitCplt:00000000 $t
     /tmp/ccTcPcT8.s:6117   .text.UART_DMATxHalfCplt:00000000 $t
     /tmp/ccTcPcT8.s:6158   .text.UART_DMAReceiveCplt:00000000 $t
     /tmp/ccTcPcT8.s:6241   .text.UART_DMAReceiveCplt:00000064 $d
     /tmp/ccTcPcT8.s:6246   .text.UART_DMARxHalfCplt:00000000 $t
     /tmp/ccTcPcT8.s:6287   .text.UART_DMAError:00000000 $t
     /tmp/ccTcPcT8.s:6390   .text.UART_DMAAbortOnError:00000000 $t
     /tmp/ccTcPcT8.s:6441   .text.UART_DMATxAbortCallback:00000000 $t
     /tmp/ccTcPcT8.s:6534   .text.UART_DMARxAbortCallback:00000000 $t
     /tmp/ccTcPcT8.s:6636   .text.UART_DMATxOnlyAbortCallback:00000000 $t
     /tmp/ccTcPcT8.s:6686   .text.UART_DMARxOnlyAbortCallback:00000000 $t
     /tmp/ccTcPcT8.s:6750   .text.UART_TxISR_8BIT:00000000 $t
     /tmp/ccTcPcT8.s:6847   .text.UART_TxISR_16BIT:00000000 $t
     /tmp/ccTcPcT8.s:6950   .text.UART_EndTransmit_IT:00000000 $t
     /tmp/ccTcPcT8.s:7004   .text.UART_RxISR_8BIT:00000000 $t
     /tmp/ccTcPcT8.s:7142   .text.UART_RxISR_8BIT:000000b4 $d
     /tmp/ccTcPcT8.s:7147   .text.UART_RxISR_16BIT:00000000 $t
     /tmp/ccTcPcT8.s:7283   .text.UART_RxISR_16BIT:000000b4 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK1Freq
__aeabi_uidiv
HAL_RCC_GetSysClockFreq
